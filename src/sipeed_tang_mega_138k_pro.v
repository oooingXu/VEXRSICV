// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sipeed_tang_mega_138k_pro.v
// Device     : GW5AST-LV138FPG676AES
// LiteX sha1 : 4368d5a9e
// Date       : 2024-11-30 05:55:59
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sipeed_tang_mega_138k_pro (
    inout  wire          atkms7620_scl,
    inout  wire          atkms7620_sda,
    output wire          buzzer_out_pwm,
    input  wire          clk50,
    input  wire          joypad2_in_data,
    output wire          joypad2_out_clk,
    output wire          joypad2_out_load,
    input  wire          joypad_in_data,
    output wire          joypad_out_clk,
    output wire          joypad_out_load,
    output wire    [5:0] lcd_b,
    output wire          lcd_clk,
    output wire          lcd_de,
    output wire    [5:0] lcd_g,
    output wire          lcd_hsync_n,
    output wire    [5:0] lcd_r,
    output wire          lcd_vsync_n,
    output wire          led_n0,
    output wire          led_n1,
    output wire          led_n2,
    output wire          led_n3,
    output wire          led_n4,
    output wire          led_n5,
    input  wire          rst,
    output wire   [12:0] sdram_a,
    output wire    [1:0] sdram_ba,
    output wire          sdram_cas_n,
    output wire          sdram_clock,
    output wire          sdram_cs_n,
    output wire    [1:0] sdram_dm,
    inout  wire   [15:0] sdram_dq,
    output wire          sdram_ras_n,
    output wire          sdram_we_n,
    input  wire          serial_rx,
    output reg           serial_tx,
    output reg           spisdcard_clk,
    output reg           spisdcard_cs_n,
    input  wire          spisdcard_miso,
    output reg           spisdcard_mosi
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (GW5APLL)
│    │    └─── [PLL]
└─── bus (SoCBusHandler)
│    └─── wishbone2axi_0* (Wishbone2AXI)
│    │    └─── wishbone2axilite_0* (Wishbone2AXILite)
│    │    │    └─── fsm (FSM)
│    │    └─── axilite2axi_0* (AXILite2AXI)
│    └─── wishbone2axi_1* (Wishbone2AXI)
│    │    └─── wishbone2axilite_0* (Wishbone2AXILite)
│    │    │    └─── fsm (FSM)
│    │    └─── axilite2axi_0* (AXILite2AXI)
│    └─── axi2axilite_0* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── axi2axilite_1* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── axi2wishbone_0* (AXI2Wishbone)
│    │    └─── axi2axilite_0* (AXI2AXILite)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    │    └─── fsm (FSM)
│    │    └─── axilite2wishbone_0* (AXILite2Wishbone)
│    │    │    └─── fsm (FSM)
│    └─── axi2axilite_2* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── _interconnect (AXIInterconnectShared)
│    │    └─── arbiter (AXIArbiter)
│    │    │    └─── rr_write (RoundRobin)
│    │    │    └─── rr_read (RoundRobin)
│    │    │    └─── wr_lock (_AXIRequestCounter)
│    │    │    └─── rd_lock (_AXIRequestCounter)
│    │    └─── decoder (AXIDecoder)
│    │    │    └─── _axirequestcounter_0* (_AXIRequestCounter)
│    │    │    └─── _axirequestcounter_1* (_AXIRequestCounter)
│    │    └─── timeout (AXITimeout)
│    │    │    └─── waittimer_0* (WaitTimer)
│    │    │    └─── waittimer_1* (WaitTimer)
│    │    │    └─── wr_fsm (FSM)
│    │    │    └─── rd_fsm (FSM)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (AXILiteSRAM)
│    └─── fsm (FSM)
└─── sram (AXILiteSRAM)
│    └─── fsm (FSM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── sdrphy (HalfRateGENSDRPHY)
│    └─── gensdrphy_0* (GENSDRPHY)
└─── sdram (LiteDRAMCore)
│    └─── dfii (DFIInjector)
│    │    └─── pi0 (PhaseInjector)
│    │    └─── pi1 (PhaseInjector)
│    └─── controller (LiteDRAMController)
│    │    └─── refresher (Refresher)
│    │    │    └─── timer (RefreshTimer)
│    │    │    └─── postponer (RefreshPostponer)
│    │    │    └─── sequencer (RefreshSequencer)
│    │    │    │    └─── refreshexecuter_0* (RefreshExecuter)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_0* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_1* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_2* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_3* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── multiplexer (Multiplexer)
│    │    │    └─── choose_cmd (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── choose_req (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── _steerer_0* (_Steerer)
│    │    │    └─── trrdcon (tXXDController)
│    │    │    └─── tfawcon (tFAWController)
│    │    │    └─── tccdcon (tXXDController)
│    │    │    └─── twtrcon (tXXDController)
│    │    │    └─── fsm (FSM)
│    └─── crossbar (LiteDRAMCrossbar)
│    │    └─── roundrobin_0* (RoundRobin)
│    │    └─── roundrobin_1* (RoundRobin)
│    │    └─── roundrobin_2* (RoundRobin)
│    │    └─── roundrobin_3* (RoundRobin)
└─── l2_cache (Cache)
│    └─── fsm (FSM)
└─── wishbone_bridge (LiteDRAMWishbone2Native)
│    └─── litedramnativeportconverter_0* (LiteDRAMNativePortConverter)
│    │    └─── converter (LiteDRAMNativePortDownConverter)
│    │    │    └─── fsm (FSM)
│    │    │    └─── strideconverter_0* (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _downconverter_0* (_DownConverter)
│    │    │    └─── pipeline_0* (Pipeline)
│    │    │    └─── strideconverter_1* (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _upconverter_0* (_UpConverter)
│    │    │    └─── pipeline_1* (Pipeline)
│    └─── fsm (FSM)
└─── videophy (VideoVGAPHY)
└─── video_framebuffer_vtg (VideoTimingGenerator)
│    └─── fsm (FSM)
└─── video_framebuffer (VideoFrameBuffer)
│    └─── dma (LiteDRAMDMAReader)
│    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    └─── fifo (SyncFIFO)
│    │    └─── syncfifo_1* (SyncFIFO)
│    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    └─── fsm (FSM)
│    └─── conv (Converter)
│    │    └─── _identityconverter_0* (_IdentityConverter)
│    └─── cdc (ClockDomainCrossing)
│    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    └─── graycounter_1* (GrayCounter)
│    └─── fsm_0* (FSM)
└─── gpio (GPIOInOut)
│    └─── gpio_in (GPIOIn)
│    └─── gpio_out (GPIOOut)
└─── gpio2 (GPIOInOut)
│    └─── gpio_in (GPIOIn)
│    └─── gpio_out (GPIOOut)
└─── i2c2 (I2CMaster)
└─── gpio3 (GPIOOut)
└─── spisdcard (SPIMaster)
│    └─── fsm (FSM)
└─── csr_bridge (AXILite2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_6* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstorage_6* (CSRStorage)
│    │    └─── csrstorage_7* (CSRStorage)
│    │    └─── csrstorage_8* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    └─── csrbank_7* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_8* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_9* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    └─── csrbank_10* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    └─── csrbank_11* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstorage_6* (CSRStorage)
│    │    └─── csrstorage_7* (CSRStorage)
│    │    └─── csrstorage_8* (CSRStorage)
└─── csr_interconnect (InterconnectShared)
└─── [DFFP]
└─── [DFFP]
└─── [DFFP]
└─── [DFFP]
└─── [DFFP]
└─── [DFFP]
└─── [DFFP]
└─── [DFFP]
└─── [ODDR]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFP]
└─── [DFFP]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [IOBUF]
└─── [IOBUF]
└─── [IOBUF]
└─── [IOBUF]
└─── [IOBUF]
└─── [IOBUF]
└─── [IOBUF]
└─── [IOBUF]
└─── [IOBUF]
└─── [IOBUF]
└─── [IOBUF]
└─── [IOBUF]
└─── [IOBUF]
└─── [DFFSE]
└─── [IOBUF]
└─── [DFFSE]
└─── [ODDR]
└─── [IOBUF]
└─── [IOBUF]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [IOBUF]
└─── [IOBUF]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
└─── [DFFSE]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          builder_ar_first;
wire          builder_ar_last;
wire          builder_ar_param_dest;
wire          builder_ar_param_id;
wire          builder_ar_param_user;
wire   [31:0] builder_ar_payload_addr;
wire    [1:0] builder_ar_payload_burst;
wire    [3:0] builder_ar_payload_cache;
wire    [7:0] builder_ar_payload_len;
wire          builder_ar_payload_lock;
wire    [2:0] builder_ar_payload_prot;
wire    [3:0] builder_ar_payload_qos;
wire    [3:0] builder_ar_payload_region;
wire    [2:0] builder_ar_payload_size;
reg           builder_ar_ready = 1'd0;
wire          builder_ar_valid;
wire          builder_aw_first;
wire          builder_aw_last;
wire          builder_aw_param_dest;
wire          builder_aw_param_id;
wire          builder_aw_param_user;
wire   [31:0] builder_aw_payload_addr;
wire    [1:0] builder_aw_payload_burst;
wire    [3:0] builder_aw_payload_cache;
wire    [7:0] builder_aw_payload_len;
wire          builder_aw_payload_lock;
wire    [2:0] builder_aw_payload_prot;
wire    [3:0] builder_aw_payload_qos;
wire    [3:0] builder_aw_payload_region;
wire    [2:0] builder_aw_payload_size;
reg           builder_aw_ready = 1'd0;
wire          builder_aw_valid;
reg     [1:0] builder_axi2axilite0_next_state = 2'd0;
reg     [1:0] builder_axi2axilite0_state = 2'd0;
reg     [1:0] builder_axi2axilite1_next_state = 2'd0;
reg     [1:0] builder_axi2axilite1_state = 2'd0;
reg     [1:0] builder_axi2axilite2_next_state = 2'd0;
reg     [1:0] builder_axi2axilite2_state = 2'd0;
reg     [1:0] builder_axi2axilite_next_state = 2'd0;
reg     [1:0] builder_axi2axilite_state = 2'd0;
reg     [2:0] builder_axilite2wishbone_next_state = 3'd0;
reg     [2:0] builder_axilite2wishbone_state = 3'd0;
reg     [7:0] builder_axirequestcounter0_counter = 8'd0;
wire          builder_axirequestcounter0_empty;
wire          builder_axirequestcounter0_full;
wire          builder_axirequestcounter0_stall;
reg     [7:0] builder_axirequestcounter1_counter = 8'd0;
wire          builder_axirequestcounter1_empty;
wire          builder_axirequestcounter1_full;
wire          builder_axirequestcounter1_stall;
wire          builder_b_first;
wire          builder_b_last;
wire          builder_b_param_dest;
wire          builder_b_param_id;
wire          builder_b_param_user;
reg     [1:0] builder_b_payload_resp = 2'd0;
wire          builder_b_ready;
reg           builder_b_valid = 1'd0;
reg    [13:0] builder_basesoc_adr = 14'd0;
reg     [2:0] builder_basesoc_axilite2csr_next_state = 3'd0;
reg     [2:0] builder_basesoc_axilite2csr_state = 3'd0;
reg    [31:0] builder_basesoc_axiliteinterface_ar_payload_addr = 32'd0;
reg           builder_basesoc_axiliteinterface_ar_ready = 1'd0;
reg           builder_basesoc_axiliteinterface_ar_valid = 1'd0;
reg    [31:0] builder_basesoc_axiliteinterface_aw_payload_addr = 32'd0;
reg           builder_basesoc_axiliteinterface_aw_ready = 1'd0;
reg           builder_basesoc_axiliteinterface_aw_valid = 1'd0;
reg     [1:0] builder_basesoc_axiliteinterface_b_payload_resp = 2'd0;
wire          builder_basesoc_axiliteinterface_b_ready;
reg           builder_basesoc_axiliteinterface_b_valid = 1'd0;
reg    [31:0] builder_basesoc_axiliteinterface_r_payload_data = 32'd0;
reg     [1:0] builder_basesoc_axiliteinterface_r_payload_resp = 2'd0;
reg           builder_basesoc_axiliteinterface_r_ready = 1'd0;
reg           builder_basesoc_axiliteinterface_r_valid = 1'd0;
reg    [31:0] builder_basesoc_axiliteinterface_w_payload_data = 32'd0;
reg     [3:0] builder_basesoc_axiliteinterface_w_payload_strb = 4'd0;
reg           builder_basesoc_axiliteinterface_w_ready = 1'd0;
reg           builder_basesoc_axiliteinterface_w_valid = 1'd0;
reg     [2:0] builder_basesoc_axilitesram0_next_state = 3'd0;
reg     [2:0] builder_basesoc_axilitesram0_state = 3'd0;
reg     [2:0] builder_basesoc_axilitesram1_next_state = 3'd0;
reg     [2:0] builder_basesoc_axilitesram1_state = 3'd0;
reg     [2:0] builder_basesoc_bankmachine0_next_state = 3'd0;
reg     [2:0] builder_basesoc_bankmachine0_state = 3'd0;
reg     [2:0] builder_basesoc_bankmachine1_next_state = 3'd0;
reg     [2:0] builder_basesoc_bankmachine1_state = 3'd0;
reg     [2:0] builder_basesoc_bankmachine2_next_state = 3'd0;
reg     [2:0] builder_basesoc_bankmachine2_state = 3'd0;
reg     [2:0] builder_basesoc_bankmachine3_next_state = 3'd0;
reg     [2:0] builder_basesoc_bankmachine3_state = 3'd0;
reg           builder_basesoc_clockdomainsrenamer_next_state = 1'd0;
reg           builder_basesoc_clockdomainsrenamer_state = 1'd0;
wire   [31:0] builder_basesoc_dat_r;
wire   [31:0] builder_basesoc_dat_w;
reg           builder_basesoc_do_read = 1'd0;
reg           builder_basesoc_do_write = 1'd0;
reg     [1:0] builder_basesoc_fsm_next_state = 2'd0;
reg     [1:0] builder_basesoc_fsm_state = 2'd0;
reg     [1:0] builder_basesoc_fullmemorywe_next_state = 2'd0;
reg     [1:0] builder_basesoc_fullmemorywe_state = 2'd0;
wire          builder_basesoc_gw5apll0;
wire          builder_basesoc_gw5apll1;
wire          builder_basesoc_gw5apll2;
reg           builder_basesoc_last_was_read = 1'd0;
reg           builder_basesoc_last_was_read_axilite2csr_next_value2 = 1'd0;
reg           builder_basesoc_last_was_read_axilite2csr_next_value_ce2 = 1'd0;
reg     [1:0] builder_basesoc_litedramdmareader_next_state = 2'd0;
reg     [1:0] builder_basesoc_litedramdmareader_state = 2'd0;
reg           builder_basesoc_litedramnativeportconverter_next_state = 1'd0;
reg           builder_basesoc_litedramnativeportconverter_state = 1'd0;
reg           builder_basesoc_locked0 = 1'd0;
reg           builder_basesoc_locked1 = 1'd0;
reg           builder_basesoc_locked2 = 1'd0;
reg           builder_basesoc_locked3 = 1'd0;
reg           builder_basesoc_locked4 = 1'd0;
reg           builder_basesoc_locked5 = 1'd0;
reg           builder_basesoc_locked6 = 1'd0;
reg           builder_basesoc_locked7 = 1'd0;
reg     [2:0] builder_basesoc_multiplexer_next_state = 3'd0;
reg     [2:0] builder_basesoc_multiplexer_state = 3'd0;
reg           builder_basesoc_new_master_rdata_valid0 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid1 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid2 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid3 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid4 = 1'd0;
reg           builder_basesoc_new_master_rdata_valid5 = 1'd0;
reg           builder_basesoc_new_master_wdata_ready0 = 1'd0;
reg           builder_basesoc_new_master_wdata_ready1 = 1'd0;
reg    [13:0] builder_basesoc_port_adr_reg = 14'd0;
reg    [13:0] builder_basesoc_port_adr_reg_axilite2csr_next_value0 = 14'd0;
reg           builder_basesoc_port_adr_reg_axilite2csr_next_value_ce0 = 1'd0;
reg    [31:0] builder_basesoc_port_dat_r_latched = 32'd0;
reg    [31:0] builder_basesoc_port_dat_r_latched_axilite2csr_next_value1 = 32'd0;
reg           builder_basesoc_port_dat_r_latched_axilite2csr_next_value_ce1 = 1'd0;
wire          builder_basesoc_re;
reg     [1:0] builder_basesoc_refresher_next_state = 2'd0;
reg     [1:0] builder_basesoc_refresher_state = 2'd0;
reg           builder_basesoc_resetinserter_next_state = 1'd0;
reg           builder_basesoc_resetinserter_state = 1'd0;
wire          builder_basesoc_roundrobin0_ce;
reg           builder_basesoc_roundrobin0_grant = 1'd0;
wire    [1:0] builder_basesoc_roundrobin0_request;
wire          builder_basesoc_roundrobin1_ce;
reg           builder_basesoc_roundrobin1_grant = 1'd0;
wire    [1:0] builder_basesoc_roundrobin1_request;
wire          builder_basesoc_roundrobin2_ce;
reg           builder_basesoc_roundrobin2_grant = 1'd0;
wire    [1:0] builder_basesoc_roundrobin2_request;
wire          builder_basesoc_roundrobin3_ce;
reg           builder_basesoc_roundrobin3_grant = 1'd0;
wire    [1:0] builder_basesoc_roundrobin3_request;
reg           builder_basesoc_rs232phyrx_next_state = 1'd0;
reg           builder_basesoc_rs232phyrx_state = 1'd0;
reg           builder_basesoc_rs232phytx_next_state = 1'd0;
reg           builder_basesoc_rs232phytx_state = 1'd0;
wire          builder_basesoc_socbushandler_ar_first;
wire          builder_basesoc_socbushandler_ar_last;
wire          builder_basesoc_socbushandler_ar_param_dest;
wire          builder_basesoc_socbushandler_ar_param_id;
wire          builder_basesoc_socbushandler_ar_param_user;
wire   [31:0] builder_basesoc_socbushandler_ar_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_ar_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_ar_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_ar_payload_len;
wire          builder_basesoc_socbushandler_ar_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_ar_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_ar_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_ar_payload_region;
wire    [2:0] builder_basesoc_socbushandler_ar_payload_size;
reg           builder_basesoc_socbushandler_ar_ready = 1'd0;
wire          builder_basesoc_socbushandler_ar_valid;
wire          builder_basesoc_socbushandler_aw_first;
wire          builder_basesoc_socbushandler_aw_last;
wire          builder_basesoc_socbushandler_aw_param_dest;
wire          builder_basesoc_socbushandler_aw_param_id;
wire          builder_basesoc_socbushandler_aw_param_user;
wire   [31:0] builder_basesoc_socbushandler_aw_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_aw_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_aw_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_aw_payload_len;
wire          builder_basesoc_socbushandler_aw_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_aw_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_aw_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_aw_payload_region;
wire    [2:0] builder_basesoc_socbushandler_aw_payload_size;
reg           builder_basesoc_socbushandler_aw_ready = 1'd0;
wire          builder_basesoc_socbushandler_aw_valid;
wire          builder_basesoc_socbushandler_ax_beat_first;
wire          builder_basesoc_socbushandler_ax_beat_last;
wire          builder_basesoc_socbushandler_ax_beat_param_id;
wire   [31:0] builder_basesoc_socbushandler_ax_beat_payload_addr;
reg           builder_basesoc_socbushandler_ax_beat_ready = 1'd0;
wire          builder_basesoc_socbushandler_ax_beat_valid;
reg           builder_basesoc_socbushandler_ax_burst_first = 1'd0;
reg           builder_basesoc_socbushandler_ax_burst_last = 1'd0;
reg           builder_basesoc_socbushandler_ax_burst_param_dest = 1'd0;
reg           builder_basesoc_socbushandler_ax_burst_param_id = 1'd0;
reg           builder_basesoc_socbushandler_ax_burst_param_user = 1'd0;
reg    [31:0] builder_basesoc_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] builder_basesoc_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [3:0] builder_basesoc_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [7:0] builder_basesoc_socbushandler_ax_burst_payload_len = 8'd0;
reg           builder_basesoc_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] builder_basesoc_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] builder_basesoc_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] builder_basesoc_socbushandler_ax_burst_payload_region = 4'd0;
reg     [2:0] builder_basesoc_socbushandler_ax_burst_payload_size = 3'd0;
wire          builder_basesoc_socbushandler_ax_burst_ready;
reg           builder_basesoc_socbushandler_ax_burst_valid = 1'd0;
reg           builder_basesoc_socbushandler_b_first = 1'd0;
reg           builder_basesoc_socbushandler_b_last = 1'd0;
reg           builder_basesoc_socbushandler_b_param_dest = 1'd0;
reg           builder_basesoc_socbushandler_b_param_id = 1'd0;
reg           builder_basesoc_socbushandler_b_param_user = 1'd0;
reg     [1:0] builder_basesoc_socbushandler_b_payload_resp = 2'd0;
wire          builder_basesoc_socbushandler_b_ready;
reg           builder_basesoc_socbushandler_b_valid = 1'd0;
reg     [7:0] builder_basesoc_socbushandler_beat_count = 8'd0;
reg  signed  [12:0] builder_basesoc_socbushandler_beat_offset = 13'd0;
wire   [11:0] builder_basesoc_socbushandler_beat_size;
wire   [11:0] builder_basesoc_socbushandler_beat_wrap;
reg           builder_basesoc_socbushandler_cmd_done = 1'd0;
reg           builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 = 1'd0;
reg           builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 = 1'd0;
reg           builder_basesoc_socbushandler_last_ar_aw_n = 1'd0;
reg           builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 = 1'd0;
reg           builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 = 1'd0;
wire          builder_basesoc_socbushandler_pipe_valid_sink_first;
wire          builder_basesoc_socbushandler_pipe_valid_sink_last;
wire          builder_basesoc_socbushandler_pipe_valid_sink_param_dest;
wire          builder_basesoc_socbushandler_pipe_valid_sink_param_id;
wire          builder_basesoc_socbushandler_pipe_valid_sink_param_user;
wire   [31:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_len;
wire          builder_basesoc_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_region;
wire    [2:0] builder_basesoc_socbushandler_pipe_valid_sink_payload_size;
wire          builder_basesoc_socbushandler_pipe_valid_sink_ready;
wire          builder_basesoc_socbushandler_pipe_valid_sink_valid;
reg           builder_basesoc_socbushandler_pipe_valid_source_first = 1'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_last = 1'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_param_user = 1'd0;
reg    [31:0] builder_basesoc_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] builder_basesoc_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] builder_basesoc_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] builder_basesoc_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg           builder_basesoc_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] builder_basesoc_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] builder_basesoc_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] builder_basesoc_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] builder_basesoc_socbushandler_pipe_valid_source_payload_size = 3'd0;
wire          builder_basesoc_socbushandler_pipe_valid_source_ready;
reg           builder_basesoc_socbushandler_pipe_valid_source_valid = 1'd0;
reg           builder_basesoc_socbushandler_r_first = 1'd0;
reg           builder_basesoc_socbushandler_r_last = 1'd0;
reg           builder_basesoc_socbushandler_r_param_dest = 1'd0;
reg           builder_basesoc_socbushandler_r_param_id = 1'd0;
reg           builder_basesoc_socbushandler_r_param_user = 1'd0;
reg    [31:0] builder_basesoc_socbushandler_r_payload_data = 32'd0;
reg     [1:0] builder_basesoc_socbushandler_r_payload_resp = 2'd0;
wire          builder_basesoc_socbushandler_r_ready;
reg           builder_basesoc_socbushandler_r_valid = 1'd0;
wire          builder_basesoc_socbushandler_sink_sink_first;
wire          builder_basesoc_socbushandler_sink_sink_last;
wire          builder_basesoc_socbushandler_sink_sink_param_dest;
wire          builder_basesoc_socbushandler_sink_sink_param_id;
wire          builder_basesoc_socbushandler_sink_sink_param_user;
wire   [31:0] builder_basesoc_socbushandler_sink_sink_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_sink_sink_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_sink_sink_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_sink_sink_payload_len;
wire          builder_basesoc_socbushandler_sink_sink_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_sink_sink_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_sink_sink_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_sink_sink_payload_region;
wire    [2:0] builder_basesoc_socbushandler_sink_sink_payload_size;
wire          builder_basesoc_socbushandler_sink_sink_ready;
wire          builder_basesoc_socbushandler_sink_sink_valid;
wire          builder_basesoc_socbushandler_source_source_first;
wire          builder_basesoc_socbushandler_source_source_last;
wire          builder_basesoc_socbushandler_source_source_param_dest;
wire          builder_basesoc_socbushandler_source_source_param_id;
wire          builder_basesoc_socbushandler_source_source_param_user;
wire   [31:0] builder_basesoc_socbushandler_source_source_payload_addr;
wire    [1:0] builder_basesoc_socbushandler_source_source_payload_burst;
wire    [3:0] builder_basesoc_socbushandler_source_source_payload_cache;
wire    [7:0] builder_basesoc_socbushandler_source_source_payload_len;
wire          builder_basesoc_socbushandler_source_source_payload_lock;
wire    [2:0] builder_basesoc_socbushandler_source_source_payload_prot;
wire    [3:0] builder_basesoc_socbushandler_source_source_payload_qos;
wire    [3:0] builder_basesoc_socbushandler_source_source_payload_region;
wire    [2:0] builder_basesoc_socbushandler_source_source_payload_size;
reg           builder_basesoc_socbushandler_source_source_ready = 1'd0;
wire          builder_basesoc_socbushandler_source_source_valid;
wire          builder_basesoc_socbushandler_w_first;
wire          builder_basesoc_socbushandler_w_last;
wire          builder_basesoc_socbushandler_w_param_dest;
wire          builder_basesoc_socbushandler_w_param_id;
wire          builder_basesoc_socbushandler_w_param_user;
wire   [31:0] builder_basesoc_socbushandler_w_payload_data;
wire    [3:0] builder_basesoc_socbushandler_w_payload_strb;
reg           builder_basesoc_socbushandler_w_ready = 1'd0;
wire          builder_basesoc_socbushandler_w_valid;
reg     [1:0] builder_basesoc_spimaster_next_state = 2'd0;
reg     [1:0] builder_basesoc_spimaster_state = 2'd0;
wire          builder_basesoc_we;
reg           builder_comb_rhs_self0 = 1'd0;
reg           builder_comb_rhs_self1 = 1'd0;
reg     [3:0] builder_comb_rhs_self10 = 4'd0;
reg     [3:0] builder_comb_rhs_self11 = 4'd0;
reg           builder_comb_rhs_self12 = 1'd0;
reg           builder_comb_rhs_self13 = 1'd0;
reg           builder_comb_rhs_self14 = 1'd0;
reg           builder_comb_rhs_self15 = 1'd0;
reg           builder_comb_rhs_self16 = 1'd0;
reg           builder_comb_rhs_self17 = 1'd0;
reg    [31:0] builder_comb_rhs_self18 = 32'd0;
reg     [3:0] builder_comb_rhs_self19 = 4'd0;
reg           builder_comb_rhs_self2 = 1'd0;
reg           builder_comb_rhs_self20 = 1'd0;
reg           builder_comb_rhs_self21 = 1'd0;
reg           builder_comb_rhs_self22 = 1'd0;
reg           builder_comb_rhs_self23 = 1'd0;
reg           builder_comb_rhs_self24 = 1'd0;
reg           builder_comb_rhs_self25 = 1'd0;
reg           builder_comb_rhs_self26 = 1'd0;
reg    [31:0] builder_comb_rhs_self27 = 32'd0;
reg     [1:0] builder_comb_rhs_self28 = 2'd0;
reg     [7:0] builder_comb_rhs_self29 = 8'd0;
reg    [31:0] builder_comb_rhs_self3 = 32'd0;
reg     [2:0] builder_comb_rhs_self30 = 3'd0;
reg           builder_comb_rhs_self31 = 1'd0;
reg     [2:0] builder_comb_rhs_self32 = 3'd0;
reg     [3:0] builder_comb_rhs_self33 = 4'd0;
reg     [3:0] builder_comb_rhs_self34 = 4'd0;
reg     [3:0] builder_comb_rhs_self35 = 4'd0;
reg           builder_comb_rhs_self36 = 1'd0;
reg           builder_comb_rhs_self37 = 1'd0;
reg           builder_comb_rhs_self38 = 1'd0;
reg           builder_comb_rhs_self39 = 1'd0;
reg     [1:0] builder_comb_rhs_self4 = 2'd0;
reg           builder_comb_rhs_self40 = 1'd0;
reg    [12:0] builder_comb_rhs_self41 = 13'd0;
reg     [1:0] builder_comb_rhs_self42 = 2'd0;
reg           builder_comb_rhs_self43 = 1'd0;
reg           builder_comb_rhs_self44 = 1'd0;
reg           builder_comb_rhs_self45 = 1'd0;
reg           builder_comb_rhs_self46 = 1'd0;
reg    [12:0] builder_comb_rhs_self47 = 13'd0;
reg     [1:0] builder_comb_rhs_self48 = 2'd0;
reg           builder_comb_rhs_self49 = 1'd0;
reg     [7:0] builder_comb_rhs_self5 = 8'd0;
reg           builder_comb_rhs_self50 = 1'd0;
reg           builder_comb_rhs_self51 = 1'd0;
reg    [20:0] builder_comb_rhs_self52 = 21'd0;
reg           builder_comb_rhs_self53 = 1'd0;
reg           builder_comb_rhs_self54 = 1'd0;
reg    [20:0] builder_comb_rhs_self55 = 21'd0;
reg           builder_comb_rhs_self56 = 1'd0;
reg           builder_comb_rhs_self57 = 1'd0;
reg    [20:0] builder_comb_rhs_self58 = 21'd0;
reg           builder_comb_rhs_self59 = 1'd0;
reg     [2:0] builder_comb_rhs_self6 = 3'd0;
reg           builder_comb_rhs_self60 = 1'd0;
reg    [20:0] builder_comb_rhs_self61 = 21'd0;
reg           builder_comb_rhs_self62 = 1'd0;
reg           builder_comb_rhs_self63 = 1'd0;
reg           builder_comb_rhs_self7 = 1'd0;
reg     [2:0] builder_comb_rhs_self8 = 3'd0;
reg     [3:0] builder_comb_rhs_self9 = 4'd0;
reg           builder_comb_t_self0 = 1'd0;
reg           builder_comb_t_self1 = 1'd0;
reg           builder_comb_t_self2 = 1'd0;
reg           builder_comb_t_self3 = 1'd0;
reg           builder_comb_t_self4 = 1'd0;
reg           builder_comb_t_self5 = 1'd0;
wire    [5:0] builder_csr_bankarray_adr;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          builder_csr_bankarray_csrbank0_sel;
wire   [31:0] builder_csr_bankarray_csrbank10_dma_base0_r;
reg           builder_csr_bankarray_csrbank10_dma_base0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank10_dma_base0_w;
reg           builder_csr_bankarray_csrbank10_dma_base0_we = 1'd0;
wire          builder_csr_bankarray_csrbank10_dma_done_r;
reg           builder_csr_bankarray_csrbank10_dma_done_re = 1'd0;
wire          builder_csr_bankarray_csrbank10_dma_done_w;
reg           builder_csr_bankarray_csrbank10_dma_done_we = 1'd0;
wire          builder_csr_bankarray_csrbank10_dma_enable0_r;
reg           builder_csr_bankarray_csrbank10_dma_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank10_dma_enable0_w;
reg           builder_csr_bankarray_csrbank10_dma_enable0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank10_dma_length0_r;
reg           builder_csr_bankarray_csrbank10_dma_length0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank10_dma_length0_w;
reg           builder_csr_bankarray_csrbank10_dma_length0_we = 1'd0;
wire          builder_csr_bankarray_csrbank10_dma_loop0_r;
reg           builder_csr_bankarray_csrbank10_dma_loop0_re = 1'd0;
wire          builder_csr_bankarray_csrbank10_dma_loop0_w;
reg           builder_csr_bankarray_csrbank10_dma_loop0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank10_dma_offset_r;
reg           builder_csr_bankarray_csrbank10_dma_offset_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank10_dma_offset_w;
reg           builder_csr_bankarray_csrbank10_dma_offset_we = 1'd0;
wire          builder_csr_bankarray_csrbank10_sel;
wire          builder_csr_bankarray_csrbank11_enable0_r;
reg           builder_csr_bankarray_csrbank11_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank11_enable0_w;
reg           builder_csr_bankarray_csrbank11_enable0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_hres0_r;
reg           builder_csr_bankarray_csrbank11_hres0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_hres0_w;
reg           builder_csr_bankarray_csrbank11_hres0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_hscan0_r;
reg           builder_csr_bankarray_csrbank11_hscan0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_hscan0_w;
reg           builder_csr_bankarray_csrbank11_hscan0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_hsync_end0_r;
reg           builder_csr_bankarray_csrbank11_hsync_end0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_hsync_end0_w;
reg           builder_csr_bankarray_csrbank11_hsync_end0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_hsync_start0_r;
reg           builder_csr_bankarray_csrbank11_hsync_start0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_hsync_start0_w;
reg           builder_csr_bankarray_csrbank11_hsync_start0_we = 1'd0;
wire          builder_csr_bankarray_csrbank11_sel;
wire   [11:0] builder_csr_bankarray_csrbank11_vres0_r;
reg           builder_csr_bankarray_csrbank11_vres0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_vres0_w;
reg           builder_csr_bankarray_csrbank11_vres0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_vscan0_r;
reg           builder_csr_bankarray_csrbank11_vscan0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_vscan0_w;
reg           builder_csr_bankarray_csrbank11_vscan0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_vsync_end0_r;
reg           builder_csr_bankarray_csrbank11_vsync_end0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_vsync_end0_w;
reg           builder_csr_bankarray_csrbank11_vsync_end0_we = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_vsync_start0_r;
reg           builder_csr_bankarray_csrbank11_vsync_start0_re = 1'd0;
wire   [11:0] builder_csr_bankarray_csrbank11_vsync_start0_w;
reg           builder_csr_bankarray_csrbank11_vsync_start0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_in_r;
reg           builder_csr_bankarray_csrbank1_in_re = 1'd0;
wire          builder_csr_bankarray_csrbank1_in_w;
reg           builder_csr_bankarray_csrbank1_in_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank1_out0_r;
reg           builder_csr_bankarray_csrbank1_out0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank1_out0_w;
reg           builder_csr_bankarray_csrbank1_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sel;
wire          builder_csr_bankarray_csrbank2_in_r;
reg           builder_csr_bankarray_csrbank2_in_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_in_w;
reg           builder_csr_bankarray_csrbank2_in_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_out0_r;
reg           builder_csr_bankarray_csrbank2_out0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_out0_w;
reg           builder_csr_bankarray_csrbank2_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sel;
wire          builder_csr_bankarray_csrbank3_out0_r;
reg           builder_csr_bankarray_csrbank3_out0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_out0_w;
reg           builder_csr_bankarray_csrbank3_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_sel;
wire          builder_csr_bankarray_csrbank4_r_r;
reg           builder_csr_bankarray_csrbank4_r_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_r_w;
reg           builder_csr_bankarray_csrbank4_r_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_sel;
wire    [2:0] builder_csr_bankarray_csrbank4_w0_r;
reg           builder_csr_bankarray_csrbank4_w0_re = 1'd0;
wire    [2:0] builder_csr_bankarray_csrbank4_w0_w;
reg           builder_csr_bankarray_csrbank4_w0_we = 1'd0;
wire    [5:0] builder_csr_bankarray_csrbank5_out0_r;
reg           builder_csr_bankarray_csrbank5_out0_re = 1'd0;
wire    [5:0] builder_csr_bankarray_csrbank5_out0_w;
reg           builder_csr_bankarray_csrbank5_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_sel;
wire    [3:0] builder_csr_bankarray_csrbank6_dfii_control0_r;
reg           builder_csr_bankarray_csrbank6_dfii_control0_re = 1'd0;
wire    [3:0] builder_csr_bankarray_csrbank6_dfii_control0_w;
reg           builder_csr_bankarray_csrbank6_dfii_control0_we = 1'd0;
wire   [12:0] builder_csr_bankarray_csrbank6_dfii_pi0_address0_r;
reg           builder_csr_bankarray_csrbank6_dfii_pi0_address0_re = 1'd0;
wire   [12:0] builder_csr_bankarray_csrbank6_dfii_pi0_address0_w;
reg           builder_csr_bankarray_csrbank6_dfii_pi0_address0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_r;
reg           builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_w;
reg           builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank6_dfii_pi0_command0_r;
reg           builder_csr_bankarray_csrbank6_dfii_pi0_command0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank6_dfii_pi0_command0_w;
reg           builder_csr_bankarray_csrbank6_dfii_pi0_command0_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank6_dfii_pi0_rddata_r;
reg           builder_csr_bankarray_csrbank6_dfii_pi0_rddata_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank6_dfii_pi0_rddata_w;
reg           builder_csr_bankarray_csrbank6_dfii_pi0_rddata_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_r;
reg           builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_w;
reg           builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_we = 1'd0;
wire   [12:0] builder_csr_bankarray_csrbank6_dfii_pi1_address0_r;
reg           builder_csr_bankarray_csrbank6_dfii_pi1_address0_re = 1'd0;
wire   [12:0] builder_csr_bankarray_csrbank6_dfii_pi1_address0_w;
reg           builder_csr_bankarray_csrbank6_dfii_pi1_address0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_r;
reg           builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_w;
reg           builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank6_dfii_pi1_command0_r;
reg           builder_csr_bankarray_csrbank6_dfii_pi1_command0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank6_dfii_pi1_command0_w;
reg           builder_csr_bankarray_csrbank6_dfii_pi1_command0_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank6_dfii_pi1_rddata_r;
reg           builder_csr_bankarray_csrbank6_dfii_pi1_rddata_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank6_dfii_pi1_rddata_w;
reg           builder_csr_bankarray_csrbank6_dfii_pi1_rddata_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_r;
reg           builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_w;
reg           builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_sel;
wire   [15:0] builder_csr_bankarray_csrbank7_clk_divider0_r;
reg           builder_csr_bankarray_csrbank7_clk_divider0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank7_clk_divider0_w;
reg           builder_csr_bankarray_csrbank7_clk_divider0_we = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank7_control0_r;
reg           builder_csr_bankarray_csrbank7_control0_re = 1'd0;
wire   [15:0] builder_csr_bankarray_csrbank7_control0_w;
reg           builder_csr_bankarray_csrbank7_control0_we = 1'd0;
wire   [16:0] builder_csr_bankarray_csrbank7_cs0_r;
reg           builder_csr_bankarray_csrbank7_cs0_re = 1'd0;
wire   [16:0] builder_csr_bankarray_csrbank7_cs0_w;
reg           builder_csr_bankarray_csrbank7_cs0_we = 1'd0;
wire          builder_csr_bankarray_csrbank7_loopback0_r;
reg           builder_csr_bankarray_csrbank7_loopback0_re = 1'd0;
wire          builder_csr_bankarray_csrbank7_loopback0_w;
reg           builder_csr_bankarray_csrbank7_loopback0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank7_miso_r;
reg           builder_csr_bankarray_csrbank7_miso_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank7_miso_w;
reg           builder_csr_bankarray_csrbank7_miso_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank7_mosi0_r;
reg           builder_csr_bankarray_csrbank7_mosi0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank7_mosi0_w;
reg           builder_csr_bankarray_csrbank7_mosi0_we = 1'd0;
wire          builder_csr_bankarray_csrbank7_sel;
wire    [1:0] builder_csr_bankarray_csrbank7_status_r;
reg           builder_csr_bankarray_csrbank7_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank7_status_w;
reg           builder_csr_bankarray_csrbank7_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank8_en0_r;
reg           builder_csr_bankarray_csrbank8_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank8_en0_w;
reg           builder_csr_bankarray_csrbank8_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank8_ev_enable0_r;
reg           builder_csr_bankarray_csrbank8_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank8_ev_enable0_w;
reg           builder_csr_bankarray_csrbank8_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank8_ev_pending_r;
reg           builder_csr_bankarray_csrbank8_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank8_ev_pending_w;
reg           builder_csr_bankarray_csrbank8_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank8_ev_status_r;
reg           builder_csr_bankarray_csrbank8_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank8_ev_status_w;
reg           builder_csr_bankarray_csrbank8_ev_status_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank8_load0_r;
reg           builder_csr_bankarray_csrbank8_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank8_load0_w;
reg           builder_csr_bankarray_csrbank8_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank8_reload0_r;
reg           builder_csr_bankarray_csrbank8_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank8_reload0_w;
reg           builder_csr_bankarray_csrbank8_reload0_we = 1'd0;
wire          builder_csr_bankarray_csrbank8_sel;
wire          builder_csr_bankarray_csrbank8_update_value0_r;
reg           builder_csr_bankarray_csrbank8_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank8_update_value0_w;
reg           builder_csr_bankarray_csrbank8_update_value0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank8_value_r;
reg           builder_csr_bankarray_csrbank8_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank8_value_w;
reg           builder_csr_bankarray_csrbank8_value_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank9_ev_enable0_r;
reg           builder_csr_bankarray_csrbank9_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank9_ev_enable0_w;
reg           builder_csr_bankarray_csrbank9_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank9_ev_pending_r;
reg           builder_csr_bankarray_csrbank9_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank9_ev_pending_w;
reg           builder_csr_bankarray_csrbank9_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank9_ev_status_r;
reg           builder_csr_bankarray_csrbank9_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank9_ev_status_w;
reg           builder_csr_bankarray_csrbank9_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank9_rxempty_r;
reg           builder_csr_bankarray_csrbank9_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank9_rxempty_w;
reg           builder_csr_bankarray_csrbank9_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank9_rxfull_r;
reg           builder_csr_bankarray_csrbank9_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank9_rxfull_w;
reg           builder_csr_bankarray_csrbank9_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank9_sel;
wire          builder_csr_bankarray_csrbank9_txempty_r;
reg           builder_csr_bankarray_csrbank9_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank9_txempty_w;
reg           builder_csr_bankarray_csrbank9_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank9_txfull_r;
reg           builder_csr_bankarray_csrbank9_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank9_txfull_w;
reg           builder_csr_bankarray_csrbank9_txfull_we = 1'd0;
wire    [7:0] builder_csr_bankarray_dat_r;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
wire          builder_csr_bankarray_interface0_bank_bus_re;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface10_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface10_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface10_bank_bus_dat_w;
wire          builder_csr_bankarray_interface10_bank_bus_re;
wire          builder_csr_bankarray_interface10_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface11_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface11_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface11_bank_bus_dat_w;
wire          builder_csr_bankarray_interface11_bank_bus_re;
wire          builder_csr_bankarray_interface11_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
wire          builder_csr_bankarray_interface1_bank_bus_re;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
wire          builder_csr_bankarray_interface2_bank_bus_re;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
wire          builder_csr_bankarray_interface3_bank_bus_re;
wire          builder_csr_bankarray_interface3_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
wire          builder_csr_bankarray_interface4_bank_bus_re;
wire          builder_csr_bankarray_interface4_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface5_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface5_bank_bus_dat_w;
wire          builder_csr_bankarray_interface5_bank_bus_re;
wire          builder_csr_bankarray_interface5_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface6_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface6_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface6_bank_bus_dat_w;
wire          builder_csr_bankarray_interface6_bank_bus_re;
wire          builder_csr_bankarray_interface6_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface7_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface7_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface7_bank_bus_dat_w;
wire          builder_csr_bankarray_interface7_bank_bus_re;
wire          builder_csr_bankarray_interface7_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface8_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface8_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface8_bank_bus_dat_w;
wire          builder_csr_bankarray_interface8_bank_bus_re;
wire          builder_csr_bankarray_interface8_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface9_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface9_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface9_bank_bus_dat_w;
wire          builder_csr_bankarray_interface9_bank_bus_re;
wire          builder_csr_bankarray_interface9_bank_bus_we;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
wire          builder_csr_bankarray_sram_bus_re;
wire          builder_csr_bankarray_sram_bus_we;
wire   [13:0] builder_csr_interconnect_adr;
wire   [31:0] builder_csr_interconnect_dat_r;
wire   [31:0] builder_csr_interconnect_dat_w;
wire          builder_csr_interconnect_re;
wire          builder_csr_interconnect_we;
wire          builder_error;
wire          builder_expr;
reg           builder_fsm0_next_state = 1'd0;
reg           builder_fsm0_state = 1'd0;
reg           builder_fsm1_next_state = 1'd0;
reg           builder_fsm1_state = 1'd0;
wire          builder_gowinddroutputimpl0;
wire          builder_gowinddroutputimpl1;
wire          builder_gw5asdrtristateimpl0__i;
wire          builder_gw5asdrtristateimpl0__o;
wire          builder_gw5asdrtristateimpl0_oe_n;
wire          builder_gw5asdrtristateimpl10__i;
wire          builder_gw5asdrtristateimpl10__o;
wire          builder_gw5asdrtristateimpl10_oe_n;
wire          builder_gw5asdrtristateimpl11__i;
wire          builder_gw5asdrtristateimpl11__o;
wire          builder_gw5asdrtristateimpl11_oe_n;
wire          builder_gw5asdrtristateimpl12__i;
wire          builder_gw5asdrtristateimpl12__o;
wire          builder_gw5asdrtristateimpl12_oe_n;
wire          builder_gw5asdrtristateimpl13__i;
wire          builder_gw5asdrtristateimpl13__o;
wire          builder_gw5asdrtristateimpl13_oe_n;
wire          builder_gw5asdrtristateimpl14__i;
wire          builder_gw5asdrtristateimpl14__o;
wire          builder_gw5asdrtristateimpl14_oe_n;
wire          builder_gw5asdrtristateimpl15__i;
wire          builder_gw5asdrtristateimpl15__o;
wire          builder_gw5asdrtristateimpl15_oe_n;
wire          builder_gw5asdrtristateimpl1__i;
wire          builder_gw5asdrtristateimpl1__o;
wire          builder_gw5asdrtristateimpl1_oe_n;
wire          builder_gw5asdrtristateimpl2__i;
wire          builder_gw5asdrtristateimpl2__o;
wire          builder_gw5asdrtristateimpl2_oe_n;
wire          builder_gw5asdrtristateimpl3__i;
wire          builder_gw5asdrtristateimpl3__o;
wire          builder_gw5asdrtristateimpl3_oe_n;
wire          builder_gw5asdrtristateimpl4__i;
wire          builder_gw5asdrtristateimpl4__o;
wire          builder_gw5asdrtristateimpl4_oe_n;
wire          builder_gw5asdrtristateimpl5__i;
wire          builder_gw5asdrtristateimpl5__o;
wire          builder_gw5asdrtristateimpl5_oe_n;
wire          builder_gw5asdrtristateimpl6__i;
wire          builder_gw5asdrtristateimpl6__o;
wire          builder_gw5asdrtristateimpl6_oe_n;
wire          builder_gw5asdrtristateimpl7__i;
wire          builder_gw5asdrtristateimpl7__o;
wire          builder_gw5asdrtristateimpl7_oe_n;
wire          builder_gw5asdrtristateimpl8__i;
wire          builder_gw5asdrtristateimpl8__o;
wire          builder_gw5asdrtristateimpl8_oe_n;
wire          builder_gw5asdrtristateimpl9__i;
wire          builder_gw5asdrtristateimpl9__o;
wire          builder_gw5asdrtristateimpl9_oe_n;
reg           builder_multiregimpl0_regs0 = 1'd0;
reg           builder_multiregimpl0_regs1 = 1'd0;
reg     [2:0] builder_multiregimpl10_regs0 = 3'd0;
reg     [2:0] builder_multiregimpl10_regs1 = 3'd0;
reg     [2:0] builder_multiregimpl11_regs0 = 3'd0;
reg     [2:0] builder_multiregimpl11_regs1 = 3'd0;
reg           builder_multiregimpl12_regs0 = 1'd0;
reg           builder_multiregimpl12_regs1 = 1'd0;
reg           builder_multiregimpl13_regs0 = 1'd0;
reg           builder_multiregimpl13_regs1 = 1'd0;
reg           builder_multiregimpl14_regs0 = 1'd0;
reg           builder_multiregimpl14_regs1 = 1'd0;
reg           builder_multiregimpl1_regs0 = 1'd0;
reg           builder_multiregimpl1_regs1 = 1'd0;
reg    [11:0] builder_multiregimpl2_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl2_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl3_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl3_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl4_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl4_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl5_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl5_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl6_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl6_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl7_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl7_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl8_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl8_regs1 = 12'd0;
reg    [11:0] builder_multiregimpl9_regs0 = 12'd0;
reg    [11:0] builder_multiregimpl9_regs1 = 12'd0;
wire          builder_r_first;
reg           builder_r_last = 1'd0;
wire          builder_r_param_dest;
wire          builder_r_param_id;
wire          builder_r_param_user;
reg    [31:0] builder_r_payload_data = 32'd0;
reg     [1:0] builder_r_payload_resp = 2'd0;
wire          builder_r_ready;
reg           builder_r_valid = 1'd0;
reg           builder_rd_error = 1'd0;
reg     [7:0] builder_rd_lock_counter = 8'd0;
wire          builder_rd_lock_empty;
wire          builder_rd_lock_full;
wire          builder_rd_lock_stall;
reg    [19:0] builder_rd_timer_count = 20'd1000000;
wire          builder_rd_timer_done;
reg           builder_rd_timer_wait = 1'd0;
wire          builder_rr_read_ce;
reg           builder_rr_read_grant = 1'd0;
wire    [1:0] builder_rr_read_request;
wire          builder_rr_write_ce;
reg           builder_rr_write_grant = 1'd0;
wire    [1:0] builder_rr_write_request;
wire          builder_rst10;
wire          builder_rst11;
wire          builder_rst12;
wire          builder_rst13;
wire          builder_rst14;
reg     [3:0] builder_slave_sel0 = 4'd0;
reg     [3:0] builder_slave_sel1 = 4'd0;
reg     [3:0] builder_slave_sel_dec0 = 4'd0;
reg     [3:0] builder_slave_sel_dec1 = 4'd0;
reg     [3:0] builder_slave_sel_reg0 = 4'd0;
reg     [3:0] builder_slave_sel_reg1 = 4'd0;
wire   [29:0] builder_slice_proxy0;
wire   [29:0] builder_slice_proxy1;
wire   [29:0] builder_slice_proxy2;
wire   [29:0] builder_slice_proxy3;
wire   [29:0] builder_slice_proxy4;
wire   [29:0] builder_slice_proxy5;
wire   [29:0] builder_slice_proxy6;
wire   [29:0] builder_slice_proxy7;
reg           builder_sync_f_self = 1'd0;
reg     [1:0] builder_sync_rhs_self0 = 2'd0;
reg    [12:0] builder_sync_rhs_self1 = 13'd0;
reg           builder_sync_rhs_self10 = 1'd0;
reg           builder_sync_rhs_self11 = 1'd0;
reg           builder_sync_rhs_self12 = 1'd0;
reg           builder_sync_rhs_self13 = 1'd0;
reg           builder_sync_rhs_self2 = 1'd0;
reg           builder_sync_rhs_self3 = 1'd0;
reg           builder_sync_rhs_self4 = 1'd0;
reg           builder_sync_rhs_self5 = 1'd0;
reg           builder_sync_rhs_self6 = 1'd0;
reg     [1:0] builder_sync_rhs_self7 = 2'd0;
reg    [12:0] builder_sync_rhs_self8 = 13'd0;
reg           builder_sync_rhs_self9 = 1'd0;
wire          builder_w_first;
wire          builder_w_last;
wire          builder_w_param_dest;
wire          builder_w_param_id;
wire          builder_w_param_user;
wire   [31:0] builder_w_payload_data;
wire    [3:0] builder_w_payload_strb;
reg           builder_w_ready = 1'd0;
wire          builder_w_valid;
reg     [1:0] builder_wishbone2axi0_next_state = 2'd0;
reg     [1:0] builder_wishbone2axi0_state = 2'd0;
reg     [1:0] builder_wishbone2axi1_next_state = 2'd0;
reg     [1:0] builder_wishbone2axi1_state = 2'd0;
reg           builder_wr_error = 1'd0;
reg     [7:0] builder_wr_lock_counter = 8'd0;
wire          builder_wr_lock_empty;
wire          builder_wr_lock_full;
wire          builder_wr_lock_stall;
reg    [19:0] builder_wr_timer_count = 20'd1000000;
wire          builder_wr_timer_done;
reg           builder_wr_timer_wait = 1'd0;
wire   [15:0] clk_divider0;
reg    [15:0] clk_divider1 = 16'd0;
reg           clk_enable = 1'd0;
wire          clk_fall;
wire          clk_rise;
reg           control_re = 1'd0;
reg    [15:0] control_storage = 16'd0;
reg     [2:0] count = 3'd0;
reg     [2:0] count_spimaster_next_value = 3'd0;
reg           count_spimaster_next_value_ce = 1'd0;
wire          cpu_clk;
wire          cpu_rst;
wire          cs;
wire          cs_mode;
reg           cs_re = 1'd0;
reg    [16:0] cs_storage = 17'd1;
reg           done0 = 1'd0;
wire          done1;
wire          dvi_clk;
wire          dvi_rst;
reg           irq = 1'd0;
wire    [7:0] length0;
wire    [7:0] length1;
wire          loopback;
reg           loopback_re = 1'd0;
reg           loopback_storage = 1'd0;
reg           main__r_re = 1'd0;
reg           main__r_status = 1'd0;
wire          main__r_we;
reg           main__w_re = 1'd0;
reg     [2:0] main__w_storage = 3'd5;
wire          main_adapted_interface_adapted_interface_ack;
reg    [31:0] main_adapted_interface_adapted_interface_adr = 32'd0;
reg     [1:0] main_adapted_interface_adapted_interface_bte = 2'd0;
reg     [2:0] main_adapted_interface_adapted_interface_cti = 3'd0;
reg           main_adapted_interface_adapted_interface_cyc = 1'd0;
wire   [31:0] main_adapted_interface_adapted_interface_dat_r;
reg    [31:0] main_adapted_interface_adapted_interface_dat_w = 32'd0;
wire          main_adapted_interface_adapted_interface_err;
reg     [3:0] main_adapted_interface_adapted_interface_sel = 4'd0;
reg           main_adapted_interface_adapted_interface_stb = 1'd0;
reg           main_adapted_interface_adapted_interface_we = 1'd0;
wire          main_adapted_interface_ar_first;
wire          main_adapted_interface_ar_last;
wire          main_adapted_interface_ar_param_dest;
wire          main_adapted_interface_ar_param_id;
wire          main_adapted_interface_ar_param_user;
wire   [31:0] main_adapted_interface_ar_payload_addr;
wire    [1:0] main_adapted_interface_ar_payload_burst;
wire    [3:0] main_adapted_interface_ar_payload_cache;
wire    [7:0] main_adapted_interface_ar_payload_len;
wire          main_adapted_interface_ar_payload_lock;
wire    [2:0] main_adapted_interface_ar_payload_prot;
wire    [3:0] main_adapted_interface_ar_payload_qos;
wire    [3:0] main_adapted_interface_ar_payload_region;
wire    [2:0] main_adapted_interface_ar_payload_size;
reg           main_adapted_interface_ar_ready = 1'd0;
wire          main_adapted_interface_ar_valid;
wire          main_adapted_interface_aw_first;
wire          main_adapted_interface_aw_last;
wire          main_adapted_interface_aw_param_dest;
wire          main_adapted_interface_aw_param_id;
wire          main_adapted_interface_aw_param_user;
wire   [31:0] main_adapted_interface_aw_payload_addr;
wire    [1:0] main_adapted_interface_aw_payload_burst;
wire    [3:0] main_adapted_interface_aw_payload_cache;
wire    [7:0] main_adapted_interface_aw_payload_len;
wire          main_adapted_interface_aw_payload_lock;
wire    [2:0] main_adapted_interface_aw_payload_prot;
wire    [3:0] main_adapted_interface_aw_payload_qos;
wire    [3:0] main_adapted_interface_aw_payload_region;
wire    [2:0] main_adapted_interface_aw_payload_size;
reg           main_adapted_interface_aw_ready = 1'd0;
wire          main_adapted_interface_aw_valid;
reg           main_adapted_interface_b_first = 1'd0;
reg           main_adapted_interface_b_last = 1'd0;
reg           main_adapted_interface_b_param_dest = 1'd0;
reg           main_adapted_interface_b_param_id = 1'd0;
reg           main_adapted_interface_b_param_user = 1'd0;
reg     [1:0] main_adapted_interface_b_payload_resp = 2'd0;
wire          main_adapted_interface_b_ready;
reg           main_adapted_interface_b_valid = 1'd0;
reg           main_adapted_interface_r_first = 1'd0;
reg           main_adapted_interface_r_last = 1'd0;
reg           main_adapted_interface_r_param_dest = 1'd0;
reg           main_adapted_interface_r_param_id = 1'd0;
reg           main_adapted_interface_r_param_user = 1'd0;
reg    [31:0] main_adapted_interface_r_payload_data = 32'd0;
reg     [1:0] main_adapted_interface_r_payload_resp = 2'd0;
wire          main_adapted_interface_r_ready;
reg           main_adapted_interface_r_valid = 1'd0;
wire          main_adapted_interface_w_first;
wire          main_adapted_interface_w_last;
wire          main_adapted_interface_w_param_dest;
wire          main_adapted_interface_w_param_id;
wire          main_adapted_interface_w_param_user;
wire   [31:0] main_adapted_interface_w_payload_data;
wire    [3:0] main_adapted_interface_w_payload_strb;
reg           main_adapted_interface_w_ready = 1'd0;
wire          main_adapted_interface_w_valid;
reg     [1:0] main_adr_offset_r = 2'd0;
reg    [14:0] main_basesoc_basesoc_adr = 15'd0;
wire   [31:0] main_basesoc_basesoc_dat_r;
reg           main_basesoc_basesoc_do_read = 1'd0;
reg           main_basesoc_basesoc_do_write = 1'd0;
reg           main_basesoc_basesoc_last_was_read = 1'd0;
reg           main_basesoc_basesoc_last_was_read_axilitesram0_next_value2 = 1'd0;
reg           main_basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2 = 1'd0;
reg    [14:0] main_basesoc_basesoc_port_adr_reg = 15'd0;
reg    [14:0] main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value0 = 15'd0;
reg           main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value_ce0 = 1'd0;
reg    [31:0] main_basesoc_basesoc_port_dat_r_latched = 32'd0;
reg    [31:0] main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value1 = 32'd0;
reg           main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce1 = 1'd0;
reg    [31:0] main_basesoc_basesoc_ram_bus_ar_payload_addr = 32'd0;
reg           main_basesoc_basesoc_ram_bus_ar_ready = 1'd0;
reg           main_basesoc_basesoc_ram_bus_ar_valid = 1'd0;
reg    [31:0] main_basesoc_basesoc_ram_bus_aw_payload_addr = 32'd0;
reg           main_basesoc_basesoc_ram_bus_aw_ready = 1'd0;
reg           main_basesoc_basesoc_ram_bus_aw_valid = 1'd0;
reg     [1:0] main_basesoc_basesoc_ram_bus_b_payload_resp = 2'd0;
wire          main_basesoc_basesoc_ram_bus_b_ready;
reg           main_basesoc_basesoc_ram_bus_b_valid = 1'd0;
reg    [31:0] main_basesoc_basesoc_ram_bus_r_payload_data = 32'd0;
reg     [1:0] main_basesoc_basesoc_ram_bus_r_payload_resp = 2'd0;
reg           main_basesoc_basesoc_ram_bus_r_ready = 1'd0;
reg           main_basesoc_basesoc_ram_bus_r_valid = 1'd0;
reg    [31:0] main_basesoc_basesoc_ram_bus_w_payload_data = 32'd0;
reg     [3:0] main_basesoc_basesoc_ram_bus_w_payload_strb = 4'd0;
reg           main_basesoc_basesoc_ram_bus_w_ready = 1'd0;
reg           main_basesoc_basesoc_ram_bus_w_valid = 1'd0;
wire          main_basesoc_basesoc_socbushandler_ar_first;
wire          main_basesoc_basesoc_socbushandler_ar_last;
wire          main_basesoc_basesoc_socbushandler_ar_param_dest;
wire          main_basesoc_basesoc_socbushandler_ar_param_id;
wire          main_basesoc_basesoc_socbushandler_ar_param_user;
wire   [31:0] main_basesoc_basesoc_socbushandler_ar_payload_addr;
wire    [1:0] main_basesoc_basesoc_socbushandler_ar_payload_burst;
wire    [3:0] main_basesoc_basesoc_socbushandler_ar_payload_cache;
wire    [7:0] main_basesoc_basesoc_socbushandler_ar_payload_len;
wire          main_basesoc_basesoc_socbushandler_ar_payload_lock;
wire    [2:0] main_basesoc_basesoc_socbushandler_ar_payload_prot;
wire    [3:0] main_basesoc_basesoc_socbushandler_ar_payload_qos;
wire    [3:0] main_basesoc_basesoc_socbushandler_ar_payload_region;
wire    [2:0] main_basesoc_basesoc_socbushandler_ar_payload_size;
reg           main_basesoc_basesoc_socbushandler_ar_ready = 1'd0;
wire          main_basesoc_basesoc_socbushandler_ar_valid;
wire          main_basesoc_basesoc_socbushandler_aw_first;
wire          main_basesoc_basesoc_socbushandler_aw_last;
wire          main_basesoc_basesoc_socbushandler_aw_param_dest;
wire          main_basesoc_basesoc_socbushandler_aw_param_id;
wire          main_basesoc_basesoc_socbushandler_aw_param_user;
wire   [31:0] main_basesoc_basesoc_socbushandler_aw_payload_addr;
wire    [1:0] main_basesoc_basesoc_socbushandler_aw_payload_burst;
wire    [3:0] main_basesoc_basesoc_socbushandler_aw_payload_cache;
wire    [7:0] main_basesoc_basesoc_socbushandler_aw_payload_len;
wire          main_basesoc_basesoc_socbushandler_aw_payload_lock;
wire    [2:0] main_basesoc_basesoc_socbushandler_aw_payload_prot;
wire    [3:0] main_basesoc_basesoc_socbushandler_aw_payload_qos;
wire    [3:0] main_basesoc_basesoc_socbushandler_aw_payload_region;
wire    [2:0] main_basesoc_basesoc_socbushandler_aw_payload_size;
reg           main_basesoc_basesoc_socbushandler_aw_ready = 1'd0;
wire          main_basesoc_basesoc_socbushandler_aw_valid;
wire          main_basesoc_basesoc_socbushandler_ax_beat_first;
wire          main_basesoc_basesoc_socbushandler_ax_beat_last;
wire          main_basesoc_basesoc_socbushandler_ax_beat_param_id;
wire   [31:0] main_basesoc_basesoc_socbushandler_ax_beat_payload_addr;
reg           main_basesoc_basesoc_socbushandler_ax_beat_ready = 1'd0;
wire          main_basesoc_basesoc_socbushandler_ax_beat_valid;
reg           main_basesoc_basesoc_socbushandler_ax_burst_first = 1'd0;
reg           main_basesoc_basesoc_socbushandler_ax_burst_last = 1'd0;
reg           main_basesoc_basesoc_socbushandler_ax_burst_param_dest = 1'd0;
reg           main_basesoc_basesoc_socbushandler_ax_burst_param_id = 1'd0;
reg           main_basesoc_basesoc_socbushandler_ax_burst_param_user = 1'd0;
reg    [31:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [3:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [7:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_len = 8'd0;
reg           main_basesoc_basesoc_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_region = 4'd0;
reg     [2:0] main_basesoc_basesoc_socbushandler_ax_burst_payload_size = 3'd0;
wire          main_basesoc_basesoc_socbushandler_ax_burst_ready;
reg           main_basesoc_basesoc_socbushandler_ax_burst_valid = 1'd0;
reg           main_basesoc_basesoc_socbushandler_b_first = 1'd0;
reg           main_basesoc_basesoc_socbushandler_b_last = 1'd0;
reg           main_basesoc_basesoc_socbushandler_b_param_dest = 1'd0;
reg           main_basesoc_basesoc_socbushandler_b_param_id = 1'd0;
reg           main_basesoc_basesoc_socbushandler_b_param_user = 1'd0;
reg     [1:0] main_basesoc_basesoc_socbushandler_b_payload_resp = 2'd0;
wire          main_basesoc_basesoc_socbushandler_b_ready;
reg           main_basesoc_basesoc_socbushandler_b_valid = 1'd0;
reg     [7:0] main_basesoc_basesoc_socbushandler_beat_count = 8'd0;
reg  signed  [12:0] main_basesoc_basesoc_socbushandler_beat_offset = 13'd0;
wire   [11:0] main_basesoc_basesoc_socbushandler_beat_size;
wire   [11:0] main_basesoc_basesoc_socbushandler_beat_wrap;
reg           main_basesoc_basesoc_socbushandler_cmd_done = 1'd0;
reg           main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 = 1'd0;
reg           main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 = 1'd0;
reg           main_basesoc_basesoc_socbushandler_last_ar_aw_n = 1'd0;
reg           main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 = 1'd0;
reg           main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 = 1'd0;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_first;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_last;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_dest;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_id;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_user;
wire   [31:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_burst;
wire    [3:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_cache;
wire    [7:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_len;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_region;
wire    [2:0] main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_size;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_ready;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_sink_valid;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_first = 1'd0;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_last = 1'd0;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_param_user = 1'd0;
reg    [31:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_size = 3'd0;
wire          main_basesoc_basesoc_socbushandler_pipe_valid_source_ready;
reg           main_basesoc_basesoc_socbushandler_pipe_valid_source_valid = 1'd0;
reg           main_basesoc_basesoc_socbushandler_r_first = 1'd0;
reg           main_basesoc_basesoc_socbushandler_r_last = 1'd0;
reg           main_basesoc_basesoc_socbushandler_r_param_dest = 1'd0;
reg           main_basesoc_basesoc_socbushandler_r_param_id = 1'd0;
reg           main_basesoc_basesoc_socbushandler_r_param_user = 1'd0;
reg    [31:0] main_basesoc_basesoc_socbushandler_r_payload_data = 32'd0;
reg     [1:0] main_basesoc_basesoc_socbushandler_r_payload_resp = 2'd0;
wire          main_basesoc_basesoc_socbushandler_r_ready;
reg           main_basesoc_basesoc_socbushandler_r_valid = 1'd0;
wire          main_basesoc_basesoc_socbushandler_sink_sink_first;
wire          main_basesoc_basesoc_socbushandler_sink_sink_last;
wire          main_basesoc_basesoc_socbushandler_sink_sink_param_dest;
wire          main_basesoc_basesoc_socbushandler_sink_sink_param_id;
wire          main_basesoc_basesoc_socbushandler_sink_sink_param_user;
wire   [31:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_addr;
wire    [1:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_burst;
wire    [3:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_cache;
wire    [7:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_len;
wire          main_basesoc_basesoc_socbushandler_sink_sink_payload_lock;
wire    [2:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_prot;
wire    [3:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_qos;
wire    [3:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_region;
wire    [2:0] main_basesoc_basesoc_socbushandler_sink_sink_payload_size;
wire          main_basesoc_basesoc_socbushandler_sink_sink_ready;
wire          main_basesoc_basesoc_socbushandler_sink_sink_valid;
wire          main_basesoc_basesoc_socbushandler_source_source_first;
wire          main_basesoc_basesoc_socbushandler_source_source_last;
wire          main_basesoc_basesoc_socbushandler_source_source_param_dest;
wire          main_basesoc_basesoc_socbushandler_source_source_param_id;
wire          main_basesoc_basesoc_socbushandler_source_source_param_user;
wire   [31:0] main_basesoc_basesoc_socbushandler_source_source_payload_addr;
wire    [1:0] main_basesoc_basesoc_socbushandler_source_source_payload_burst;
wire    [3:0] main_basesoc_basesoc_socbushandler_source_source_payload_cache;
wire    [7:0] main_basesoc_basesoc_socbushandler_source_source_payload_len;
wire          main_basesoc_basesoc_socbushandler_source_source_payload_lock;
wire    [2:0] main_basesoc_basesoc_socbushandler_source_source_payload_prot;
wire    [3:0] main_basesoc_basesoc_socbushandler_source_source_payload_qos;
wire    [3:0] main_basesoc_basesoc_socbushandler_source_source_payload_region;
wire    [2:0] main_basesoc_basesoc_socbushandler_source_source_payload_size;
reg           main_basesoc_basesoc_socbushandler_source_source_ready = 1'd0;
wire          main_basesoc_basesoc_socbushandler_source_source_valid;
wire          main_basesoc_basesoc_socbushandler_w_first;
wire          main_basesoc_basesoc_socbushandler_w_last;
wire          main_basesoc_basesoc_socbushandler_w_param_dest;
wire          main_basesoc_basesoc_socbushandler_w_param_id;
wire          main_basesoc_basesoc_socbushandler_w_param_user;
wire   [31:0] main_basesoc_basesoc_socbushandler_w_payload_data;
wire    [3:0] main_basesoc_basesoc_socbushandler_w_payload_strb;
reg           main_basesoc_basesoc_socbushandler_w_ready = 1'd0;
wire          main_basesoc_basesoc_socbushandler_w_valid;
wire          main_basesoc_bus_error;
reg    [31:0] main_basesoc_bus_errors = 32'd0;
reg           main_basesoc_bus_errors_re = 1'd0;
wire   [31:0] main_basesoc_bus_errors_status;
wire          main_basesoc_bus_errors_we;
wire          main_basesoc_cpu_rst;
wire          main_basesoc_dbus_ack;
wire   [29:0] main_basesoc_dbus_adr;
wire    [1:0] main_basesoc_dbus_bte;
wire    [2:0] main_basesoc_dbus_cti;
wire          main_basesoc_dbus_cyc;
wire   [31:0] main_basesoc_dbus_dat_r;
wire   [31:0] main_basesoc_dbus_dat_w;
wire          main_basesoc_dbus_err;
wire    [3:0] main_basesoc_dbus_sel;
wire          main_basesoc_dbus_stb;
wire          main_basesoc_dbus_we;
wire          main_basesoc_ibus_ack;
wire   [29:0] main_basesoc_ibus_adr;
wire    [1:0] main_basesoc_ibus_bte;
wire    [2:0] main_basesoc_ibus_cti;
wire          main_basesoc_ibus_cyc;
wire   [31:0] main_basesoc_ibus_dat_r;
wire   [31:0] main_basesoc_ibus_dat_w;
wire          main_basesoc_ibus_err;
wire    [3:0] main_basesoc_ibus_sel;
wire          main_basesoc_ibus_stb;
wire          main_basesoc_ibus_we;
reg    [31:0] main_basesoc_interrupt = 32'd0;
reg    [10:0] main_basesoc_ram_adr = 11'd0;
reg    [31:0] main_basesoc_ram_bus_ar_payload_addr = 32'd0;
reg           main_basesoc_ram_bus_ar_ready = 1'd0;
reg           main_basesoc_ram_bus_ar_valid = 1'd0;
reg    [31:0] main_basesoc_ram_bus_aw_payload_addr = 32'd0;
reg           main_basesoc_ram_bus_aw_ready = 1'd0;
reg           main_basesoc_ram_bus_aw_valid = 1'd0;
reg     [1:0] main_basesoc_ram_bus_b_payload_resp = 2'd0;
wire          main_basesoc_ram_bus_b_ready;
reg           main_basesoc_ram_bus_b_valid = 1'd0;
reg    [31:0] main_basesoc_ram_bus_r_payload_data = 32'd0;
reg     [1:0] main_basesoc_ram_bus_r_payload_resp = 2'd0;
reg           main_basesoc_ram_bus_r_ready = 1'd0;
reg           main_basesoc_ram_bus_r_valid = 1'd0;
reg    [31:0] main_basesoc_ram_bus_w_payload_data = 32'd0;
reg     [3:0] main_basesoc_ram_bus_w_payload_strb = 4'd0;
reg           main_basesoc_ram_bus_w_ready = 1'd0;
reg           main_basesoc_ram_bus_w_valid = 1'd0;
wire   [31:0] main_basesoc_ram_dat_r;
reg    [31:0] main_basesoc_ram_dat_w = 32'd0;
reg           main_basesoc_ram_do_read = 1'd0;
reg           main_basesoc_ram_do_write = 1'd0;
reg           main_basesoc_ram_last_was_read = 1'd0;
reg           main_basesoc_ram_last_was_read_axilitesram1_next_value2 = 1'd0;
reg           main_basesoc_ram_last_was_read_axilitesram1_next_value_ce2 = 1'd0;
reg    [10:0] main_basesoc_ram_port_adr_reg = 11'd0;
reg    [10:0] main_basesoc_ram_port_adr_reg_axilitesram1_next_value0 = 11'd0;
reg           main_basesoc_ram_port_adr_reg_axilitesram1_next_value_ce0 = 1'd0;
reg    [31:0] main_basesoc_ram_port_dat_r_latched = 32'd0;
reg    [31:0] main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value1 = 32'd0;
reg           main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce1 = 1'd0;
reg     [3:0] main_basesoc_ram_we = 4'd0;
wire          main_basesoc_reset;
reg           main_basesoc_reset_re = 1'd0;
reg     [1:0] main_basesoc_reset_storage = 2'd0;
reg     [3:0] main_basesoc_rx_count = 4'd0;
reg     [3:0] main_basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_rx_data = 8'd0;
reg     [7:0] main_basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_basesoc_rx_enable = 1'd0;
reg    [31:0] main_basesoc_rx_phase = 32'd0;
wire          main_basesoc_rx_rx;
reg           main_basesoc_rx_rx_d = 1'd0;
reg           main_basesoc_rx_source_first = 1'd0;
reg           main_basesoc_rx_source_last = 1'd0;
reg     [7:0] main_basesoc_rx_source_payload_data = 8'd0;
wire          main_basesoc_rx_source_ready;
reg           main_basesoc_rx_source_valid = 1'd0;
reg           main_basesoc_rx_tick = 1'd0;
reg           main_basesoc_scratch_re = 1'd0;
reg    [31:0] main_basesoc_scratch_storage = 32'd305419896;
reg           main_basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           main_basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           main_basesoc_soc_rst = 1'd0;
wire          main_basesoc_socbushandler_ar_first;
wire          main_basesoc_socbushandler_ar_last;
wire          main_basesoc_socbushandler_ar_param_dest;
wire          main_basesoc_socbushandler_ar_param_id;
wire          main_basesoc_socbushandler_ar_param_user;
wire   [31:0] main_basesoc_socbushandler_ar_payload_addr;
wire    [1:0] main_basesoc_socbushandler_ar_payload_burst;
wire    [3:0] main_basesoc_socbushandler_ar_payload_cache;
wire    [7:0] main_basesoc_socbushandler_ar_payload_len;
wire          main_basesoc_socbushandler_ar_payload_lock;
wire    [2:0] main_basesoc_socbushandler_ar_payload_prot;
wire    [3:0] main_basesoc_socbushandler_ar_payload_qos;
wire    [3:0] main_basesoc_socbushandler_ar_payload_region;
wire    [2:0] main_basesoc_socbushandler_ar_payload_size;
reg           main_basesoc_socbushandler_ar_ready = 1'd0;
wire          main_basesoc_socbushandler_ar_valid;
wire          main_basesoc_socbushandler_aw_first;
wire          main_basesoc_socbushandler_aw_last;
wire          main_basesoc_socbushandler_aw_param_dest;
wire          main_basesoc_socbushandler_aw_param_id;
wire          main_basesoc_socbushandler_aw_param_user;
wire   [31:0] main_basesoc_socbushandler_aw_payload_addr;
wire    [1:0] main_basesoc_socbushandler_aw_payload_burst;
wire    [3:0] main_basesoc_socbushandler_aw_payload_cache;
wire    [7:0] main_basesoc_socbushandler_aw_payload_len;
wire          main_basesoc_socbushandler_aw_payload_lock;
wire    [2:0] main_basesoc_socbushandler_aw_payload_prot;
wire    [3:0] main_basesoc_socbushandler_aw_payload_qos;
wire    [3:0] main_basesoc_socbushandler_aw_payload_region;
wire    [2:0] main_basesoc_socbushandler_aw_payload_size;
reg           main_basesoc_socbushandler_aw_ready = 1'd0;
wire          main_basesoc_socbushandler_aw_valid;
wire          main_basesoc_socbushandler_ax_beat_first;
wire          main_basesoc_socbushandler_ax_beat_last;
wire          main_basesoc_socbushandler_ax_beat_param_id;
wire   [31:0] main_basesoc_socbushandler_ax_beat_payload_addr;
reg           main_basesoc_socbushandler_ax_beat_ready = 1'd0;
wire          main_basesoc_socbushandler_ax_beat_valid;
reg           main_basesoc_socbushandler_ax_burst_first = 1'd0;
reg           main_basesoc_socbushandler_ax_burst_last = 1'd0;
reg           main_basesoc_socbushandler_ax_burst_param_dest = 1'd0;
reg           main_basesoc_socbushandler_ax_burst_param_id = 1'd0;
reg           main_basesoc_socbushandler_ax_burst_param_user = 1'd0;
reg    [31:0] main_basesoc_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] main_basesoc_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [3:0] main_basesoc_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [7:0] main_basesoc_socbushandler_ax_burst_payload_len = 8'd0;
reg           main_basesoc_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] main_basesoc_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] main_basesoc_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] main_basesoc_socbushandler_ax_burst_payload_region = 4'd0;
reg     [2:0] main_basesoc_socbushandler_ax_burst_payload_size = 3'd0;
wire          main_basesoc_socbushandler_ax_burst_ready;
reg           main_basesoc_socbushandler_ax_burst_valid = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_ar_first = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_ar_last = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_ar_param_dest = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_ar_param_id;
reg           main_basesoc_socbushandler_axiinterface0_ar_param_user = 1'd0;
wire   [31:0] main_basesoc_socbushandler_axiinterface0_ar_payload_addr;
wire    [1:0] main_basesoc_socbushandler_axiinterface0_ar_payload_burst;
wire    [3:0] main_basesoc_socbushandler_axiinterface0_ar_payload_cache;
wire    [7:0] main_basesoc_socbushandler_axiinterface0_ar_payload_len;
wire          main_basesoc_socbushandler_axiinterface0_ar_payload_lock;
wire    [2:0] main_basesoc_socbushandler_axiinterface0_ar_payload_prot;
wire    [3:0] main_basesoc_socbushandler_axiinterface0_ar_payload_qos;
reg     [3:0] main_basesoc_socbushandler_axiinterface0_ar_payload_region = 4'd0;
wire    [2:0] main_basesoc_socbushandler_axiinterface0_ar_payload_size;
reg           main_basesoc_socbushandler_axiinterface0_ar_ready = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_ar_valid;
reg           main_basesoc_socbushandler_axiinterface0_aw_first = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_aw_last = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_aw_param_dest = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_aw_param_id;
reg           main_basesoc_socbushandler_axiinterface0_aw_param_user = 1'd0;
wire   [31:0] main_basesoc_socbushandler_axiinterface0_aw_payload_addr;
wire    [1:0] main_basesoc_socbushandler_axiinterface0_aw_payload_burst;
wire    [3:0] main_basesoc_socbushandler_axiinterface0_aw_payload_cache;
wire    [7:0] main_basesoc_socbushandler_axiinterface0_aw_payload_len;
wire          main_basesoc_socbushandler_axiinterface0_aw_payload_lock;
wire    [2:0] main_basesoc_socbushandler_axiinterface0_aw_payload_prot;
wire    [3:0] main_basesoc_socbushandler_axiinterface0_aw_payload_qos;
reg     [3:0] main_basesoc_socbushandler_axiinterface0_aw_payload_region = 4'd0;
wire    [2:0] main_basesoc_socbushandler_axiinterface0_aw_payload_size;
reg           main_basesoc_socbushandler_axiinterface0_aw_ready = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_aw_valid;
wire          main_basesoc_socbushandler_axiinterface0_b_first;
wire          main_basesoc_socbushandler_axiinterface0_b_last;
wire          main_basesoc_socbushandler_axiinterface0_b_param_dest;
wire          main_basesoc_socbushandler_axiinterface0_b_param_id;
wire          main_basesoc_socbushandler_axiinterface0_b_param_user;
wire    [1:0] main_basesoc_socbushandler_axiinterface0_b_payload_resp;
wire          main_basesoc_socbushandler_axiinterface0_b_ready;
reg           main_basesoc_socbushandler_axiinterface0_b_valid = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_r_first;
wire          main_basesoc_socbushandler_axiinterface0_r_last;
wire          main_basesoc_socbushandler_axiinterface0_r_param_dest;
wire          main_basesoc_socbushandler_axiinterface0_r_param_id;
wire          main_basesoc_socbushandler_axiinterface0_r_param_user;
wire   [31:0] main_basesoc_socbushandler_axiinterface0_r_payload_data;
wire    [1:0] main_basesoc_socbushandler_axiinterface0_r_payload_resp;
wire          main_basesoc_socbushandler_axiinterface0_r_ready;
reg           main_basesoc_socbushandler_axiinterface0_r_valid = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_w_first = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_w_last;
reg           main_basesoc_socbushandler_axiinterface0_w_param_dest = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_w_param_id = 1'd0;
reg           main_basesoc_socbushandler_axiinterface0_w_param_user = 1'd0;
wire   [31:0] main_basesoc_socbushandler_axiinterface0_w_payload_data;
wire    [3:0] main_basesoc_socbushandler_axiinterface0_w_payload_strb;
reg           main_basesoc_socbushandler_axiinterface0_w_ready = 1'd0;
wire          main_basesoc_socbushandler_axiinterface0_w_valid;
reg           main_basesoc_socbushandler_axiinterface1_ar_first = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_ar_last = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_ar_param_dest = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_ar_param_id;
reg           main_basesoc_socbushandler_axiinterface1_ar_param_user = 1'd0;
wire   [31:0] main_basesoc_socbushandler_axiinterface1_ar_payload_addr;
wire    [1:0] main_basesoc_socbushandler_axiinterface1_ar_payload_burst;
wire    [3:0] main_basesoc_socbushandler_axiinterface1_ar_payload_cache;
wire    [7:0] main_basesoc_socbushandler_axiinterface1_ar_payload_len;
wire          main_basesoc_socbushandler_axiinterface1_ar_payload_lock;
wire    [2:0] main_basesoc_socbushandler_axiinterface1_ar_payload_prot;
wire    [3:0] main_basesoc_socbushandler_axiinterface1_ar_payload_qos;
reg     [3:0] main_basesoc_socbushandler_axiinterface1_ar_payload_region = 4'd0;
wire    [2:0] main_basesoc_socbushandler_axiinterface1_ar_payload_size;
reg           main_basesoc_socbushandler_axiinterface1_ar_ready = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_ar_valid;
reg           main_basesoc_socbushandler_axiinterface1_aw_first = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_aw_last = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_aw_param_dest = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_aw_param_id;
reg           main_basesoc_socbushandler_axiinterface1_aw_param_user = 1'd0;
wire   [31:0] main_basesoc_socbushandler_axiinterface1_aw_payload_addr;
wire    [1:0] main_basesoc_socbushandler_axiinterface1_aw_payload_burst;
wire    [3:0] main_basesoc_socbushandler_axiinterface1_aw_payload_cache;
wire    [7:0] main_basesoc_socbushandler_axiinterface1_aw_payload_len;
wire          main_basesoc_socbushandler_axiinterface1_aw_payload_lock;
wire    [2:0] main_basesoc_socbushandler_axiinterface1_aw_payload_prot;
wire    [3:0] main_basesoc_socbushandler_axiinterface1_aw_payload_qos;
reg     [3:0] main_basesoc_socbushandler_axiinterface1_aw_payload_region = 4'd0;
wire    [2:0] main_basesoc_socbushandler_axiinterface1_aw_payload_size;
reg           main_basesoc_socbushandler_axiinterface1_aw_ready = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_aw_valid;
wire          main_basesoc_socbushandler_axiinterface1_b_first;
wire          main_basesoc_socbushandler_axiinterface1_b_last;
wire          main_basesoc_socbushandler_axiinterface1_b_param_dest;
wire          main_basesoc_socbushandler_axiinterface1_b_param_id;
wire          main_basesoc_socbushandler_axiinterface1_b_param_user;
wire    [1:0] main_basesoc_socbushandler_axiinterface1_b_payload_resp;
wire          main_basesoc_socbushandler_axiinterface1_b_ready;
reg           main_basesoc_socbushandler_axiinterface1_b_valid = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_r_first;
wire          main_basesoc_socbushandler_axiinterface1_r_last;
wire          main_basesoc_socbushandler_axiinterface1_r_param_dest;
wire          main_basesoc_socbushandler_axiinterface1_r_param_id;
wire          main_basesoc_socbushandler_axiinterface1_r_param_user;
wire   [31:0] main_basesoc_socbushandler_axiinterface1_r_payload_data;
wire    [1:0] main_basesoc_socbushandler_axiinterface1_r_payload_resp;
wire          main_basesoc_socbushandler_axiinterface1_r_ready;
reg           main_basesoc_socbushandler_axiinterface1_r_valid = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_w_first = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_w_last;
reg           main_basesoc_socbushandler_axiinterface1_w_param_dest = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_w_param_id = 1'd0;
reg           main_basesoc_socbushandler_axiinterface1_w_param_user = 1'd0;
wire   [31:0] main_basesoc_socbushandler_axiinterface1_w_payload_data;
wire    [3:0] main_basesoc_socbushandler_axiinterface1_w_payload_strb;
reg           main_basesoc_socbushandler_axiinterface1_w_ready = 1'd0;
wire          main_basesoc_socbushandler_axiinterface1_w_valid;
reg           main_basesoc_socbushandler_b_first = 1'd0;
reg           main_basesoc_socbushandler_b_last = 1'd0;
reg           main_basesoc_socbushandler_b_param_dest = 1'd0;
reg           main_basesoc_socbushandler_b_param_id = 1'd0;
reg           main_basesoc_socbushandler_b_param_user = 1'd0;
reg     [1:0] main_basesoc_socbushandler_b_payload_resp = 2'd0;
wire          main_basesoc_socbushandler_b_ready;
reg           main_basesoc_socbushandler_b_valid = 1'd0;
reg     [7:0] main_basesoc_socbushandler_beat_count = 8'd0;
reg  signed  [12:0] main_basesoc_socbushandler_beat_offset = 13'd0;
wire   [11:0] main_basesoc_socbushandler_beat_size;
wire   [11:0] main_basesoc_socbushandler_beat_wrap;
reg           main_basesoc_socbushandler_cmd_done = 1'd0;
reg           main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value0 = 1'd0;
reg           main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value_ce0 = 1'd0;
reg           main_basesoc_socbushandler_interface0_adapted_interface_ack = 1'd0;
reg    [31:0] main_basesoc_socbushandler_interface0_adapted_interface_adr = 32'd0;
wire    [1:0] main_basesoc_socbushandler_interface0_adapted_interface_bte;
wire    [2:0] main_basesoc_socbushandler_interface0_adapted_interface_cti;
wire          main_basesoc_socbushandler_interface0_adapted_interface_cyc;
reg    [31:0] main_basesoc_socbushandler_interface0_adapted_interface_dat_r = 32'd0;
wire   [31:0] main_basesoc_socbushandler_interface0_adapted_interface_dat_w;
reg           main_basesoc_socbushandler_interface0_adapted_interface_err = 1'd0;
wire    [3:0] main_basesoc_socbushandler_interface0_adapted_interface_sel;
wire          main_basesoc_socbushandler_interface0_adapted_interface_stb;
wire          main_basesoc_socbushandler_interface0_adapted_interface_we;
reg           main_basesoc_socbushandler_interface1_adapted_interface_ack = 1'd0;
reg    [31:0] main_basesoc_socbushandler_interface1_adapted_interface_adr = 32'd0;
wire    [1:0] main_basesoc_socbushandler_interface1_adapted_interface_bte;
wire    [2:0] main_basesoc_socbushandler_interface1_adapted_interface_cti;
wire          main_basesoc_socbushandler_interface1_adapted_interface_cyc;
reg    [31:0] main_basesoc_socbushandler_interface1_adapted_interface_dat_r = 32'd0;
wire   [31:0] main_basesoc_socbushandler_interface1_adapted_interface_dat_w;
reg           main_basesoc_socbushandler_interface1_adapted_interface_err = 1'd0;
wire    [3:0] main_basesoc_socbushandler_interface1_adapted_interface_sel;
wire          main_basesoc_socbushandler_interface1_adapted_interface_stb;
wire          main_basesoc_socbushandler_interface1_adapted_interface_we;
reg           main_basesoc_socbushandler_last_ar_aw_n = 1'd0;
reg           main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 = 1'd0;
reg           main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 = 1'd0;
wire          main_basesoc_socbushandler_pipe_valid_sink_first;
wire          main_basesoc_socbushandler_pipe_valid_sink_last;
wire          main_basesoc_socbushandler_pipe_valid_sink_param_dest;
wire          main_basesoc_socbushandler_pipe_valid_sink_param_id;
wire          main_basesoc_socbushandler_pipe_valid_sink_param_user;
wire   [31:0] main_basesoc_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] main_basesoc_socbushandler_pipe_valid_sink_payload_burst;
wire    [3:0] main_basesoc_socbushandler_pipe_valid_sink_payload_cache;
wire    [7:0] main_basesoc_socbushandler_pipe_valid_sink_payload_len;
wire          main_basesoc_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] main_basesoc_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] main_basesoc_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] main_basesoc_socbushandler_pipe_valid_sink_payload_region;
wire    [2:0] main_basesoc_socbushandler_pipe_valid_sink_payload_size;
wire          main_basesoc_socbushandler_pipe_valid_sink_ready;
wire          main_basesoc_socbushandler_pipe_valid_sink_valid;
reg           main_basesoc_socbushandler_pipe_valid_source_first = 1'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_last = 1'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_param_user = 1'd0;
reg    [31:0] main_basesoc_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] main_basesoc_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_basesoc_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_basesoc_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg           main_basesoc_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_basesoc_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_basesoc_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_basesoc_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_basesoc_socbushandler_pipe_valid_source_payload_size = 3'd0;
wire          main_basesoc_socbushandler_pipe_valid_source_ready;
reg           main_basesoc_socbushandler_pipe_valid_source_valid = 1'd0;
reg           main_basesoc_socbushandler_r_first = 1'd0;
reg           main_basesoc_socbushandler_r_last = 1'd0;
reg           main_basesoc_socbushandler_r_param_dest = 1'd0;
reg           main_basesoc_socbushandler_r_param_id = 1'd0;
reg           main_basesoc_socbushandler_r_param_user = 1'd0;
reg    [31:0] main_basesoc_socbushandler_r_payload_data = 32'd0;
reg     [1:0] main_basesoc_socbushandler_r_payload_resp = 2'd0;
wire          main_basesoc_socbushandler_r_ready;
reg           main_basesoc_socbushandler_r_valid = 1'd0;
wire          main_basesoc_socbushandler_sink_sink_first;
wire          main_basesoc_socbushandler_sink_sink_last;
wire          main_basesoc_socbushandler_sink_sink_param_dest;
wire          main_basesoc_socbushandler_sink_sink_param_id;
wire          main_basesoc_socbushandler_sink_sink_param_user;
wire   [31:0] main_basesoc_socbushandler_sink_sink_payload_addr;
wire    [1:0] main_basesoc_socbushandler_sink_sink_payload_burst;
wire    [3:0] main_basesoc_socbushandler_sink_sink_payload_cache;
wire    [7:0] main_basesoc_socbushandler_sink_sink_payload_len;
wire          main_basesoc_socbushandler_sink_sink_payload_lock;
wire    [2:0] main_basesoc_socbushandler_sink_sink_payload_prot;
wire    [3:0] main_basesoc_socbushandler_sink_sink_payload_qos;
wire    [3:0] main_basesoc_socbushandler_sink_sink_payload_region;
wire    [2:0] main_basesoc_socbushandler_sink_sink_payload_size;
wire          main_basesoc_socbushandler_sink_sink_ready;
wire          main_basesoc_socbushandler_sink_sink_valid;
wire          main_basesoc_socbushandler_source_source_first;
wire          main_basesoc_socbushandler_source_source_last;
wire          main_basesoc_socbushandler_source_source_param_dest;
wire          main_basesoc_socbushandler_source_source_param_id;
wire          main_basesoc_socbushandler_source_source_param_user;
wire   [31:0] main_basesoc_socbushandler_source_source_payload_addr;
wire    [1:0] main_basesoc_socbushandler_source_source_payload_burst;
wire    [3:0] main_basesoc_socbushandler_source_source_payload_cache;
wire    [7:0] main_basesoc_socbushandler_source_source_payload_len;
wire          main_basesoc_socbushandler_source_source_payload_lock;
wire    [2:0] main_basesoc_socbushandler_source_source_payload_prot;
wire    [3:0] main_basesoc_socbushandler_source_source_payload_qos;
wire    [3:0] main_basesoc_socbushandler_source_source_payload_region;
wire    [2:0] main_basesoc_socbushandler_source_source_payload_size;
reg           main_basesoc_socbushandler_source_source_ready = 1'd0;
wire          main_basesoc_socbushandler_source_source_valid;
wire          main_basesoc_socbushandler_w_first;
wire          main_basesoc_socbushandler_w_last;
wire          main_basesoc_socbushandler_w_param_dest;
wire          main_basesoc_socbushandler_w_param_id;
wire          main_basesoc_socbushandler_w_param_user;
wire   [31:0] main_basesoc_socbushandler_w_payload_data;
wire    [3:0] main_basesoc_socbushandler_w_payload_strb;
reg           main_basesoc_socbushandler_w_ready = 1'd0;
wire          main_basesoc_socbushandler_w_valid;
wire   [31:0] main_basesoc_socbushandler_wishbone2axi0_addr;
reg    [31:0] main_basesoc_socbushandler_wishbone2axi0_ar_payload_addr = 32'd0;
wire          main_basesoc_socbushandler_wishbone2axi0_ar_ready;
reg           main_basesoc_socbushandler_wishbone2axi0_ar_valid = 1'd0;
reg    [31:0] main_basesoc_socbushandler_wishbone2axi0_aw_payload_addr = 32'd0;
wire          main_basesoc_socbushandler_wishbone2axi0_aw_ready;
reg           main_basesoc_socbushandler_wishbone2axi0_aw_valid = 1'd0;
wire    [1:0] main_basesoc_socbushandler_wishbone2axi0_b_payload_resp;
reg           main_basesoc_socbushandler_wishbone2axi0_b_ready = 1'd0;
wire          main_basesoc_socbushandler_wishbone2axi0_b_valid;
reg           main_basesoc_socbushandler_wishbone2axi0_cmd_done = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi0_data_done = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value1 = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1 = 1'd0;
wire   [31:0] main_basesoc_socbushandler_wishbone2axi0_r_payload_data;
wire    [1:0] main_basesoc_socbushandler_wishbone2axi0_r_payload_resp;
reg           main_basesoc_socbushandler_wishbone2axi0_r_ready = 1'd0;
wire          main_basesoc_socbushandler_wishbone2axi0_r_valid;
reg    [31:0] main_basesoc_socbushandler_wishbone2axi0_w_payload_data = 32'd0;
reg     [3:0] main_basesoc_socbushandler_wishbone2axi0_w_payload_strb = 4'd0;
wire          main_basesoc_socbushandler_wishbone2axi0_w_ready;
reg           main_basesoc_socbushandler_wishbone2axi0_w_valid = 1'd0;
wire   [31:0] main_basesoc_socbushandler_wishbone2axi1_addr;
reg    [31:0] main_basesoc_socbushandler_wishbone2axi1_ar_payload_addr = 32'd0;
wire          main_basesoc_socbushandler_wishbone2axi1_ar_ready;
reg           main_basesoc_socbushandler_wishbone2axi1_ar_valid = 1'd0;
reg    [31:0] main_basesoc_socbushandler_wishbone2axi1_aw_payload_addr = 32'd0;
wire          main_basesoc_socbushandler_wishbone2axi1_aw_ready;
reg           main_basesoc_socbushandler_wishbone2axi1_aw_valid = 1'd0;
wire    [1:0] main_basesoc_socbushandler_wishbone2axi1_b_payload_resp;
reg           main_basesoc_socbushandler_wishbone2axi1_b_ready = 1'd0;
wire          main_basesoc_socbushandler_wishbone2axi1_b_valid;
reg           main_basesoc_socbushandler_wishbone2axi1_cmd_done = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi1_data_done = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value1 = 1'd0;
reg           main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1 = 1'd0;
wire   [31:0] main_basesoc_socbushandler_wishbone2axi1_r_payload_data;
wire    [1:0] main_basesoc_socbushandler_wishbone2axi1_r_payload_resp;
reg           main_basesoc_socbushandler_wishbone2axi1_r_ready = 1'd0;
wire          main_basesoc_socbushandler_wishbone2axi1_r_valid;
reg    [31:0] main_basesoc_socbushandler_wishbone2axi1_w_payload_data = 32'd0;
reg     [3:0] main_basesoc_socbushandler_wishbone2axi1_w_payload_strb = 4'd0;
wire          main_basesoc_socbushandler_wishbone2axi1_w_ready;
reg           main_basesoc_socbushandler_wishbone2axi1_w_valid = 1'd0;
reg           main_basesoc_timer_en_re = 1'd0;
reg           main_basesoc_timer_en_storage = 1'd0;
reg           main_basesoc_timer_enable_re = 1'd0;
reg           main_basesoc_timer_enable_storage = 1'd0;
wire          main_basesoc_timer_irq;
reg           main_basesoc_timer_load_re = 1'd0;
reg    [31:0] main_basesoc_timer_load_storage = 32'd0;
reg           main_basesoc_timer_pending_r = 1'd0;
reg           main_basesoc_timer_pending_re = 1'd0;
reg           main_basesoc_timer_pending_status = 1'd0;
wire          main_basesoc_timer_pending_we;
reg           main_basesoc_timer_reload_re = 1'd0;
reg    [31:0] main_basesoc_timer_reload_storage = 32'd0;
reg           main_basesoc_timer_status_re = 1'd0;
reg           main_basesoc_timer_status_status = 1'd0;
wire          main_basesoc_timer_status_we;
reg           main_basesoc_timer_update_value_re = 1'd0;
reg           main_basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] main_basesoc_timer_value = 32'd0;
reg           main_basesoc_timer_value_re = 1'd0;
reg    [31:0] main_basesoc_timer_value_status = 32'd0;
wire          main_basesoc_timer_value_we;
wire          main_basesoc_timer_zero0;
wire          main_basesoc_timer_zero1;
wire          main_basesoc_timer_zero2;
reg           main_basesoc_timer_zero_clear = 1'd0;
reg           main_basesoc_timer_zero_pending = 1'd0;
wire          main_basesoc_timer_zero_status;
wire          main_basesoc_timer_zero_trigger;
reg           main_basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] main_basesoc_tx_count = 4'd0;
reg     [3:0] main_basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_tx_data = 8'd0;
reg     [7:0] main_basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_basesoc_tx_enable = 1'd0;
reg    [31:0] main_basesoc_tx_phase = 32'd0;
wire          main_basesoc_tx_sink_first;
wire          main_basesoc_tx_sink_last;
wire    [7:0] main_basesoc_tx_sink_payload_data;
reg           main_basesoc_tx_sink_ready = 1'd0;
wire          main_basesoc_tx_sink_valid;
reg           main_basesoc_tx_tick = 1'd0;
reg           main_basesoc_uart_enable_re = 1'd0;
reg     [1:0] main_basesoc_uart_enable_storage = 2'd0;
wire          main_basesoc_uart_irq;
reg     [1:0] main_basesoc_uart_pending_r = 2'd0;
reg           main_basesoc_uart_pending_re = 1'd0;
reg     [1:0] main_basesoc_uart_pending_status = 2'd0;
wire          main_basesoc_uart_pending_we;
wire          main_basesoc_uart_rx0;
wire          main_basesoc_uart_rx1;
wire          main_basesoc_uart_rx2;
reg           main_basesoc_uart_rx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_rx_fifo_consume = 4'd0;
wire          main_basesoc_uart_rx_fifo_do_read;
wire          main_basesoc_uart_rx_fifo_fifo_in_first;
wire          main_basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_rx_fifo_fifo_out_first;
wire          main_basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_rx_fifo_level1;
reg     [3:0] main_basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_rx_fifo_rdport_dat_r;
wire          main_basesoc_uart_rx_fifo_rdport_re;
wire          main_basesoc_uart_rx_fifo_re;
reg           main_basesoc_uart_rx_fifo_readable = 1'd0;
reg           main_basesoc_uart_rx_fifo_replace = 1'd0;
wire          main_basesoc_uart_rx_fifo_sink_first;
wire          main_basesoc_uart_rx_fifo_sink_last;
wire    [7:0] main_basesoc_uart_rx_fifo_sink_payload_data;
wire          main_basesoc_uart_rx_fifo_sink_ready;
wire          main_basesoc_uart_rx_fifo_sink_valid;
wire          main_basesoc_uart_rx_fifo_source_first;
wire          main_basesoc_uart_rx_fifo_source_last;
wire    [7:0] main_basesoc_uart_rx_fifo_source_payload_data;
wire          main_basesoc_uart_rx_fifo_source_ready;
wire          main_basesoc_uart_rx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_dout;
wire          main_basesoc_uart_rx_fifo_syncfifo_re;
wire          main_basesoc_uart_rx_fifo_syncfifo_readable;
wire          main_basesoc_uart_rx_fifo_syncfifo_we;
wire          main_basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_w;
wire          main_basesoc_uart_rx_fifo_wrport_we;
reg           main_basesoc_uart_rx_pending = 1'd0;
wire          main_basesoc_uart_rx_status;
wire          main_basesoc_uart_rx_trigger;
reg           main_basesoc_uart_rx_trigger_d = 1'd0;
reg           main_basesoc_uart_rxempty_re = 1'd0;
wire          main_basesoc_uart_rxempty_status;
wire          main_basesoc_uart_rxempty_we;
reg           main_basesoc_uart_rxfull_re = 1'd0;
wire          main_basesoc_uart_rxfull_status;
wire          main_basesoc_uart_rxfull_we;
wire    [7:0] main_basesoc_uart_rxtx_r;
reg           main_basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] main_basesoc_uart_rxtx_w;
reg           main_basesoc_uart_rxtx_we = 1'd0;
reg           main_basesoc_uart_status_re = 1'd0;
reg     [1:0] main_basesoc_uart_status_status = 2'd0;
wire          main_basesoc_uart_status_we;
wire          main_basesoc_uart_tx0;
wire          main_basesoc_uart_tx1;
wire          main_basesoc_uart_tx2;
reg           main_basesoc_uart_tx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_tx_fifo_consume = 4'd0;
wire          main_basesoc_uart_tx_fifo_do_read;
wire          main_basesoc_uart_tx_fifo_fifo_in_first;
wire          main_basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_tx_fifo_fifo_out_first;
wire          main_basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_tx_fifo_level1;
reg     [3:0] main_basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_tx_fifo_rdport_dat_r;
wire          main_basesoc_uart_tx_fifo_rdport_re;
wire          main_basesoc_uart_tx_fifo_re;
reg           main_basesoc_uart_tx_fifo_readable = 1'd0;
reg           main_basesoc_uart_tx_fifo_replace = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_basesoc_uart_tx_fifo_sink_payload_data;
wire          main_basesoc_uart_tx_fifo_sink_ready;
wire          main_basesoc_uart_tx_fifo_sink_valid;
wire          main_basesoc_uart_tx_fifo_source_first;
wire          main_basesoc_uart_tx_fifo_source_last;
wire    [7:0] main_basesoc_uart_tx_fifo_source_payload_data;
wire          main_basesoc_uart_tx_fifo_source_ready;
wire          main_basesoc_uart_tx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_dout;
wire          main_basesoc_uart_tx_fifo_syncfifo_re;
wire          main_basesoc_uart_tx_fifo_syncfifo_readable;
wire          main_basesoc_uart_tx_fifo_syncfifo_we;
wire          main_basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_w;
wire          main_basesoc_uart_tx_fifo_wrport_we;
reg           main_basesoc_uart_tx_pending = 1'd0;
wire          main_basesoc_uart_tx_status;
wire          main_basesoc_uart_tx_trigger;
reg           main_basesoc_uart_tx_trigger_d = 1'd0;
reg           main_basesoc_uart_txempty_re = 1'd0;
wire          main_basesoc_uart_txempty_status;
wire          main_basesoc_uart_txempty_we;
reg           main_basesoc_uart_txfull_re = 1'd0;
wire          main_basesoc_uart_txfull_status;
wire          main_basesoc_uart_txfull_we;
wire          main_basesoc_uart_uart_sink_first;
wire          main_basesoc_uart_uart_sink_last;
wire    [7:0] main_basesoc_uart_uart_sink_payload_data;
wire          main_basesoc_uart_uart_sink_ready;
wire          main_basesoc_uart_uart_sink_valid;
wire          main_basesoc_uart_uart_source_first;
wire          main_basesoc_uart_uart_source_last;
wire    [7:0] main_basesoc_uart_uart_source_payload_data;
wire          main_basesoc_uart_uart_source_ready;
wire          main_basesoc_uart_uart_source_valid;
reg    [31:0] main_basesoc_vexriscv = 32'd0;
reg    [31:0] main_bridge_ar_payload_addr = 32'd0;
reg           main_bridge_ar_ready = 1'd0;
reg           main_bridge_ar_valid = 1'd0;
reg    [31:0] main_bridge_aw_payload_addr = 32'd0;
reg           main_bridge_aw_ready = 1'd0;
reg           main_bridge_aw_valid = 1'd0;
wire          main_bridge_axi2axi_lite_ax_beat_first;
wire          main_bridge_axi2axi_lite_ax_beat_last;
wire          main_bridge_axi2axi_lite_ax_beat_param_id;
wire   [31:0] main_bridge_axi2axi_lite_ax_beat_payload_addr;
reg           main_bridge_axi2axi_lite_ax_beat_ready = 1'd0;
wire          main_bridge_axi2axi_lite_ax_beat_valid;
reg           main_bridge_axi2axi_lite_ax_burst_first = 1'd0;
reg           main_bridge_axi2axi_lite_ax_burst_last = 1'd0;
reg           main_bridge_axi2axi_lite_ax_burst_param_dest = 1'd0;
reg           main_bridge_axi2axi_lite_ax_burst_param_id = 1'd0;
reg           main_bridge_axi2axi_lite_ax_burst_param_user = 1'd0;
reg    [31:0] main_bridge_axi2axi_lite_ax_burst_payload_addr = 32'd0;
reg     [1:0] main_bridge_axi2axi_lite_ax_burst_payload_burst = 2'd0;
reg     [3:0] main_bridge_axi2axi_lite_ax_burst_payload_cache = 4'd0;
reg     [7:0] main_bridge_axi2axi_lite_ax_burst_payload_len = 8'd0;
reg           main_bridge_axi2axi_lite_ax_burst_payload_lock = 1'd0;
reg     [2:0] main_bridge_axi2axi_lite_ax_burst_payload_prot = 3'd0;
reg     [3:0] main_bridge_axi2axi_lite_ax_burst_payload_qos = 4'd0;
reg     [3:0] main_bridge_axi2axi_lite_ax_burst_payload_region = 4'd0;
reg     [2:0] main_bridge_axi2axi_lite_ax_burst_payload_size = 3'd0;
wire          main_bridge_axi2axi_lite_ax_burst_ready;
reg           main_bridge_axi2axi_lite_ax_burst_valid = 1'd0;
reg     [7:0] main_bridge_axi2axi_lite_beat_count = 8'd0;
reg  signed  [12:0] main_bridge_axi2axi_lite_beat_offset = 13'd0;
wire   [11:0] main_bridge_axi2axi_lite_beat_size;
wire   [11:0] main_bridge_axi2axi_lite_beat_wrap;
reg           main_bridge_axi2axi_lite_cmd_done = 1'd0;
reg           main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value0 = 1'd0;
reg           main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value_ce0 = 1'd0;
reg           main_bridge_axi2axi_lite_last_ar_aw_n = 1'd0;
reg           main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1 = 1'd0;
reg           main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1 = 1'd0;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_first;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_last;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_param_dest;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_param_id;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_param_user;
wire   [31:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_addr;
wire    [1:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_burst;
wire    [3:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_cache;
wire    [7:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_len;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_payload_lock;
wire    [2:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_prot;
wire    [3:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_qos;
wire    [3:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_region;
wire    [2:0] main_bridge_axi2axi_lite_pipe_valid_sink_payload_size;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_ready;
wire          main_bridge_axi2axi_lite_pipe_valid_sink_valid;
reg           main_bridge_axi2axi_lite_pipe_valid_source_first = 1'd0;
reg           main_bridge_axi2axi_lite_pipe_valid_source_last = 1'd0;
reg           main_bridge_axi2axi_lite_pipe_valid_source_param_dest = 1'd0;
reg           main_bridge_axi2axi_lite_pipe_valid_source_param_id = 1'd0;
reg           main_bridge_axi2axi_lite_pipe_valid_source_param_user = 1'd0;
reg    [31:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_len = 8'd0;
reg           main_bridge_axi2axi_lite_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] main_bridge_axi2axi_lite_pipe_valid_source_payload_size = 3'd0;
wire          main_bridge_axi2axi_lite_pipe_valid_source_ready;
reg           main_bridge_axi2axi_lite_pipe_valid_source_valid = 1'd0;
wire          main_bridge_axi2axi_lite_sink_sink_first;
wire          main_bridge_axi2axi_lite_sink_sink_last;
wire          main_bridge_axi2axi_lite_sink_sink_param_dest;
wire          main_bridge_axi2axi_lite_sink_sink_param_id;
wire          main_bridge_axi2axi_lite_sink_sink_param_user;
wire   [31:0] main_bridge_axi2axi_lite_sink_sink_payload_addr;
wire    [1:0] main_bridge_axi2axi_lite_sink_sink_payload_burst;
wire    [3:0] main_bridge_axi2axi_lite_sink_sink_payload_cache;
wire    [7:0] main_bridge_axi2axi_lite_sink_sink_payload_len;
wire          main_bridge_axi2axi_lite_sink_sink_payload_lock;
wire    [2:0] main_bridge_axi2axi_lite_sink_sink_payload_prot;
wire    [3:0] main_bridge_axi2axi_lite_sink_sink_payload_qos;
wire    [3:0] main_bridge_axi2axi_lite_sink_sink_payload_region;
wire    [2:0] main_bridge_axi2axi_lite_sink_sink_payload_size;
wire          main_bridge_axi2axi_lite_sink_sink_ready;
wire          main_bridge_axi2axi_lite_sink_sink_valid;
wire          main_bridge_axi2axi_lite_source_source_first;
wire          main_bridge_axi2axi_lite_source_source_last;
wire          main_bridge_axi2axi_lite_source_source_param_dest;
wire          main_bridge_axi2axi_lite_source_source_param_id;
wire          main_bridge_axi2axi_lite_source_source_param_user;
wire   [31:0] main_bridge_axi2axi_lite_source_source_payload_addr;
wire    [1:0] main_bridge_axi2axi_lite_source_source_payload_burst;
wire    [3:0] main_bridge_axi2axi_lite_source_source_payload_cache;
wire    [7:0] main_bridge_axi2axi_lite_source_source_payload_len;
wire          main_bridge_axi2axi_lite_source_source_payload_lock;
wire    [2:0] main_bridge_axi2axi_lite_source_source_payload_prot;
wire    [3:0] main_bridge_axi2axi_lite_source_source_payload_qos;
wire    [3:0] main_bridge_axi2axi_lite_source_source_payload_region;
wire    [2:0] main_bridge_axi2axi_lite_source_source_payload_size;
reg           main_bridge_axi2axi_lite_source_source_ready = 1'd0;
wire          main_bridge_axi2axi_lite_source_source_valid;
reg    [31:0] main_bridge_axi_lite2wishbone_data = 32'd0;
reg    [31:0] main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value1 = 32'd0;
reg           main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value_ce1 = 1'd0;
reg           main_bridge_axi_lite2wishbone_last_ar_aw_n = 1'd0;
reg           main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0 = 1'd0;
reg           main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0 = 1'd0;
wire   [31:0] main_bridge_axi_lite2wishbone_r_addr;
wire   [31:0] main_bridge_axi_lite2wishbone_w_addr;
reg     [1:0] main_bridge_b_payload_resp = 2'd0;
wire          main_bridge_b_ready;
reg           main_bridge_b_valid = 1'd0;
reg    [31:0] main_bridge_r_payload_data = 32'd0;
reg     [1:0] main_bridge_r_payload_resp = 2'd0;
reg           main_bridge_r_ready = 1'd0;
reg           main_bridge_r_valid = 1'd0;
reg    [31:0] main_bridge_w_payload_data = 32'd0;
reg     [3:0] main_bridge_w_payload_strb = 4'd0;
reg           main_bridge_w_ready = 1'd0;
reg           main_bridge_w_valid = 1'd0;
wire          main_clkin;
wire          main_clkout0;
wire          main_clkout1;
wire          main_clkout2;
wire          main_clkout3;
wire          main_clkout4;
wire    [8:0] main_data_port_adr;
wire  [127:0] main_data_port_dat_r;
reg   [127:0] main_data_port_dat_w = 128'd0;
reg    [15:0] main_data_port_we = 16'd0;
wire          main_dfi_dfi_p0_act_n;
wire   [12:0] main_dfi_dfi_p0_address;
wire    [1:0] main_dfi_dfi_p0_bank;
wire          main_dfi_dfi_p0_cas_n;
wire          main_dfi_dfi_p0_cke;
wire          main_dfi_dfi_p0_cs_n;
wire          main_dfi_dfi_p0_odt;
wire          main_dfi_dfi_p0_ras_n;
wire   [15:0] main_dfi_dfi_p0_rddata;
wire          main_dfi_dfi_p0_rddata_en;
wire          main_dfi_dfi_p0_rddata_valid;
wire          main_dfi_dfi_p0_reset_n;
wire          main_dfi_dfi_p0_we_n;
wire   [15:0] main_dfi_dfi_p0_wrdata;
wire          main_dfi_dfi_p0_wrdata_en;
wire    [1:0] main_dfi_dfi_p0_wrdata_mask;
wire          main_dfi_dfi_p1_act_n;
wire   [12:0] main_dfi_dfi_p1_address;
wire    [1:0] main_dfi_dfi_p1_bank;
wire          main_dfi_dfi_p1_cas_n;
wire          main_dfi_dfi_p1_cke;
wire          main_dfi_dfi_p1_cs_n;
wire          main_dfi_dfi_p1_odt;
wire          main_dfi_dfi_p1_ras_n;
wire   [15:0] main_dfi_dfi_p1_rddata;
wire          main_dfi_dfi_p1_rddata_en;
wire          main_dfi_dfi_p1_rddata_valid;
wire          main_dfi_dfi_p1_reset_n;
wire          main_dfi_dfi_p1_we_n;
wire   [15:0] main_dfi_dfi_p1_wrdata;
wire          main_dfi_dfi_p1_wrdata_en;
wire    [1:0] main_dfi_dfi_p1_wrdata_mask;
reg           main_full_rate_phy_dfi_p0_act_n = 1'd1;
reg    [12:0] main_full_rate_phy_dfi_p0_address = 13'd0;
reg     [1:0] main_full_rate_phy_dfi_p0_bank = 2'd0;
reg           main_full_rate_phy_dfi_p0_cas_n = 1'd1;
reg           main_full_rate_phy_dfi_p0_cke = 1'd0;
reg           main_full_rate_phy_dfi_p0_cs_n = 1'd1;
reg           main_full_rate_phy_dfi_p0_odt = 1'd0;
reg           main_full_rate_phy_dfi_p0_ras_n = 1'd1;
wire   [15:0] main_full_rate_phy_dfi_p0_rddata;
reg           main_full_rate_phy_dfi_p0_rddata_en = 1'd0;
reg           main_full_rate_phy_dfi_p0_rddata_valid = 1'd0;
reg           main_full_rate_phy_dfi_p0_reset_n = 1'd0;
reg           main_full_rate_phy_dfi_p0_we_n = 1'd1;
reg    [15:0] main_full_rate_phy_dfi_p0_wrdata = 16'd0;
wire          main_full_rate_phy_dfi_p0_wrdata_en;
reg     [1:0] main_full_rate_phy_dfi_p0_wrdata_mask = 2'd0;
reg     [2:0] main_full_rate_phy_rddata_en = 3'd0;
reg           main_gpio2_gpio_in_re = 1'd0;
wire          main_gpio2_gpio_in_status;
wire          main_gpio2_gpio_in_we;
reg           main_gpio2_gpio_out_re = 1'd0;
reg     [1:0] main_gpio2_gpio_out_storage = 2'd0;
reg           main_gpio3_re = 1'd0;
reg           main_gpio3_storage = 1'd0;
reg           main_gpio_gpio_in_re = 1'd0;
wire          main_gpio_gpio_in_status;
wire          main_gpio_gpio_in_we;
reg           main_gpio_gpio_out_re = 1'd0;
reg     [1:0] main_gpio_gpio_out_storage = 2'd0;
reg           main_interface_ack = 1'd0;
wire   [27:0] main_interface_adr;
reg           main_interface_cyc = 1'd0;
reg   [127:0] main_interface_dat_r = 128'd0;
wire  [127:0] main_interface_dat_w;
wire   [15:0] main_interface_sel;
reg           main_interface_stb = 1'd0;
reg           main_interface_we = 1'd0;
reg     [5:0] main_leds_chaser = 6'd0;
reg    [21:0] main_leds_count = 22'd4166666;
wire          main_leds_done;
reg     [5:0] main_leds_leds = 6'd0;
reg           main_leds_mode = 1'd0;
reg           main_leds_re = 1'd0;
reg     [5:0] main_leds_storage = 6'd0;
wire          main_leds_wait;
wire          main_litedramcrossbar_cmd_last;
wire   [22:0] main_litedramcrossbar_cmd_payload_addr;
wire          main_litedramcrossbar_cmd_payload_we;
wire          main_litedramcrossbar_cmd_ready;
wire          main_litedramcrossbar_cmd_valid;
reg           main_litedramcrossbar_rdata_first = 1'd0;
reg           main_litedramcrossbar_rdata_last = 1'd0;
wire   [31:0] main_litedramcrossbar_rdata_payload_data;
wire          main_litedramcrossbar_rdata_ready;
wire          main_litedramcrossbar_rdata_valid;
reg    [31:0] main_litedramcrossbar_wdata_payload_data = 32'd0;
reg     [3:0] main_litedramcrossbar_wdata_payload_we = 4'd0;
wire          main_litedramcrossbar_wdata_ready;
wire          main_locked;
wire          main_oe;
reg           main_phase_sel = 1'd0;
reg           main_phase_sys = 1'd0;
reg           main_phase_sys2x = 1'd0;
reg    [15:0] main_por_count = 16'd65535;
wire          main_por_done;
reg    [22:0] main_port_cmd_payload_addr = 23'd0;
reg           main_port_cmd_payload_we = 1'd0;
wire          main_port_cmd_ready;
reg           main_port_cmd_valid = 1'd0;
reg           main_port_rdata_first = 1'd0;
reg           main_port_rdata_last = 1'd0;
wire   [31:0] main_port_rdata_payload_data;
wire          main_port_rdata_ready;
wire          main_port_rdata_valid;
wire          main_port_wdata_first;
wire          main_port_wdata_last;
wire   [31:0] main_port_wdata_payload_data;
wire    [3:0] main_port_wdata_payload_we;
wire          main_port_wdata_ready;
wire          main_port_wdata_valid;
reg    [15:0] main_rddata_d = 16'd0;
wire          main_reset;
reg           main_rst = 1'd0;
wire          main_scl;
wire          main_sda0;
wire          main_sda1;
reg           main_sdram_bankmachine0_auto_precharge = 1'd0;
reg    [12:0] main_sdram_bankmachine0_cmd_payload_a = 13'd0;
wire    [1:0] main_sdram_bankmachine0_cmd_payload_ba;
reg           main_sdram_bankmachine0_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine0_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine0_cmd_ready = 1'd0;
reg           main_sdram_bankmachine0_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine0_consume = 3'd0;
wire          main_sdram_bankmachine0_do_read;
wire          main_sdram_bankmachine0_fifo_in_first;
wire          main_sdram_bankmachine0_fifo_in_last;
wire   [20:0] main_sdram_bankmachine0_fifo_in_payload_addr;
wire          main_sdram_bankmachine0_fifo_in_payload_we;
wire          main_sdram_bankmachine0_fifo_out_first;
wire          main_sdram_bankmachine0_fifo_out_last;
wire   [20:0] main_sdram_bankmachine0_fifo_out_payload_addr;
wire          main_sdram_bankmachine0_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine0_level = 4'd0;
wire          main_sdram_bankmachine0_pipe_valid_sink_first;
wire          main_sdram_bankmachine0_pipe_valid_sink_last;
wire   [20:0] main_sdram_bankmachine0_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine0_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine0_pipe_valid_sink_ready;
wire          main_sdram_bankmachine0_pipe_valid_sink_valid;
reg           main_sdram_bankmachine0_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine0_pipe_valid_source_last = 1'd0;
reg    [20:0] main_sdram_bankmachine0_pipe_valid_source_payload_addr = 21'd0;
reg           main_sdram_bankmachine0_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine0_pipe_valid_source_ready;
reg           main_sdram_bankmachine0_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine0_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine0_rdport_adr;
wire   [23:0] main_sdram_bankmachine0_rdport_dat_r;
reg           main_sdram_bankmachine0_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine0_refresh_req;
reg           main_sdram_bankmachine0_replace = 1'd0;
wire   [20:0] main_sdram_bankmachine0_req_addr;
wire          main_sdram_bankmachine0_req_lock;
reg           main_sdram_bankmachine0_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine0_req_ready;
wire          main_sdram_bankmachine0_req_valid;
reg           main_sdram_bankmachine0_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine0_req_we;
reg    [12:0] main_sdram_bankmachine0_row = 13'd0;
reg           main_sdram_bankmachine0_row_close = 1'd0;
reg           main_sdram_bankmachine0_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine0_row_hit;
reg           main_sdram_bankmachine0_row_open = 1'd0;
reg           main_sdram_bankmachine0_row_opened = 1'd0;
reg           main_sdram_bankmachine0_sink_first = 1'd0;
reg           main_sdram_bankmachine0_sink_last = 1'd0;
wire   [20:0] main_sdram_bankmachine0_sink_payload_addr;
wire          main_sdram_bankmachine0_sink_payload_we;
wire          main_sdram_bankmachine0_sink_ready;
wire          main_sdram_bankmachine0_sink_sink_first;
wire          main_sdram_bankmachine0_sink_sink_last;
wire   [20:0] main_sdram_bankmachine0_sink_sink_payload_addr;
wire          main_sdram_bankmachine0_sink_sink_payload_we;
wire          main_sdram_bankmachine0_sink_sink_ready;
wire          main_sdram_bankmachine0_sink_sink_valid;
wire          main_sdram_bankmachine0_sink_valid;
wire          main_sdram_bankmachine0_source_first;
wire          main_sdram_bankmachine0_source_last;
wire   [20:0] main_sdram_bankmachine0_source_payload_addr;
wire          main_sdram_bankmachine0_source_payload_we;
wire          main_sdram_bankmachine0_source_ready;
wire          main_sdram_bankmachine0_source_source_first;
wire          main_sdram_bankmachine0_source_source_last;
wire   [20:0] main_sdram_bankmachine0_source_source_payload_addr;
wire          main_sdram_bankmachine0_source_source_payload_we;
wire          main_sdram_bankmachine0_source_source_ready;
wire          main_sdram_bankmachine0_source_source_valid;
wire          main_sdram_bankmachine0_source_valid;
wire   [23:0] main_sdram_bankmachine0_syncfifo0_din;
wire   [23:0] main_sdram_bankmachine0_syncfifo0_dout;
wire          main_sdram_bankmachine0_syncfifo0_re;
wire          main_sdram_bankmachine0_syncfifo0_readable;
wire          main_sdram_bankmachine0_syncfifo0_we;
wire          main_sdram_bankmachine0_syncfifo0_writable;
reg     [1:0] main_sdram_bankmachine0_trascon_count = 2'd0;
reg           main_sdram_bankmachine0_trascon_ready = 1'd0;
wire          main_sdram_bankmachine0_trascon_valid;
reg     [1:0] main_sdram_bankmachine0_trccon_count = 2'd0;
reg           main_sdram_bankmachine0_trccon_ready = 1'd0;
wire          main_sdram_bankmachine0_trccon_valid;
reg     [1:0] main_sdram_bankmachine0_twtpcon_count = 2'd0;
reg           main_sdram_bankmachine0_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine0_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine0_wrport_adr = 3'd0;
wire   [23:0] main_sdram_bankmachine0_wrport_dat_r;
wire   [23:0] main_sdram_bankmachine0_wrport_dat_w;
wire          main_sdram_bankmachine0_wrport_we;
reg           main_sdram_bankmachine1_auto_precharge = 1'd0;
reg    [12:0] main_sdram_bankmachine1_cmd_payload_a = 13'd0;
wire    [1:0] main_sdram_bankmachine1_cmd_payload_ba;
reg           main_sdram_bankmachine1_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine1_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine1_cmd_ready = 1'd0;
reg           main_sdram_bankmachine1_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine1_consume = 3'd0;
wire          main_sdram_bankmachine1_do_read;
wire          main_sdram_bankmachine1_fifo_in_first;
wire          main_sdram_bankmachine1_fifo_in_last;
wire   [20:0] main_sdram_bankmachine1_fifo_in_payload_addr;
wire          main_sdram_bankmachine1_fifo_in_payload_we;
wire          main_sdram_bankmachine1_fifo_out_first;
wire          main_sdram_bankmachine1_fifo_out_last;
wire   [20:0] main_sdram_bankmachine1_fifo_out_payload_addr;
wire          main_sdram_bankmachine1_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine1_level = 4'd0;
wire          main_sdram_bankmachine1_pipe_valid_sink_first;
wire          main_sdram_bankmachine1_pipe_valid_sink_last;
wire   [20:0] main_sdram_bankmachine1_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine1_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine1_pipe_valid_sink_ready;
wire          main_sdram_bankmachine1_pipe_valid_sink_valid;
reg           main_sdram_bankmachine1_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine1_pipe_valid_source_last = 1'd0;
reg    [20:0] main_sdram_bankmachine1_pipe_valid_source_payload_addr = 21'd0;
reg           main_sdram_bankmachine1_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine1_pipe_valid_source_ready;
reg           main_sdram_bankmachine1_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine1_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine1_rdport_adr;
wire   [23:0] main_sdram_bankmachine1_rdport_dat_r;
reg           main_sdram_bankmachine1_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine1_refresh_req;
reg           main_sdram_bankmachine1_replace = 1'd0;
wire   [20:0] main_sdram_bankmachine1_req_addr;
wire          main_sdram_bankmachine1_req_lock;
reg           main_sdram_bankmachine1_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine1_req_ready;
wire          main_sdram_bankmachine1_req_valid;
reg           main_sdram_bankmachine1_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine1_req_we;
reg    [12:0] main_sdram_bankmachine1_row = 13'd0;
reg           main_sdram_bankmachine1_row_close = 1'd0;
reg           main_sdram_bankmachine1_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine1_row_hit;
reg           main_sdram_bankmachine1_row_open = 1'd0;
reg           main_sdram_bankmachine1_row_opened = 1'd0;
reg           main_sdram_bankmachine1_sink_first = 1'd0;
reg           main_sdram_bankmachine1_sink_last = 1'd0;
wire   [20:0] main_sdram_bankmachine1_sink_payload_addr;
wire          main_sdram_bankmachine1_sink_payload_we;
wire          main_sdram_bankmachine1_sink_ready;
wire          main_sdram_bankmachine1_sink_sink_first;
wire          main_sdram_bankmachine1_sink_sink_last;
wire   [20:0] main_sdram_bankmachine1_sink_sink_payload_addr;
wire          main_sdram_bankmachine1_sink_sink_payload_we;
wire          main_sdram_bankmachine1_sink_sink_ready;
wire          main_sdram_bankmachine1_sink_sink_valid;
wire          main_sdram_bankmachine1_sink_valid;
wire          main_sdram_bankmachine1_source_first;
wire          main_sdram_bankmachine1_source_last;
wire   [20:0] main_sdram_bankmachine1_source_payload_addr;
wire          main_sdram_bankmachine1_source_payload_we;
wire          main_sdram_bankmachine1_source_ready;
wire          main_sdram_bankmachine1_source_source_first;
wire          main_sdram_bankmachine1_source_source_last;
wire   [20:0] main_sdram_bankmachine1_source_source_payload_addr;
wire          main_sdram_bankmachine1_source_source_payload_we;
wire          main_sdram_bankmachine1_source_source_ready;
wire          main_sdram_bankmachine1_source_source_valid;
wire          main_sdram_bankmachine1_source_valid;
wire   [23:0] main_sdram_bankmachine1_syncfifo1_din;
wire   [23:0] main_sdram_bankmachine1_syncfifo1_dout;
wire          main_sdram_bankmachine1_syncfifo1_re;
wire          main_sdram_bankmachine1_syncfifo1_readable;
wire          main_sdram_bankmachine1_syncfifo1_we;
wire          main_sdram_bankmachine1_syncfifo1_writable;
reg     [1:0] main_sdram_bankmachine1_trascon_count = 2'd0;
reg           main_sdram_bankmachine1_trascon_ready = 1'd0;
wire          main_sdram_bankmachine1_trascon_valid;
reg     [1:0] main_sdram_bankmachine1_trccon_count = 2'd0;
reg           main_sdram_bankmachine1_trccon_ready = 1'd0;
wire          main_sdram_bankmachine1_trccon_valid;
reg     [1:0] main_sdram_bankmachine1_twtpcon_count = 2'd0;
reg           main_sdram_bankmachine1_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine1_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine1_wrport_adr = 3'd0;
wire   [23:0] main_sdram_bankmachine1_wrport_dat_r;
wire   [23:0] main_sdram_bankmachine1_wrport_dat_w;
wire          main_sdram_bankmachine1_wrport_we;
reg           main_sdram_bankmachine2_auto_precharge = 1'd0;
reg    [12:0] main_sdram_bankmachine2_cmd_payload_a = 13'd0;
wire    [1:0] main_sdram_bankmachine2_cmd_payload_ba;
reg           main_sdram_bankmachine2_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine2_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine2_cmd_ready = 1'd0;
reg           main_sdram_bankmachine2_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine2_consume = 3'd0;
wire          main_sdram_bankmachine2_do_read;
wire          main_sdram_bankmachine2_fifo_in_first;
wire          main_sdram_bankmachine2_fifo_in_last;
wire   [20:0] main_sdram_bankmachine2_fifo_in_payload_addr;
wire          main_sdram_bankmachine2_fifo_in_payload_we;
wire          main_sdram_bankmachine2_fifo_out_first;
wire          main_sdram_bankmachine2_fifo_out_last;
wire   [20:0] main_sdram_bankmachine2_fifo_out_payload_addr;
wire          main_sdram_bankmachine2_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine2_level = 4'd0;
wire          main_sdram_bankmachine2_pipe_valid_sink_first;
wire          main_sdram_bankmachine2_pipe_valid_sink_last;
wire   [20:0] main_sdram_bankmachine2_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine2_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine2_pipe_valid_sink_ready;
wire          main_sdram_bankmachine2_pipe_valid_sink_valid;
reg           main_sdram_bankmachine2_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine2_pipe_valid_source_last = 1'd0;
reg    [20:0] main_sdram_bankmachine2_pipe_valid_source_payload_addr = 21'd0;
reg           main_sdram_bankmachine2_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine2_pipe_valid_source_ready;
reg           main_sdram_bankmachine2_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine2_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine2_rdport_adr;
wire   [23:0] main_sdram_bankmachine2_rdport_dat_r;
reg           main_sdram_bankmachine2_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine2_refresh_req;
reg           main_sdram_bankmachine2_replace = 1'd0;
wire   [20:0] main_sdram_bankmachine2_req_addr;
wire          main_sdram_bankmachine2_req_lock;
reg           main_sdram_bankmachine2_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine2_req_ready;
wire          main_sdram_bankmachine2_req_valid;
reg           main_sdram_bankmachine2_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine2_req_we;
reg    [12:0] main_sdram_bankmachine2_row = 13'd0;
reg           main_sdram_bankmachine2_row_close = 1'd0;
reg           main_sdram_bankmachine2_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine2_row_hit;
reg           main_sdram_bankmachine2_row_open = 1'd0;
reg           main_sdram_bankmachine2_row_opened = 1'd0;
reg           main_sdram_bankmachine2_sink_first = 1'd0;
reg           main_sdram_bankmachine2_sink_last = 1'd0;
wire   [20:0] main_sdram_bankmachine2_sink_payload_addr;
wire          main_sdram_bankmachine2_sink_payload_we;
wire          main_sdram_bankmachine2_sink_ready;
wire          main_sdram_bankmachine2_sink_sink_first;
wire          main_sdram_bankmachine2_sink_sink_last;
wire   [20:0] main_sdram_bankmachine2_sink_sink_payload_addr;
wire          main_sdram_bankmachine2_sink_sink_payload_we;
wire          main_sdram_bankmachine2_sink_sink_ready;
wire          main_sdram_bankmachine2_sink_sink_valid;
wire          main_sdram_bankmachine2_sink_valid;
wire          main_sdram_bankmachine2_source_first;
wire          main_sdram_bankmachine2_source_last;
wire   [20:0] main_sdram_bankmachine2_source_payload_addr;
wire          main_sdram_bankmachine2_source_payload_we;
wire          main_sdram_bankmachine2_source_ready;
wire          main_sdram_bankmachine2_source_source_first;
wire          main_sdram_bankmachine2_source_source_last;
wire   [20:0] main_sdram_bankmachine2_source_source_payload_addr;
wire          main_sdram_bankmachine2_source_source_payload_we;
wire          main_sdram_bankmachine2_source_source_ready;
wire          main_sdram_bankmachine2_source_source_valid;
wire          main_sdram_bankmachine2_source_valid;
wire   [23:0] main_sdram_bankmachine2_syncfifo2_din;
wire   [23:0] main_sdram_bankmachine2_syncfifo2_dout;
wire          main_sdram_bankmachine2_syncfifo2_re;
wire          main_sdram_bankmachine2_syncfifo2_readable;
wire          main_sdram_bankmachine2_syncfifo2_we;
wire          main_sdram_bankmachine2_syncfifo2_writable;
reg     [1:0] main_sdram_bankmachine2_trascon_count = 2'd0;
reg           main_sdram_bankmachine2_trascon_ready = 1'd0;
wire          main_sdram_bankmachine2_trascon_valid;
reg     [1:0] main_sdram_bankmachine2_trccon_count = 2'd0;
reg           main_sdram_bankmachine2_trccon_ready = 1'd0;
wire          main_sdram_bankmachine2_trccon_valid;
reg     [1:0] main_sdram_bankmachine2_twtpcon_count = 2'd0;
reg           main_sdram_bankmachine2_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine2_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine2_wrport_adr = 3'd0;
wire   [23:0] main_sdram_bankmachine2_wrport_dat_r;
wire   [23:0] main_sdram_bankmachine2_wrport_dat_w;
wire          main_sdram_bankmachine2_wrport_we;
reg           main_sdram_bankmachine3_auto_precharge = 1'd0;
reg    [12:0] main_sdram_bankmachine3_cmd_payload_a = 13'd0;
wire    [1:0] main_sdram_bankmachine3_cmd_payload_ba;
reg           main_sdram_bankmachine3_cmd_payload_cas = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_is_read = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_is_write = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_ras = 1'd0;
reg           main_sdram_bankmachine3_cmd_payload_we = 1'd0;
reg           main_sdram_bankmachine3_cmd_ready = 1'd0;
reg           main_sdram_bankmachine3_cmd_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine3_consume = 3'd0;
wire          main_sdram_bankmachine3_do_read;
wire          main_sdram_bankmachine3_fifo_in_first;
wire          main_sdram_bankmachine3_fifo_in_last;
wire   [20:0] main_sdram_bankmachine3_fifo_in_payload_addr;
wire          main_sdram_bankmachine3_fifo_in_payload_we;
wire          main_sdram_bankmachine3_fifo_out_first;
wire          main_sdram_bankmachine3_fifo_out_last;
wire   [20:0] main_sdram_bankmachine3_fifo_out_payload_addr;
wire          main_sdram_bankmachine3_fifo_out_payload_we;
reg     [3:0] main_sdram_bankmachine3_level = 4'd0;
wire          main_sdram_bankmachine3_pipe_valid_sink_first;
wire          main_sdram_bankmachine3_pipe_valid_sink_last;
wire   [20:0] main_sdram_bankmachine3_pipe_valid_sink_payload_addr;
wire          main_sdram_bankmachine3_pipe_valid_sink_payload_we;
wire          main_sdram_bankmachine3_pipe_valid_sink_ready;
wire          main_sdram_bankmachine3_pipe_valid_sink_valid;
reg           main_sdram_bankmachine3_pipe_valid_source_first = 1'd0;
reg           main_sdram_bankmachine3_pipe_valid_source_last = 1'd0;
reg    [20:0] main_sdram_bankmachine3_pipe_valid_source_payload_addr = 21'd0;
reg           main_sdram_bankmachine3_pipe_valid_source_payload_we = 1'd0;
wire          main_sdram_bankmachine3_pipe_valid_source_ready;
reg           main_sdram_bankmachine3_pipe_valid_source_valid = 1'd0;
reg     [2:0] main_sdram_bankmachine3_produce = 3'd0;
wire    [2:0] main_sdram_bankmachine3_rdport_adr;
wire   [23:0] main_sdram_bankmachine3_rdport_dat_r;
reg           main_sdram_bankmachine3_refresh_gnt = 1'd0;
wire          main_sdram_bankmachine3_refresh_req;
reg           main_sdram_bankmachine3_replace = 1'd0;
wire   [20:0] main_sdram_bankmachine3_req_addr;
wire          main_sdram_bankmachine3_req_lock;
reg           main_sdram_bankmachine3_req_rdata_valid = 1'd0;
wire          main_sdram_bankmachine3_req_ready;
wire          main_sdram_bankmachine3_req_valid;
reg           main_sdram_bankmachine3_req_wdata_ready = 1'd0;
wire          main_sdram_bankmachine3_req_we;
reg    [12:0] main_sdram_bankmachine3_row = 13'd0;
reg           main_sdram_bankmachine3_row_close = 1'd0;
reg           main_sdram_bankmachine3_row_col_n_addr_sel = 1'd0;
wire          main_sdram_bankmachine3_row_hit;
reg           main_sdram_bankmachine3_row_open = 1'd0;
reg           main_sdram_bankmachine3_row_opened = 1'd0;
reg           main_sdram_bankmachine3_sink_first = 1'd0;
reg           main_sdram_bankmachine3_sink_last = 1'd0;
wire   [20:0] main_sdram_bankmachine3_sink_payload_addr;
wire          main_sdram_bankmachine3_sink_payload_we;
wire          main_sdram_bankmachine3_sink_ready;
wire          main_sdram_bankmachine3_sink_sink_first;
wire          main_sdram_bankmachine3_sink_sink_last;
wire   [20:0] main_sdram_bankmachine3_sink_sink_payload_addr;
wire          main_sdram_bankmachine3_sink_sink_payload_we;
wire          main_sdram_bankmachine3_sink_sink_ready;
wire          main_sdram_bankmachine3_sink_sink_valid;
wire          main_sdram_bankmachine3_sink_valid;
wire          main_sdram_bankmachine3_source_first;
wire          main_sdram_bankmachine3_source_last;
wire   [20:0] main_sdram_bankmachine3_source_payload_addr;
wire          main_sdram_bankmachine3_source_payload_we;
wire          main_sdram_bankmachine3_source_ready;
wire          main_sdram_bankmachine3_source_source_first;
wire          main_sdram_bankmachine3_source_source_last;
wire   [20:0] main_sdram_bankmachine3_source_source_payload_addr;
wire          main_sdram_bankmachine3_source_source_payload_we;
wire          main_sdram_bankmachine3_source_source_ready;
wire          main_sdram_bankmachine3_source_source_valid;
wire          main_sdram_bankmachine3_source_valid;
wire   [23:0] main_sdram_bankmachine3_syncfifo3_din;
wire   [23:0] main_sdram_bankmachine3_syncfifo3_dout;
wire          main_sdram_bankmachine3_syncfifo3_re;
wire          main_sdram_bankmachine3_syncfifo3_readable;
wire          main_sdram_bankmachine3_syncfifo3_we;
wire          main_sdram_bankmachine3_syncfifo3_writable;
reg     [1:0] main_sdram_bankmachine3_trascon_count = 2'd0;
reg           main_sdram_bankmachine3_trascon_ready = 1'd0;
wire          main_sdram_bankmachine3_trascon_valid;
reg     [1:0] main_sdram_bankmachine3_trccon_count = 2'd0;
reg           main_sdram_bankmachine3_trccon_ready = 1'd0;
wire          main_sdram_bankmachine3_trccon_valid;
reg     [1:0] main_sdram_bankmachine3_twtpcon_count = 2'd0;
reg           main_sdram_bankmachine3_twtpcon_ready = 1'd0;
wire          main_sdram_bankmachine3_twtpcon_valid;
reg     [2:0] main_sdram_bankmachine3_wrport_adr = 3'd0;
wire   [23:0] main_sdram_bankmachine3_wrport_dat_r;
wire   [23:0] main_sdram_bankmachine3_wrport_dat_w;
wire          main_sdram_bankmachine3_wrport_we;
wire          main_sdram_cas_allowed;
wire          main_sdram_choose_cmd_ce;
wire   [12:0] main_sdram_choose_cmd_cmd_payload_a;
wire    [1:0] main_sdram_choose_cmd_cmd_payload_ba;
reg           main_sdram_choose_cmd_cmd_payload_cas = 1'd0;
wire          main_sdram_choose_cmd_cmd_payload_is_cmd;
wire          main_sdram_choose_cmd_cmd_payload_is_read;
wire          main_sdram_choose_cmd_cmd_payload_is_write;
reg           main_sdram_choose_cmd_cmd_payload_ras = 1'd0;
reg           main_sdram_choose_cmd_cmd_payload_we = 1'd0;
reg           main_sdram_choose_cmd_cmd_ready = 1'd0;
wire          main_sdram_choose_cmd_cmd_valid;
reg     [1:0] main_sdram_choose_cmd_grant = 2'd0;
wire    [3:0] main_sdram_choose_cmd_request;
reg     [3:0] main_sdram_choose_cmd_requests = 4'd0;
reg           main_sdram_choose_cmd_want_activates = 1'd0;
reg           main_sdram_choose_cmd_want_cmds = 1'd0;
reg           main_sdram_choose_cmd_want_reads = 1'd0;
reg           main_sdram_choose_cmd_want_writes = 1'd0;
wire          main_sdram_choose_req_ce;
wire   [12:0] main_sdram_choose_req_cmd_payload_a;
wire    [1:0] main_sdram_choose_req_cmd_payload_ba;
reg           main_sdram_choose_req_cmd_payload_cas = 1'd0;
wire          main_sdram_choose_req_cmd_payload_is_cmd;
wire          main_sdram_choose_req_cmd_payload_is_read;
wire          main_sdram_choose_req_cmd_payload_is_write;
reg           main_sdram_choose_req_cmd_payload_ras = 1'd0;
reg           main_sdram_choose_req_cmd_payload_we = 1'd0;
reg           main_sdram_choose_req_cmd_ready = 1'd0;
wire          main_sdram_choose_req_cmd_valid;
reg     [1:0] main_sdram_choose_req_grant = 2'd0;
wire    [3:0] main_sdram_choose_req_request;
reg     [3:0] main_sdram_choose_req_requests = 4'd0;
reg           main_sdram_choose_req_want_activates = 1'd0;
reg           main_sdram_choose_req_want_cmds = 1'd0;
reg           main_sdram_choose_req_want_reads = 1'd0;
reg           main_sdram_choose_req_want_writes = 1'd0;
wire          main_sdram_cke;
reg           main_sdram_cmd_last = 1'd0;
reg    [12:0] main_sdram_cmd_payload_a = 13'd0;
reg     [1:0] main_sdram_cmd_payload_ba = 2'd0;
reg           main_sdram_cmd_payload_cas = 1'd0;
reg           main_sdram_cmd_payload_is_read = 1'd0;
reg           main_sdram_cmd_payload_is_write = 1'd0;
reg           main_sdram_cmd_payload_ras = 1'd0;
reg           main_sdram_cmd_payload_we = 1'd0;
reg           main_sdram_cmd_ready = 1'd0;
reg           main_sdram_cmd_valid = 1'd0;
reg           main_sdram_csr_dfi_p0_act_n = 1'd1;
wire   [12:0] main_sdram_csr_dfi_p0_address;
wire    [1:0] main_sdram_csr_dfi_p0_bank;
reg           main_sdram_csr_dfi_p0_cas_n = 1'd1;
reg           main_sdram_csr_dfi_p0_cke = 1'd0;
reg           main_sdram_csr_dfi_p0_cs_n = 1'd1;
reg           main_sdram_csr_dfi_p0_odt = 1'd0;
reg           main_sdram_csr_dfi_p0_ras_n = 1'd1;
reg    [15:0] main_sdram_csr_dfi_p0_rddata = 16'd0;
wire          main_sdram_csr_dfi_p0_rddata_en;
reg           main_sdram_csr_dfi_p0_rddata_valid = 1'd0;
wire          main_sdram_csr_dfi_p0_reset_n;
reg           main_sdram_csr_dfi_p0_we_n = 1'd1;
wire   [15:0] main_sdram_csr_dfi_p0_wrdata;
wire          main_sdram_csr_dfi_p0_wrdata_en;
wire    [1:0] main_sdram_csr_dfi_p0_wrdata_mask;
reg           main_sdram_csr_dfi_p1_act_n = 1'd1;
wire   [12:0] main_sdram_csr_dfi_p1_address;
wire    [1:0] main_sdram_csr_dfi_p1_bank;
reg           main_sdram_csr_dfi_p1_cas_n = 1'd1;
reg           main_sdram_csr_dfi_p1_cke = 1'd0;
reg           main_sdram_csr_dfi_p1_cs_n = 1'd1;
reg           main_sdram_csr_dfi_p1_odt = 1'd0;
reg           main_sdram_csr_dfi_p1_ras_n = 1'd1;
reg    [15:0] main_sdram_csr_dfi_p1_rddata = 16'd0;
wire          main_sdram_csr_dfi_p1_rddata_en;
reg           main_sdram_csr_dfi_p1_rddata_valid = 1'd0;
wire          main_sdram_csr_dfi_p1_reset_n;
reg           main_sdram_csr_dfi_p1_we_n = 1'd1;
wire   [15:0] main_sdram_csr_dfi_p1_wrdata;
wire          main_sdram_csr_dfi_p1_wrdata_en;
wire    [1:0] main_sdram_csr_dfi_p1_wrdata_mask;
reg           main_sdram_dfi_p0_act_n = 1'd1;
reg    [12:0] main_sdram_dfi_p0_address = 13'd0;
reg     [1:0] main_sdram_dfi_p0_bank = 2'd0;
reg           main_sdram_dfi_p0_cas_n = 1'd1;
wire          main_sdram_dfi_p0_cke;
reg           main_sdram_dfi_p0_cs_n = 1'd1;
wire          main_sdram_dfi_p0_odt;
reg           main_sdram_dfi_p0_ras_n = 1'd1;
wire   [15:0] main_sdram_dfi_p0_rddata;
reg           main_sdram_dfi_p0_rddata_en = 1'd0;
wire          main_sdram_dfi_p0_rddata_valid;
wire          main_sdram_dfi_p0_reset_n;
reg           main_sdram_dfi_p0_we_n = 1'd1;
wire   [15:0] main_sdram_dfi_p0_wrdata;
reg           main_sdram_dfi_p0_wrdata_en = 1'd0;
wire    [1:0] main_sdram_dfi_p0_wrdata_mask;
reg           main_sdram_dfi_p1_act_n = 1'd1;
reg    [12:0] main_sdram_dfi_p1_address = 13'd0;
reg     [1:0] main_sdram_dfi_p1_bank = 2'd0;
reg           main_sdram_dfi_p1_cas_n = 1'd1;
wire          main_sdram_dfi_p1_cke;
reg           main_sdram_dfi_p1_cs_n = 1'd1;
wire          main_sdram_dfi_p1_odt;
reg           main_sdram_dfi_p1_ras_n = 1'd1;
wire   [15:0] main_sdram_dfi_p1_rddata;
reg           main_sdram_dfi_p1_rddata_en = 1'd0;
wire          main_sdram_dfi_p1_rddata_valid;
wire          main_sdram_dfi_p1_reset_n;
reg           main_sdram_dfi_p1_we_n = 1'd1;
wire   [15:0] main_sdram_dfi_p1_wrdata;
reg           main_sdram_dfi_p1_wrdata_en = 1'd0;
wire    [1:0] main_sdram_dfi_p1_wrdata_mask;
reg           main_sdram_en0 = 1'd0;
reg           main_sdram_en1 = 1'd0;
reg           main_sdram_ext_dfi_p0_act_n = 1'd1;
reg    [12:0] main_sdram_ext_dfi_p0_address = 13'd0;
reg     [1:0] main_sdram_ext_dfi_p0_bank = 2'd0;
reg           main_sdram_ext_dfi_p0_cas_n = 1'd1;
reg           main_sdram_ext_dfi_p0_cke = 1'd0;
reg           main_sdram_ext_dfi_p0_cs_n = 1'd1;
reg           main_sdram_ext_dfi_p0_odt = 1'd0;
reg           main_sdram_ext_dfi_p0_ras_n = 1'd1;
reg    [15:0] main_sdram_ext_dfi_p0_rddata = 16'd0;
reg           main_sdram_ext_dfi_p0_rddata_en = 1'd0;
reg           main_sdram_ext_dfi_p0_rddata_valid = 1'd0;
reg           main_sdram_ext_dfi_p0_reset_n = 1'd0;
reg           main_sdram_ext_dfi_p0_we_n = 1'd1;
reg    [15:0] main_sdram_ext_dfi_p0_wrdata = 16'd0;
reg           main_sdram_ext_dfi_p0_wrdata_en = 1'd0;
reg     [1:0] main_sdram_ext_dfi_p0_wrdata_mask = 2'd0;
reg           main_sdram_ext_dfi_p1_act_n = 1'd1;
reg    [12:0] main_sdram_ext_dfi_p1_address = 13'd0;
reg     [1:0] main_sdram_ext_dfi_p1_bank = 2'd0;
reg           main_sdram_ext_dfi_p1_cas_n = 1'd1;
reg           main_sdram_ext_dfi_p1_cke = 1'd0;
reg           main_sdram_ext_dfi_p1_cs_n = 1'd1;
reg           main_sdram_ext_dfi_p1_odt = 1'd0;
reg           main_sdram_ext_dfi_p1_ras_n = 1'd1;
reg    [15:0] main_sdram_ext_dfi_p1_rddata = 16'd0;
reg           main_sdram_ext_dfi_p1_rddata_en = 1'd0;
reg           main_sdram_ext_dfi_p1_rddata_valid = 1'd0;
reg           main_sdram_ext_dfi_p1_reset_n = 1'd0;
reg           main_sdram_ext_dfi_p1_we_n = 1'd1;
reg    [15:0] main_sdram_ext_dfi_p1_wrdata = 16'd0;
reg           main_sdram_ext_dfi_p1_wrdata_en = 1'd0;
reg     [1:0] main_sdram_ext_dfi_p1_wrdata_mask = 2'd0;
reg           main_sdram_ext_dfi_sel = 1'd0;
wire          main_sdram_go_to_refresh;
wire   [20:0] main_sdram_interface_bank0_addr;
wire          main_sdram_interface_bank0_lock;
wire          main_sdram_interface_bank0_rdata_valid;
wire          main_sdram_interface_bank0_ready;
wire          main_sdram_interface_bank0_valid;
wire          main_sdram_interface_bank0_wdata_ready;
wire          main_sdram_interface_bank0_we;
wire   [20:0] main_sdram_interface_bank1_addr;
wire          main_sdram_interface_bank1_lock;
wire          main_sdram_interface_bank1_rdata_valid;
wire          main_sdram_interface_bank1_ready;
wire          main_sdram_interface_bank1_valid;
wire          main_sdram_interface_bank1_wdata_ready;
wire          main_sdram_interface_bank1_we;
wire   [20:0] main_sdram_interface_bank2_addr;
wire          main_sdram_interface_bank2_lock;
wire          main_sdram_interface_bank2_rdata_valid;
wire          main_sdram_interface_bank2_ready;
wire          main_sdram_interface_bank2_valid;
wire          main_sdram_interface_bank2_wdata_ready;
wire          main_sdram_interface_bank2_we;
wire   [20:0] main_sdram_interface_bank3_addr;
wire          main_sdram_interface_bank3_lock;
wire          main_sdram_interface_bank3_rdata_valid;
wire          main_sdram_interface_bank3_ready;
wire          main_sdram_interface_bank3_valid;
wire          main_sdram_interface_bank3_wdata_ready;
wire          main_sdram_interface_bank3_we;
wire   [31:0] main_sdram_interface_rdata;
reg    [31:0] main_sdram_interface_wdata = 32'd0;
reg     [3:0] main_sdram_interface_wdata_we = 4'd0;
reg           main_sdram_master_p0_act_n = 1'd1;
reg    [12:0] main_sdram_master_p0_address = 13'd0;
reg     [1:0] main_sdram_master_p0_bank = 2'd0;
reg           main_sdram_master_p0_cas_n = 1'd1;
reg           main_sdram_master_p0_cke = 1'd0;
reg           main_sdram_master_p0_cs_n = 1'd1;
reg           main_sdram_master_p0_odt = 1'd0;
reg           main_sdram_master_p0_ras_n = 1'd1;
wire   [15:0] main_sdram_master_p0_rddata;
reg           main_sdram_master_p0_rddata_en = 1'd0;
wire          main_sdram_master_p0_rddata_valid;
reg           main_sdram_master_p0_reset_n = 1'd0;
reg           main_sdram_master_p0_we_n = 1'd1;
reg    [15:0] main_sdram_master_p0_wrdata = 16'd0;
reg           main_sdram_master_p0_wrdata_en = 1'd0;
reg     [1:0] main_sdram_master_p0_wrdata_mask = 2'd0;
reg           main_sdram_master_p1_act_n = 1'd1;
reg    [12:0] main_sdram_master_p1_address = 13'd0;
reg     [1:0] main_sdram_master_p1_bank = 2'd0;
reg           main_sdram_master_p1_cas_n = 1'd1;
reg           main_sdram_master_p1_cke = 1'd0;
reg           main_sdram_master_p1_cs_n = 1'd1;
reg           main_sdram_master_p1_odt = 1'd0;
reg           main_sdram_master_p1_ras_n = 1'd1;
wire   [15:0] main_sdram_master_p1_rddata;
reg           main_sdram_master_p1_rddata_en = 1'd0;
wire          main_sdram_master_p1_rddata_valid;
reg           main_sdram_master_p1_reset_n = 1'd0;
reg           main_sdram_master_p1_we_n = 1'd1;
reg    [15:0] main_sdram_master_p1_wrdata = 16'd0;
reg           main_sdram_master_p1_wrdata_en = 1'd0;
reg     [1:0] main_sdram_master_p1_wrdata_mask = 2'd0;
wire          main_sdram_max_time0;
wire          main_sdram_max_time1;
reg    [12:0] main_sdram_nop_a = 13'd0;
reg     [1:0] main_sdram_nop_ba = 2'd0;
wire          main_sdram_odt;
reg           main_sdram_phaseinjector0_address_re = 1'd0;
reg    [12:0] main_sdram_phaseinjector0_address_storage = 13'd0;
reg           main_sdram_phaseinjector0_baddress_re = 1'd0;
reg     [1:0] main_sdram_phaseinjector0_baddress_storage = 2'd0;
wire          main_sdram_phaseinjector0_command_issue_r;
reg           main_sdram_phaseinjector0_command_issue_re = 1'd0;
reg           main_sdram_phaseinjector0_command_issue_w = 1'd0;
reg           main_sdram_phaseinjector0_command_issue_we = 1'd0;
reg           main_sdram_phaseinjector0_command_re = 1'd0;
reg     [7:0] main_sdram_phaseinjector0_command_storage = 8'd0;
wire          main_sdram_phaseinjector0_csrfield_cas;
wire          main_sdram_phaseinjector0_csrfield_cs;
wire          main_sdram_phaseinjector0_csrfield_cs_bottom;
wire          main_sdram_phaseinjector0_csrfield_cs_top;
wire          main_sdram_phaseinjector0_csrfield_ras;
wire          main_sdram_phaseinjector0_csrfield_rden;
wire          main_sdram_phaseinjector0_csrfield_we;
wire          main_sdram_phaseinjector0_csrfield_wren;
reg           main_sdram_phaseinjector0_rddata_re = 1'd0;
reg    [15:0] main_sdram_phaseinjector0_rddata_status = 16'd0;
wire          main_sdram_phaseinjector0_rddata_we;
reg           main_sdram_phaseinjector0_wrdata_re = 1'd0;
reg    [15:0] main_sdram_phaseinjector0_wrdata_storage = 16'd0;
reg           main_sdram_phaseinjector1_address_re = 1'd0;
reg    [12:0] main_sdram_phaseinjector1_address_storage = 13'd0;
reg           main_sdram_phaseinjector1_baddress_re = 1'd0;
reg     [1:0] main_sdram_phaseinjector1_baddress_storage = 2'd0;
wire          main_sdram_phaseinjector1_command_issue_r;
reg           main_sdram_phaseinjector1_command_issue_re = 1'd0;
reg           main_sdram_phaseinjector1_command_issue_w = 1'd0;
reg           main_sdram_phaseinjector1_command_issue_we = 1'd0;
reg           main_sdram_phaseinjector1_command_re = 1'd0;
reg     [7:0] main_sdram_phaseinjector1_command_storage = 8'd0;
wire          main_sdram_phaseinjector1_csrfield_cas;
wire          main_sdram_phaseinjector1_csrfield_cs;
wire          main_sdram_phaseinjector1_csrfield_cs_bottom;
wire          main_sdram_phaseinjector1_csrfield_cs_top;
wire          main_sdram_phaseinjector1_csrfield_ras;
wire          main_sdram_phaseinjector1_csrfield_rden;
wire          main_sdram_phaseinjector1_csrfield_we;
wire          main_sdram_phaseinjector1_csrfield_wren;
reg           main_sdram_phaseinjector1_rddata_re = 1'd0;
reg    [15:0] main_sdram_phaseinjector1_rddata_status = 16'd0;
wire          main_sdram_phaseinjector1_rddata_we;
reg           main_sdram_phaseinjector1_wrdata_re = 1'd0;
reg    [15:0] main_sdram_phaseinjector1_wrdata_storage = 16'd0;
reg           main_sdram_postponer_count = 1'd0;
wire          main_sdram_postponer_req_i;
reg           main_sdram_postponer_req_o = 1'd0;
wire          main_sdram_ras_allowed;
reg           main_sdram_re = 1'd0;
wire          main_sdram_read_available;
wire          main_sdram_reset_n;
wire          main_sdram_sel;
reg           main_sdram_sequencer_count = 1'd0;
wire          main_sdram_sequencer_done0;
reg           main_sdram_sequencer_done1 = 1'd0;
reg           main_sdram_sequencer_start0 = 1'd0;
wire          main_sdram_sequencer_start1;
reg     [2:0] main_sdram_sequencer_trigger = 3'd0;
wire          main_sdram_slave_p0_act_n;
wire   [12:0] main_sdram_slave_p0_address;
wire    [1:0] main_sdram_slave_p0_bank;
wire          main_sdram_slave_p0_cas_n;
wire          main_sdram_slave_p0_cke;
wire          main_sdram_slave_p0_cs_n;
wire          main_sdram_slave_p0_odt;
wire          main_sdram_slave_p0_ras_n;
reg    [15:0] main_sdram_slave_p0_rddata = 16'd0;
wire          main_sdram_slave_p0_rddata_en;
reg           main_sdram_slave_p0_rddata_valid = 1'd0;
wire          main_sdram_slave_p0_reset_n;
wire          main_sdram_slave_p0_we_n;
wire   [15:0] main_sdram_slave_p0_wrdata;
wire          main_sdram_slave_p0_wrdata_en;
wire    [1:0] main_sdram_slave_p0_wrdata_mask;
wire          main_sdram_slave_p1_act_n;
wire   [12:0] main_sdram_slave_p1_address;
wire    [1:0] main_sdram_slave_p1_bank;
wire          main_sdram_slave_p1_cas_n;
wire          main_sdram_slave_p1_cke;
wire          main_sdram_slave_p1_cs_n;
wire          main_sdram_slave_p1_odt;
wire          main_sdram_slave_p1_ras_n;
reg    [15:0] main_sdram_slave_p1_rddata = 16'd0;
wire          main_sdram_slave_p1_rddata_en;
reg           main_sdram_slave_p1_rddata_valid = 1'd0;
wire          main_sdram_slave_p1_reset_n;
wire          main_sdram_slave_p1_we_n;
wire   [15:0] main_sdram_slave_p1_wrdata;
wire          main_sdram_slave_p1_wrdata_en;
wire    [1:0] main_sdram_slave_p1_wrdata_mask;
reg           main_sdram_steerer0 = 1'd1;
reg           main_sdram_steerer1 = 1'd1;
reg           main_sdram_steerer2 = 1'd1;
reg           main_sdram_steerer3 = 1'd1;
reg     [1:0] main_sdram_steerer_sel0 = 2'd0;
reg     [1:0] main_sdram_steerer_sel1 = 2'd0;
reg     [3:0] main_sdram_storage = 4'd1;
reg           main_sdram_tccdcon_count = 1'd0;
reg           main_sdram_tccdcon_ready = 1'd0;
wire          main_sdram_tccdcon_valid;
reg           main_sdram_tfawcon_ready = 1'd1;
wire          main_sdram_tfawcon_valid;
reg     [4:0] main_sdram_time0 = 5'd0;
reg     [3:0] main_sdram_time1 = 4'd0;
wire    [8:0] main_sdram_timer_count0;
reg     [8:0] main_sdram_timer_count1 = 9'd390;
wire          main_sdram_timer_done0;
wire          main_sdram_timer_done1;
wire          main_sdram_timer_wait;
reg           main_sdram_trrdcon_count = 1'd0;
reg           main_sdram_trrdcon_ready = 1'd0;
wire          main_sdram_trrdcon_valid;
reg     [1:0] main_sdram_twtrcon_count = 2'd0;
reg           main_sdram_twtrcon_ready = 1'd0;
wire          main_sdram_twtrcon_valid;
wire          main_sdram_wants_refresh;
wire          main_sdram_write_available;
wire          main_sink_first;
wire          main_sink_last;
wire    [7:0] main_sink_payload_b;
wire          main_sink_payload_de;
wire    [7:0] main_sink_payload_g;
wire          main_sink_payload_hsync;
wire    [7:0] main_sink_payload_r;
wire          main_sink_payload_vsync;
wire          main_sink_ready;
wire          main_sink_valid;
reg           main_tag_di_dirty = 1'd0;
wire   [20:0] main_tag_di_tag;
wire          main_tag_do_dirty;
wire   [20:0] main_tag_do_tag;
wire    [8:0] main_tag_port_adr;
wire   [21:0] main_tag_port_dat_r;
wire   [21:0] main_tag_port_dat_w;
reg           main_tag_port_we = 1'd0;
wire   [33:0] main_vfb_cdc_cdc_asyncfifo_din;
wire   [33:0] main_vfb_cdc_cdc_asyncfifo_dout;
wire          main_vfb_cdc_cdc_asyncfifo_re;
wire          main_vfb_cdc_cdc_asyncfifo_readable;
wire          main_vfb_cdc_cdc_asyncfifo_we;
wire          main_vfb_cdc_cdc_asyncfifo_writable;
wire    [2:0] main_vfb_cdc_cdc_consume_wdomain;
wire          main_vfb_cdc_cdc_fifo_in_first;
wire          main_vfb_cdc_cdc_fifo_in_last;
wire   [31:0] main_vfb_cdc_cdc_fifo_in_payload_data;
wire          main_vfb_cdc_cdc_fifo_out_first;
wire          main_vfb_cdc_cdc_fifo_out_last;
wire   [31:0] main_vfb_cdc_cdc_fifo_out_payload_data;
wire          main_vfb_cdc_cdc_graycounter0_ce;
reg     [2:0] main_vfb_cdc_cdc_graycounter0_q = 3'd0;
reg     [2:0] main_vfb_cdc_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] main_vfb_cdc_cdc_graycounter0_q_next;
reg     [2:0] main_vfb_cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire          main_vfb_cdc_cdc_graycounter1_ce;
reg     [2:0] main_vfb_cdc_cdc_graycounter1_q = 3'd0;
reg     [2:0] main_vfb_cdc_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] main_vfb_cdc_cdc_graycounter1_q_next;
reg     [2:0] main_vfb_cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] main_vfb_cdc_cdc_produce_rdomain;
wire    [1:0] main_vfb_cdc_cdc_rdport_adr;
wire   [33:0] main_vfb_cdc_cdc_rdport_dat_r;
wire          main_vfb_cdc_cdc_sink_first;
wire          main_vfb_cdc_cdc_sink_last;
wire   [31:0] main_vfb_cdc_cdc_sink_payload_data;
wire          main_vfb_cdc_cdc_sink_ready;
wire          main_vfb_cdc_cdc_sink_valid;
wire          main_vfb_cdc_cdc_source_first;
wire          main_vfb_cdc_cdc_source_last;
wire   [31:0] main_vfb_cdc_cdc_source_payload_data;
wire          main_vfb_cdc_cdc_source_ready;
wire          main_vfb_cdc_cdc_source_valid;
wire    [1:0] main_vfb_cdc_cdc_wrport_adr;
wire   [33:0] main_vfb_cdc_cdc_wrport_dat_r;
wire   [33:0] main_vfb_cdc_cdc_wrport_dat_w;
wire          main_vfb_cdc_cdc_wrport_we;
wire          main_vfb_cdc_sink_sink_first;
wire          main_vfb_cdc_sink_sink_last;
wire   [31:0] main_vfb_cdc_sink_sink_payload_data;
wire          main_vfb_cdc_sink_sink_ready;
wire          main_vfb_cdc_sink_sink_valid;
wire          main_vfb_cdc_source_source_first;
wire          main_vfb_cdc_source_source_last;
wire   [31:0] main_vfb_cdc_source_source_payload_data;
reg           main_vfb_cdc_source_source_ready = 1'd0;
wire          main_vfb_cdc_source_source_valid;
wire          main_vfb_conv_converter_sink_first;
wire          main_vfb_conv_converter_sink_last;
wire   [31:0] main_vfb_conv_converter_sink_payload_data;
wire          main_vfb_conv_converter_sink_ready;
wire          main_vfb_conv_converter_sink_valid;
wire          main_vfb_conv_converter_source_first;
wire          main_vfb_conv_converter_source_last;
wire   [31:0] main_vfb_conv_converter_source_payload_data;
wire          main_vfb_conv_converter_source_payload_valid_token_count;
wire          main_vfb_conv_converter_source_ready;
wire          main_vfb_conv_converter_source_valid;
wire          main_vfb_conv_source_source_first;
wire          main_vfb_conv_source_source_last;
wire   [31:0] main_vfb_conv_source_source_payload_data;
wire          main_vfb_conv_source_source_ready;
wire          main_vfb_conv_source_source_valid;
wire          main_vfb_dma_enable;
reg    [13:0] main_vfb_dma_fifo_consume = 14'd0;
wire          main_vfb_dma_fifo_do_read;
wire          main_vfb_dma_fifo_fifo_in_first;
wire          main_vfb_dma_fifo_fifo_in_last;
wire   [31:0] main_vfb_dma_fifo_fifo_in_payload_data;
wire          main_vfb_dma_fifo_fifo_out_first;
wire          main_vfb_dma_fifo_fifo_out_last;
wire   [31:0] main_vfb_dma_fifo_fifo_out_payload_data;
reg    [14:0] main_vfb_dma_fifo_level0 = 15'd0;
wire   [14:0] main_vfb_dma_fifo_level1;
reg    [13:0] main_vfb_dma_fifo_produce = 14'd0;
wire   [13:0] main_vfb_dma_fifo_rdport_adr;
wire   [33:0] main_vfb_dma_fifo_rdport_dat_r;
wire          main_vfb_dma_fifo_rdport_re;
wire          main_vfb_dma_fifo_re;
reg           main_vfb_dma_fifo_readable = 1'd0;
reg           main_vfb_dma_fifo_replace = 1'd0;
wire          main_vfb_dma_fifo_sink_first;
wire          main_vfb_dma_fifo_sink_last;
wire   [31:0] main_vfb_dma_fifo_sink_payload_data;
wire          main_vfb_dma_fifo_sink_ready;
wire          main_vfb_dma_fifo_sink_valid;
wire          main_vfb_dma_fifo_source_first;
wire          main_vfb_dma_fifo_source_last;
wire   [31:0] main_vfb_dma_fifo_source_payload_data;
wire          main_vfb_dma_fifo_source_ready;
wire          main_vfb_dma_fifo_source_valid;
wire   [33:0] main_vfb_dma_fifo_syncfifo_din;
wire   [33:0] main_vfb_dma_fifo_syncfifo_dout;
wire          main_vfb_dma_fifo_syncfifo_re;
wire          main_vfb_dma_fifo_syncfifo_readable;
wire          main_vfb_dma_fifo_syncfifo_we;
wire          main_vfb_dma_fifo_syncfifo_writable;
reg    [13:0] main_vfb_dma_fifo_wrport_adr = 14'd0;
wire   [33:0] main_vfb_dma_fifo_wrport_dat_r;
wire   [33:0] main_vfb_dma_fifo_wrport_dat_w;
wire          main_vfb_dma_fifo_wrport_we;
reg    [13:0] main_vfb_dma_res_fifo_consume = 14'd0;
wire          main_vfb_dma_res_fifo_do_read;
wire          main_vfb_dma_res_fifo_fifo_in_first;
wire          main_vfb_dma_res_fifo_fifo_in_last;
wire          main_vfb_dma_res_fifo_fifo_in_payload_dummy;
wire          main_vfb_dma_res_fifo_fifo_out_first;
wire          main_vfb_dma_res_fifo_fifo_out_last;
wire          main_vfb_dma_res_fifo_fifo_out_payload_dummy;
reg    [14:0] main_vfb_dma_res_fifo_level = 15'd0;
reg    [13:0] main_vfb_dma_res_fifo_produce = 14'd0;
wire   [13:0] main_vfb_dma_res_fifo_rdport_adr;
wire    [2:0] main_vfb_dma_res_fifo_rdport_dat_r;
reg           main_vfb_dma_res_fifo_replace = 1'd0;
reg           main_vfb_dma_res_fifo_sink_first = 1'd0;
wire          main_vfb_dma_res_fifo_sink_last;
reg           main_vfb_dma_res_fifo_sink_payload_dummy = 1'd0;
wire          main_vfb_dma_res_fifo_sink_ready;
wire          main_vfb_dma_res_fifo_sink_valid;
wire          main_vfb_dma_res_fifo_source_first;
wire          main_vfb_dma_res_fifo_source_last;
wire          main_vfb_dma_res_fifo_source_payload_dummy;
wire          main_vfb_dma_res_fifo_source_ready;
wire          main_vfb_dma_res_fifo_source_valid;
wire    [2:0] main_vfb_dma_res_fifo_syncfifo_din;
wire    [2:0] main_vfb_dma_res_fifo_syncfifo_dout;
wire          main_vfb_dma_res_fifo_syncfifo_re;
wire          main_vfb_dma_res_fifo_syncfifo_readable;
wire          main_vfb_dma_res_fifo_syncfifo_we;
wire          main_vfb_dma_res_fifo_syncfifo_writable;
reg    [13:0] main_vfb_dma_res_fifo_wrport_adr = 14'd0;
wire    [2:0] main_vfb_dma_res_fifo_wrport_dat_r;
wire    [2:0] main_vfb_dma_res_fifo_wrport_dat_w;
wire          main_vfb_dma_res_fifo_wrport_we;
reg           main_vfb_dma_sink_sink_last = 1'd0;
reg    [22:0] main_vfb_dma_sink_sink_payload_address = 23'd0;
wire          main_vfb_dma_sink_sink_ready;
reg           main_vfb_dma_sink_sink_valid = 1'd0;
wire          main_vfb_dma_source_source_first;
reg           main_vfb_dma_source_source_last = 1'd0;
wire   [31:0] main_vfb_dma_source_source_payload_data;
wire          main_vfb_dma_source_source_ready;
reg           main_vfb_dma_source_source_valid = 1'd0;
reg           main_vfb_first = 1'd0;
reg           main_vfb_first_resetinserter_next_value = 1'd0;
reg           main_vfb_first_resetinserter_next_value_ce = 1'd0;
wire          main_vfb_fsm_reset;
wire   [22:0] main_vfb_litedramdmareader_base;
reg           main_vfb_litedramdmareader_base_re = 1'd0;
reg    [31:0] main_vfb_litedramdmareader_base_storage = 32'd1086324736;
reg           main_vfb_litedramdmareader_done_re = 1'd0;
reg           main_vfb_litedramdmareader_done_status = 1'd0;
wire          main_vfb_litedramdmareader_done_we;
reg           main_vfb_litedramdmareader_enable_re = 1'd0;
reg           main_vfb_litedramdmareader_enable_storage = 1'd0;
wire   [22:0] main_vfb_litedramdmareader_length;
reg           main_vfb_litedramdmareader_length_re = 1'd0;
reg    [31:0] main_vfb_litedramdmareader_length_storage = 32'd1536000;
reg           main_vfb_litedramdmareader_loop_re = 1'd0;
reg           main_vfb_litedramdmareader_loop_storage = 1'd1;
reg    [22:0] main_vfb_litedramdmareader_offset = 23'd0;
reg    [22:0] main_vfb_litedramdmareader_offset_litedramdmareader_next_value = 23'd0;
reg           main_vfb_litedramdmareader_offset_litedramdmareader_next_value_ce = 1'd0;
reg           main_vfb_litedramdmareader_offset_re = 1'd0;
wire   [31:0] main_vfb_litedramdmareader_offset_status;
wire          main_vfb_litedramdmareader_offset_we;
wire          main_vfb_litedramdmareader_reset;
reg           main_vfb_source_first = 1'd0;
reg           main_vfb_source_last = 1'd0;
wire    [7:0] main_vfb_source_payload_b;
reg           main_vfb_source_payload_de = 1'd0;
wire    [7:0] main_vfb_source_payload_g;
reg           main_vfb_source_payload_hsync = 1'd0;
wire    [7:0] main_vfb_source_payload_r;
reg           main_vfb_source_payload_vsync = 1'd0;
wire          main_vfb_source_ready;
reg           main_vfb_source_valid = 1'd0;
wire          main_vfb_underflow;
wire          main_vfb_vtg_sink_first;
wire          main_vfb_vtg_sink_last;
wire          main_vfb_vtg_sink_payload_de;
wire   [11:0] main_vfb_vtg_sink_payload_hcount;
wire   [11:0] main_vfb_vtg_sink_payload_hres;
wire          main_vfb_vtg_sink_payload_hsync;
wire   [11:0] main_vfb_vtg_sink_payload_vcount;
wire   [11:0] main_vfb_vtg_sink_payload_vres;
wire          main_vfb_vtg_sink_payload_vsync;
reg           main_vfb_vtg_sink_ready = 1'd0;
wire          main_vfb_vtg_sink_valid;
wire          main_vtg_enable;
reg           main_vtg_enable_re = 1'd0;
reg           main_vtg_enable_storage = 1'd1;
reg           main_vtg_hactive = 1'd0;
reg           main_vtg_hactive_clockdomainsrenamer_next_value0 = 1'd0;
reg           main_vtg_hactive_clockdomainsrenamer_next_value_ce0 = 1'd0;
wire   [11:0] main_vtg_hres;
reg           main_vtg_hres_re = 1'd0;
reg    [11:0] main_vtg_hres_storage = 12'd800;
wire   [11:0] main_vtg_hscan;
reg           main_vtg_hscan_re = 1'd0;
reg    [11:0] main_vtg_hscan_storage = 12'd1055;
wire   [11:0] main_vtg_hsync_end;
reg           main_vtg_hsync_end_re = 1'd0;
reg    [11:0] main_vtg_hsync_end_storage = 12'd1011;
wire   [11:0] main_vtg_hsync_start;
reg           main_vtg_hsync_start_re = 1'd0;
reg    [11:0] main_vtg_hsync_start_storage = 12'd1010;
wire          main_vtg_reset;
reg           main_vtg_source_first = 1'd0;
reg           main_vtg_source_last = 1'd0;
wire          main_vtg_source_payload_de;
reg    [11:0] main_vtg_source_payload_hcount = 12'd0;
reg    [11:0] main_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 = 12'd0;
reg           main_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 = 1'd0;
reg    [11:0] main_vtg_source_payload_hres = 12'd0;
reg    [11:0] main_vtg_source_payload_hres_clockdomainsrenamer_next_value2 = 12'd0;
reg           main_vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2 = 1'd0;
reg           main_vtg_source_payload_hsync = 1'd0;
reg           main_vtg_source_payload_hsync_clockdomainsrenamer_next_value6 = 1'd0;
reg           main_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 = 1'd0;
reg    [11:0] main_vtg_source_payload_vcount = 12'd0;
reg    [11:0] main_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 = 12'd0;
reg           main_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 = 1'd0;
reg    [11:0] main_vtg_source_payload_vres = 12'd0;
reg    [11:0] main_vtg_source_payload_vres_clockdomainsrenamer_next_value3 = 12'd0;
reg           main_vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3 = 1'd0;
reg           main_vtg_source_payload_vsync = 1'd0;
reg           main_vtg_source_payload_vsync_clockdomainsrenamer_next_value7 = 1'd0;
reg           main_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 = 1'd0;
wire          main_vtg_source_ready;
reg           main_vtg_source_valid = 1'd0;
reg           main_vtg_vactive = 1'd0;
reg           main_vtg_vactive_clockdomainsrenamer_next_value1 = 1'd0;
reg           main_vtg_vactive_clockdomainsrenamer_next_value_ce1 = 1'd0;
wire   [11:0] main_vtg_vres;
reg           main_vtg_vres_re = 1'd0;
reg    [11:0] main_vtg_vres_storage = 12'd480;
wire   [11:0] main_vtg_vscan;
reg           main_vtg_vscan_re = 1'd0;
reg    [11:0] main_vtg_vscan_storage = 12'd524;
wire   [11:0] main_vtg_vsync_end;
reg           main_vtg_vsync_end_re = 1'd0;
reg    [11:0] main_vtg_vsync_end_storage = 12'd503;
wire   [11:0] main_vtg_vsync_start;
reg           main_vtg_vsync_start_re = 1'd0;
reg    [11:0] main_vtg_vsync_start_storage = 12'd502;
reg           main_wb_sdram_ack = 1'd0;
wire   [29:0] main_wb_sdram_adr;
wire    [1:0] main_wb_sdram_bte;
wire    [2:0] main_wb_sdram_cti;
wire          main_wb_sdram_cyc;
reg    [31:0] main_wb_sdram_dat_r = 32'd0;
wire   [31:0] main_wb_sdram_dat_w;
reg           main_wb_sdram_err = 1'd0;
wire    [3:0] main_wb_sdram_sel;
wire          main_wb_sdram_stb;
wire          main_wb_sdram_we;
reg           main_wishbone_bridge_aborted = 1'd0;
reg           main_wishbone_bridge_aborted_fsm_next_value = 1'd0;
reg           main_wishbone_bridge_aborted_fsm_next_value_ce = 1'd0;
reg    [20:0] main_wishbone_bridge_cmd_addr = 21'd0;
reg    [20:0] main_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value1 = 21'd0;
reg           main_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value_ce1 = 1'd0;
reg     [1:0] main_wishbone_bridge_cmd_count = 2'd0;
reg     [1:0] main_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0 = 2'd0;
reg           main_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0 = 1'd0;
wire          main_wishbone_bridge_cmd_last;
wire   [20:0] main_wishbone_bridge_cmd_payload_addr;
wire          main_wishbone_bridge_cmd_payload_we;
reg           main_wishbone_bridge_cmd_ready = 1'd0;
reg           main_wishbone_bridge_cmd_valid = 1'd0;
reg           main_wishbone_bridge_cmd_we = 1'd0;
reg           main_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value2 = 1'd0;
reg           main_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value_ce2 = 1'd0;
wire          main_wishbone_bridge_flush;
reg           main_wishbone_bridge_is_ongoing = 1'd0;
reg     [1:0] main_wishbone_bridge_rdata_converter_converter_demux = 2'd0;
wire          main_wishbone_bridge_rdata_converter_converter_load_part;
wire          main_wishbone_bridge_rdata_converter_converter_sink_first;
wire          main_wishbone_bridge_rdata_converter_converter_sink_last;
wire   [31:0] main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
wire          main_wishbone_bridge_rdata_converter_converter_sink_ready;
wire          main_wishbone_bridge_rdata_converter_converter_sink_valid;
reg           main_wishbone_bridge_rdata_converter_converter_source_first = 1'd0;
reg           main_wishbone_bridge_rdata_converter_converter_source_last = 1'd0;
reg   [127:0] main_wishbone_bridge_rdata_converter_converter_source_payload_data = 128'd0;
reg     [2:0] main_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count = 3'd0;
wire          main_wishbone_bridge_rdata_converter_converter_source_ready;
wire          main_wishbone_bridge_rdata_converter_converter_source_valid;
reg           main_wishbone_bridge_rdata_converter_converter_strobe_all = 1'd0;
wire          main_wishbone_bridge_rdata_converter_sink_first;
wire          main_wishbone_bridge_rdata_converter_sink_last;
wire   [31:0] main_wishbone_bridge_rdata_converter_sink_payload_data;
wire          main_wishbone_bridge_rdata_converter_sink_ready;
wire          main_wishbone_bridge_rdata_converter_sink_valid;
wire          main_wishbone_bridge_rdata_converter_source_first;
wire          main_wishbone_bridge_rdata_converter_source_last;
reg   [127:0] main_wishbone_bridge_rdata_converter_source_payload_data = 128'd0;
wire          main_wishbone_bridge_rdata_converter_source_ready;
wire          main_wishbone_bridge_rdata_converter_source_source_first;
wire          main_wishbone_bridge_rdata_converter_source_source_last;
wire  [127:0] main_wishbone_bridge_rdata_converter_source_source_payload_data;
wire          main_wishbone_bridge_rdata_converter_source_source_ready;
wire          main_wishbone_bridge_rdata_converter_source_source_valid;
wire          main_wishbone_bridge_rdata_converter_source_valid;
wire          main_wishbone_bridge_rdata_first;
wire          main_wishbone_bridge_rdata_last;
wire  [127:0] main_wishbone_bridge_rdata_payload_data;
wire          main_wishbone_bridge_rdata_ready;
wire          main_wishbone_bridge_rdata_valid;
wire          main_wishbone_bridge_wdata_converter_converter_first;
wire          main_wishbone_bridge_wdata_converter_converter_last;
reg     [1:0] main_wishbone_bridge_wdata_converter_converter_mux = 2'd0;
wire          main_wishbone_bridge_wdata_converter_converter_sink_first;
wire          main_wishbone_bridge_wdata_converter_converter_sink_last;
reg   [143:0] main_wishbone_bridge_wdata_converter_converter_sink_payload_data = 144'd0;
wire          main_wishbone_bridge_wdata_converter_converter_sink_ready;
wire          main_wishbone_bridge_wdata_converter_converter_sink_valid;
wire          main_wishbone_bridge_wdata_converter_converter_source_first;
wire          main_wishbone_bridge_wdata_converter_converter_source_last;
reg    [35:0] main_wishbone_bridge_wdata_converter_converter_source_payload_data = 36'd0;
wire          main_wishbone_bridge_wdata_converter_converter_source_payload_valid_token_count;
wire          main_wishbone_bridge_wdata_converter_converter_source_ready;
wire          main_wishbone_bridge_wdata_converter_converter_source_valid;
wire          main_wishbone_bridge_wdata_converter_sink_first;
wire          main_wishbone_bridge_wdata_converter_sink_last;
wire  [127:0] main_wishbone_bridge_wdata_converter_sink_payload_data;
wire   [15:0] main_wishbone_bridge_wdata_converter_sink_payload_we;
wire          main_wishbone_bridge_wdata_converter_sink_ready;
wire          main_wishbone_bridge_wdata_converter_sink_valid;
wire          main_wishbone_bridge_wdata_converter_source_first;
wire          main_wishbone_bridge_wdata_converter_source_last;
wire   [31:0] main_wishbone_bridge_wdata_converter_source_payload_data;
wire    [3:0] main_wishbone_bridge_wdata_converter_source_payload_we;
wire          main_wishbone_bridge_wdata_converter_source_ready;
wire          main_wishbone_bridge_wdata_converter_source_source_first;
wire          main_wishbone_bridge_wdata_converter_source_source_last;
wire   [35:0] main_wishbone_bridge_wdata_converter_source_source_payload_data;
wire          main_wishbone_bridge_wdata_converter_source_source_ready;
wire          main_wishbone_bridge_wdata_converter_source_source_valid;
wire          main_wishbone_bridge_wdata_converter_source_valid;
reg           main_wishbone_bridge_wdata_first = 1'd0;
reg           main_wishbone_bridge_wdata_last = 1'd0;
wire  [127:0] main_wishbone_bridge_wdata_payload_data;
wire   [15:0] main_wishbone_bridge_wdata_payload_we;
wire          main_wishbone_bridge_wdata_ready;
reg           main_wishbone_bridge_wdata_valid = 1'd0;
reg           main_word_clr = 1'd0;
reg           main_word_inc = 1'd0;
reg           main_wr_data_en_d = 1'd0;
reg           main_write_from_slave = 1'd0;
reg     [7:0] miso = 8'd0;
reg     [7:0] miso_data = 8'd0;
reg           miso_latch = 1'd0;
reg           miso_re = 1'd0;
wire    [7:0] miso_status;
wire          miso_we;
wire          mode0;
wire          mode1;
wire          mode2;
wire    [7:0] mosi;
reg           mosi_latch = 1'd0;
reg           mosi_re = 1'd0;
reg     [2:0] mosi_sel = 3'd0;
reg     [7:0] mosi_storage = 8'd0;
wire          por_clk;
reg           por_rst = 1'd0;
reg           re = 1'd0;
wire          sel;
reg     [7:0] self = 8'd0;
wire          start0;
reg           start1 = 1'd0;
reg           status_re = 1'd0;
reg     [1:0] status_status = 2'd0;
wire          status_we;
reg    [15:0] storage = 16'd125;
wire          sys2x_clk;
wire          sys2x_ps_clk;
wire          sys2x_ps_rst;
wire          sys2x_rst;
wire          sys_clk;
wire          sys_rst;
reg           xfer_enable = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_basesoc_reset = (main_basesoc_soc_rst | main_basesoc_cpu_rst);
assign main_vfb_vtg_sink_valid = main_vtg_source_valid;
assign main_vtg_source_ready = main_vfb_vtg_sink_ready;
assign main_vfb_vtg_sink_first = main_vtg_source_first;
assign main_vfb_vtg_sink_last = main_vtg_source_last;
assign main_vfb_vtg_sink_payload_hsync = main_vtg_source_payload_hsync;
assign main_vfb_vtg_sink_payload_vsync = main_vtg_source_payload_vsync;
assign main_vfb_vtg_sink_payload_de = main_vtg_source_payload_de;
assign main_vfb_vtg_sink_payload_hres = main_vtg_source_payload_hres;
assign main_vfb_vtg_sink_payload_vres = main_vtg_source_payload_vres;
assign main_vfb_vtg_sink_payload_hcount = main_vtg_source_payload_hcount;
assign main_vfb_vtg_sink_payload_vcount = main_vtg_source_payload_vcount;
assign main_sink_valid = main_vfb_source_valid;
assign main_vfb_source_ready = main_sink_ready;
assign main_sink_first = main_vfb_source_first;
assign main_sink_last = main_vfb_source_last;
assign main_sink_payload_hsync = main_vfb_source_payload_hsync;
assign main_sink_payload_vsync = main_vfb_source_payload_vsync;
assign main_sink_payload_de = main_vfb_source_payload_de;
assign main_sink_payload_r = main_vfb_source_payload_r;
assign main_sink_payload_g = main_vfb_source_payload_g;
assign main_sink_payload_b = main_vfb_source_payload_b;
always @(*) begin
    main_rst <= 1'd0;
    if (main_basesoc_soc_rst) begin
        main_rst <= 1'd1;
    end
end
assign main_basesoc_bus_error = builder_error;
always @(*) begin
    main_basesoc_interrupt <= 32'd0;
    main_basesoc_interrupt[1] <= main_basesoc_timer_irq;
    main_basesoc_interrupt[0] <= main_basesoc_uart_irq;
end
assign por_clk = clk50;
assign main_por_done = (main_por_count == 1'd0);
assign main_reset = ((~main_por_done) | rst);
assign main_clkin = clk50;
assign sys_clk = main_clkout0;
assign dvi_clk = main_clkout1;
assign cpu_clk = main_clkout2;
assign sys2x_clk = main_clkout3;
assign sys2x_ps_clk = main_clkout4;
assign main_basesoc_socbushandler_interface0_adapted_interface_dat_w = main_basesoc_ibus_dat_w;
assign main_basesoc_ibus_dat_r = main_basesoc_socbushandler_interface0_adapted_interface_dat_r;
assign main_basesoc_socbushandler_interface0_adapted_interface_sel = main_basesoc_ibus_sel;
assign main_basesoc_socbushandler_interface0_adapted_interface_cyc = main_basesoc_ibus_cyc;
assign main_basesoc_socbushandler_interface0_adapted_interface_stb = main_basesoc_ibus_stb;
assign main_basesoc_ibus_ack = main_basesoc_socbushandler_interface0_adapted_interface_ack;
assign main_basesoc_socbushandler_interface0_adapted_interface_we = main_basesoc_ibus_we;
assign main_basesoc_socbushandler_interface0_adapted_interface_cti = main_basesoc_ibus_cti;
assign main_basesoc_socbushandler_interface0_adapted_interface_bte = main_basesoc_ibus_bte;
assign main_basesoc_ibus_err = main_basesoc_socbushandler_interface0_adapted_interface_err;
always @(*) begin
    main_basesoc_socbushandler_interface0_adapted_interface_adr <= 32'd0;
    main_basesoc_socbushandler_interface0_adapted_interface_adr[31:2] <= main_basesoc_ibus_adr;
end
assign main_basesoc_socbushandler_interface1_adapted_interface_dat_w = main_basesoc_dbus_dat_w;
assign main_basesoc_dbus_dat_r = main_basesoc_socbushandler_interface1_adapted_interface_dat_r;
assign main_basesoc_socbushandler_interface1_adapted_interface_sel = main_basesoc_dbus_sel;
assign main_basesoc_socbushandler_interface1_adapted_interface_cyc = main_basesoc_dbus_cyc;
assign main_basesoc_socbushandler_interface1_adapted_interface_stb = main_basesoc_dbus_stb;
assign main_basesoc_dbus_ack = main_basesoc_socbushandler_interface1_adapted_interface_ack;
assign main_basesoc_socbushandler_interface1_adapted_interface_we = main_basesoc_dbus_we;
assign main_basesoc_socbushandler_interface1_adapted_interface_cti = main_basesoc_dbus_cti;
assign main_basesoc_socbushandler_interface1_adapted_interface_bte = main_basesoc_dbus_bte;
assign main_basesoc_dbus_err = main_basesoc_socbushandler_interface1_adapted_interface_err;
always @(*) begin
    main_basesoc_socbushandler_interface1_adapted_interface_adr <= 32'd0;
    main_basesoc_socbushandler_interface1_adapted_interface_adr[31:2] <= main_basesoc_dbus_adr;
end
assign main_wb_sdram_dat_w = main_adapted_interface_adapted_interface_dat_w;
assign main_adapted_interface_adapted_interface_dat_r = main_wb_sdram_dat_r;
assign main_wb_sdram_sel = main_adapted_interface_adapted_interface_sel;
assign main_wb_sdram_cyc = main_adapted_interface_adapted_interface_cyc;
assign main_wb_sdram_stb = main_adapted_interface_adapted_interface_stb;
assign main_adapted_interface_adapted_interface_ack = main_wb_sdram_ack;
assign main_wb_sdram_we = main_adapted_interface_adapted_interface_we;
assign main_wb_sdram_cti = main_adapted_interface_adapted_interface_cti;
assign main_wb_sdram_bte = main_adapted_interface_adapted_interface_bte;
assign main_adapted_interface_adapted_interface_err = main_wb_sdram_err;
assign main_wb_sdram_adr = main_adapted_interface_adapted_interface_adr[31:2];
assign main_basesoc_socbushandler_wishbone2axi0_addr = (main_basesoc_socbushandler_interface0_adapted_interface_adr - 1'd0);
always @(*) begin
    builder_wishbone2axi0_next_state <= 2'd0;
    main_basesoc_socbushandler_interface0_adapted_interface_ack <= 1'd0;
    main_basesoc_socbushandler_interface0_adapted_interface_dat_r <= 32'd0;
    main_basesoc_socbushandler_interface0_adapted_interface_err <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_ar_payload_addr <= 32'd0;
    main_basesoc_socbushandler_wishbone2axi0_ar_valid <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_aw_payload_addr <= 32'd0;
    main_basesoc_socbushandler_wishbone2axi0_aw_valid <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_b_ready <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value1 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_r_ready <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi0_w_payload_data <= 32'd0;
    main_basesoc_socbushandler_wishbone2axi0_w_payload_strb <= 4'd0;
    main_basesoc_socbushandler_wishbone2axi0_w_valid <= 1'd0;
    builder_wishbone2axi0_next_state <= builder_wishbone2axi0_state;
    case (builder_wishbone2axi0_state)
        1'd1: begin
            main_basesoc_socbushandler_wishbone2axi0_aw_valid <= (~main_basesoc_socbushandler_wishbone2axi0_cmd_done);
            main_basesoc_socbushandler_wishbone2axi0_aw_payload_addr[31:0] <= main_basesoc_socbushandler_wishbone2axi0_addr;
            if ((main_basesoc_socbushandler_wishbone2axi0_aw_valid & main_basesoc_socbushandler_wishbone2axi0_aw_ready)) begin
                main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 <= 1'd1;
                main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 <= 1'd1;
            end
            main_basesoc_socbushandler_wishbone2axi0_w_valid <= (~main_basesoc_socbushandler_wishbone2axi0_data_done);
            main_basesoc_socbushandler_wishbone2axi0_w_payload_data <= main_basesoc_socbushandler_interface0_adapted_interface_dat_w;
            main_basesoc_socbushandler_wishbone2axi0_w_payload_strb <= main_basesoc_socbushandler_interface0_adapted_interface_sel;
            if ((main_basesoc_socbushandler_wishbone2axi0_w_valid & main_basesoc_socbushandler_wishbone2axi0_w_ready)) begin
                main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value1 <= 1'd1;
                main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1 <= 1'd1;
            end
            main_basesoc_socbushandler_wishbone2axi0_b_ready <= (main_basesoc_socbushandler_wishbone2axi0_cmd_done & main_basesoc_socbushandler_wishbone2axi0_data_done);
            if ((main_basesoc_socbushandler_wishbone2axi0_b_valid & main_basesoc_socbushandler_wishbone2axi0_b_ready)) begin
                if ((main_basesoc_socbushandler_wishbone2axi0_b_payload_resp == 1'd0)) begin
                    main_basesoc_socbushandler_interface0_adapted_interface_ack <= 1'd1;
                    builder_wishbone2axi0_next_state <= 1'd0;
                end else begin
                    builder_wishbone2axi0_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            main_basesoc_socbushandler_wishbone2axi0_ar_valid <= (~main_basesoc_socbushandler_wishbone2axi0_cmd_done);
            main_basesoc_socbushandler_wishbone2axi0_ar_payload_addr[31:0] <= main_basesoc_socbushandler_wishbone2axi0_addr;
            if ((main_basesoc_socbushandler_wishbone2axi0_ar_valid & main_basesoc_socbushandler_wishbone2axi0_ar_ready)) begin
                main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 <= 1'd1;
                main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 <= 1'd1;
            end
            main_basesoc_socbushandler_wishbone2axi0_r_ready <= main_basesoc_socbushandler_wishbone2axi0_cmd_done;
            if ((main_basesoc_socbushandler_wishbone2axi0_r_valid & main_basesoc_socbushandler_wishbone2axi0_r_ready)) begin
                if ((main_basesoc_socbushandler_wishbone2axi0_r_payload_resp == 1'd0)) begin
                    main_basesoc_socbushandler_interface0_adapted_interface_dat_r <= main_basesoc_socbushandler_wishbone2axi0_r_payload_data;
                    main_basesoc_socbushandler_interface0_adapted_interface_ack <= 1'd1;
                    builder_wishbone2axi0_next_state <= 1'd0;
                end else begin
                    builder_wishbone2axi0_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            main_basesoc_socbushandler_interface0_adapted_interface_ack <= 1'd1;
            main_basesoc_socbushandler_interface0_adapted_interface_err <= 1'd1;
            builder_wishbone2axi0_next_state <= 1'd0;
        end
        default: begin
            main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value0 <= 1'd0;
            main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0 <= 1'd1;
            main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value1 <= 1'd0;
            main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1 <= 1'd1;
            if ((main_basesoc_socbushandler_interface0_adapted_interface_stb & main_basesoc_socbushandler_interface0_adapted_interface_cyc)) begin
                if (main_basesoc_socbushandler_interface0_adapted_interface_we) begin
                    builder_wishbone2axi0_next_state <= 1'd1;
                end else begin
                    builder_wishbone2axi0_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign main_basesoc_socbushandler_axiinterface0_aw_valid = main_basesoc_socbushandler_wishbone2axi0_aw_valid;
assign main_basesoc_socbushandler_wishbone2axi0_aw_ready = main_basesoc_socbushandler_axiinterface0_aw_ready;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_addr = main_basesoc_socbushandler_wishbone2axi0_aw_payload_addr;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_burst = 1'd1;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_len = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_size = 2'd2;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_lock = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_prot = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_cache = 2'd3;
assign main_basesoc_socbushandler_axiinterface0_aw_payload_qos = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_aw_param_id = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_w_valid = main_basesoc_socbushandler_wishbone2axi0_w_valid;
assign main_basesoc_socbushandler_wishbone2axi0_w_ready = main_basesoc_socbushandler_axiinterface0_w_ready;
assign main_basesoc_socbushandler_axiinterface0_w_payload_data = main_basesoc_socbushandler_wishbone2axi0_w_payload_data;
assign main_basesoc_socbushandler_axiinterface0_w_payload_strb = main_basesoc_socbushandler_wishbone2axi0_w_payload_strb;
assign main_basesoc_socbushandler_axiinterface0_w_last = 1'd1;
assign main_basesoc_socbushandler_wishbone2axi0_b_valid = main_basesoc_socbushandler_axiinterface0_b_valid;
assign main_basesoc_socbushandler_wishbone2axi0_b_payload_resp = main_basesoc_socbushandler_axiinterface0_b_payload_resp;
assign main_basesoc_socbushandler_axiinterface0_b_ready = main_basesoc_socbushandler_wishbone2axi0_b_ready;
assign main_basesoc_socbushandler_axiinterface0_ar_valid = main_basesoc_socbushandler_wishbone2axi0_ar_valid;
assign main_basesoc_socbushandler_wishbone2axi0_ar_ready = main_basesoc_socbushandler_axiinterface0_ar_ready;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_addr = main_basesoc_socbushandler_wishbone2axi0_ar_payload_addr;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_burst = 1'd1;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_len = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_size = 2'd2;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_lock = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_prot = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_cache = 2'd3;
assign main_basesoc_socbushandler_axiinterface0_ar_payload_qos = 1'd0;
assign main_basesoc_socbushandler_axiinterface0_ar_param_id = 1'd0;
assign main_basesoc_socbushandler_wishbone2axi0_r_valid = main_basesoc_socbushandler_axiinterface0_r_valid;
assign main_basesoc_socbushandler_wishbone2axi0_r_payload_resp = main_basesoc_socbushandler_axiinterface0_r_payload_resp;
assign main_basesoc_socbushandler_wishbone2axi0_r_payload_data = main_basesoc_socbushandler_axiinterface0_r_payload_data;
assign main_basesoc_socbushandler_axiinterface0_r_ready = main_basesoc_socbushandler_wishbone2axi0_r_ready;
assign main_basesoc_socbushandler_wishbone2axi1_addr = (main_basesoc_socbushandler_interface1_adapted_interface_adr - 1'd0);
always @(*) begin
    builder_wishbone2axi1_next_state <= 2'd0;
    main_basesoc_socbushandler_interface1_adapted_interface_ack <= 1'd0;
    main_basesoc_socbushandler_interface1_adapted_interface_dat_r <= 32'd0;
    main_basesoc_socbushandler_interface1_adapted_interface_err <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_ar_payload_addr <= 32'd0;
    main_basesoc_socbushandler_wishbone2axi1_ar_valid <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_aw_payload_addr <= 32'd0;
    main_basesoc_socbushandler_wishbone2axi1_aw_valid <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_b_ready <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value1 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1 <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_r_ready <= 1'd0;
    main_basesoc_socbushandler_wishbone2axi1_w_payload_data <= 32'd0;
    main_basesoc_socbushandler_wishbone2axi1_w_payload_strb <= 4'd0;
    main_basesoc_socbushandler_wishbone2axi1_w_valid <= 1'd0;
    builder_wishbone2axi1_next_state <= builder_wishbone2axi1_state;
    case (builder_wishbone2axi1_state)
        1'd1: begin
            main_basesoc_socbushandler_wishbone2axi1_aw_valid <= (~main_basesoc_socbushandler_wishbone2axi1_cmd_done);
            main_basesoc_socbushandler_wishbone2axi1_aw_payload_addr[31:0] <= main_basesoc_socbushandler_wishbone2axi1_addr;
            if ((main_basesoc_socbushandler_wishbone2axi1_aw_valid & main_basesoc_socbushandler_wishbone2axi1_aw_ready)) begin
                main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 <= 1'd1;
                main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 <= 1'd1;
            end
            main_basesoc_socbushandler_wishbone2axi1_w_valid <= (~main_basesoc_socbushandler_wishbone2axi1_data_done);
            main_basesoc_socbushandler_wishbone2axi1_w_payload_data <= main_basesoc_socbushandler_interface1_adapted_interface_dat_w;
            main_basesoc_socbushandler_wishbone2axi1_w_payload_strb <= main_basesoc_socbushandler_interface1_adapted_interface_sel;
            if ((main_basesoc_socbushandler_wishbone2axi1_w_valid & main_basesoc_socbushandler_wishbone2axi1_w_ready)) begin
                main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value1 <= 1'd1;
                main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1 <= 1'd1;
            end
            main_basesoc_socbushandler_wishbone2axi1_b_ready <= (main_basesoc_socbushandler_wishbone2axi1_cmd_done & main_basesoc_socbushandler_wishbone2axi1_data_done);
            if ((main_basesoc_socbushandler_wishbone2axi1_b_valid & main_basesoc_socbushandler_wishbone2axi1_b_ready)) begin
                if ((main_basesoc_socbushandler_wishbone2axi1_b_payload_resp == 1'd0)) begin
                    main_basesoc_socbushandler_interface1_adapted_interface_ack <= 1'd1;
                    builder_wishbone2axi1_next_state <= 1'd0;
                end else begin
                    builder_wishbone2axi1_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            main_basesoc_socbushandler_wishbone2axi1_ar_valid <= (~main_basesoc_socbushandler_wishbone2axi1_cmd_done);
            main_basesoc_socbushandler_wishbone2axi1_ar_payload_addr[31:0] <= main_basesoc_socbushandler_wishbone2axi1_addr;
            if ((main_basesoc_socbushandler_wishbone2axi1_ar_valid & main_basesoc_socbushandler_wishbone2axi1_ar_ready)) begin
                main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 <= 1'd1;
                main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 <= 1'd1;
            end
            main_basesoc_socbushandler_wishbone2axi1_r_ready <= main_basesoc_socbushandler_wishbone2axi1_cmd_done;
            if ((main_basesoc_socbushandler_wishbone2axi1_r_valid & main_basesoc_socbushandler_wishbone2axi1_r_ready)) begin
                if ((main_basesoc_socbushandler_wishbone2axi1_r_payload_resp == 1'd0)) begin
                    main_basesoc_socbushandler_interface1_adapted_interface_dat_r <= main_basesoc_socbushandler_wishbone2axi1_r_payload_data;
                    main_basesoc_socbushandler_interface1_adapted_interface_ack <= 1'd1;
                    builder_wishbone2axi1_next_state <= 1'd0;
                end else begin
                    builder_wishbone2axi1_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            main_basesoc_socbushandler_interface1_adapted_interface_ack <= 1'd1;
            main_basesoc_socbushandler_interface1_adapted_interface_err <= 1'd1;
            builder_wishbone2axi1_next_state <= 1'd0;
        end
        default: begin
            main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value0 <= 1'd0;
            main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0 <= 1'd1;
            main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value1 <= 1'd0;
            main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1 <= 1'd1;
            if ((main_basesoc_socbushandler_interface1_adapted_interface_stb & main_basesoc_socbushandler_interface1_adapted_interface_cyc)) begin
                if (main_basesoc_socbushandler_interface1_adapted_interface_we) begin
                    builder_wishbone2axi1_next_state <= 1'd1;
                end else begin
                    builder_wishbone2axi1_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign main_basesoc_socbushandler_axiinterface1_aw_valid = main_basesoc_socbushandler_wishbone2axi1_aw_valid;
assign main_basesoc_socbushandler_wishbone2axi1_aw_ready = main_basesoc_socbushandler_axiinterface1_aw_ready;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_addr = main_basesoc_socbushandler_wishbone2axi1_aw_payload_addr;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_burst = 1'd1;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_len = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_size = 2'd2;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_lock = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_prot = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_cache = 2'd3;
assign main_basesoc_socbushandler_axiinterface1_aw_payload_qos = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_aw_param_id = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_w_valid = main_basesoc_socbushandler_wishbone2axi1_w_valid;
assign main_basesoc_socbushandler_wishbone2axi1_w_ready = main_basesoc_socbushandler_axiinterface1_w_ready;
assign main_basesoc_socbushandler_axiinterface1_w_payload_data = main_basesoc_socbushandler_wishbone2axi1_w_payload_data;
assign main_basesoc_socbushandler_axiinterface1_w_payload_strb = main_basesoc_socbushandler_wishbone2axi1_w_payload_strb;
assign main_basesoc_socbushandler_axiinterface1_w_last = 1'd1;
assign main_basesoc_socbushandler_wishbone2axi1_b_valid = main_basesoc_socbushandler_axiinterface1_b_valid;
assign main_basesoc_socbushandler_wishbone2axi1_b_payload_resp = main_basesoc_socbushandler_axiinterface1_b_payload_resp;
assign main_basesoc_socbushandler_axiinterface1_b_ready = main_basesoc_socbushandler_wishbone2axi1_b_ready;
assign main_basesoc_socbushandler_axiinterface1_ar_valid = main_basesoc_socbushandler_wishbone2axi1_ar_valid;
assign main_basesoc_socbushandler_wishbone2axi1_ar_ready = main_basesoc_socbushandler_axiinterface1_ar_ready;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_addr = main_basesoc_socbushandler_wishbone2axi1_ar_payload_addr;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_burst = 1'd1;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_len = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_size = 2'd2;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_lock = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_prot = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_cache = 2'd3;
assign main_basesoc_socbushandler_axiinterface1_ar_payload_qos = 1'd0;
assign main_basesoc_socbushandler_axiinterface1_ar_param_id = 1'd0;
assign main_basesoc_socbushandler_wishbone2axi1_r_valid = main_basesoc_socbushandler_axiinterface1_r_valid;
assign main_basesoc_socbushandler_wishbone2axi1_r_payload_resp = main_basesoc_socbushandler_axiinterface1_r_payload_resp;
assign main_basesoc_socbushandler_wishbone2axi1_r_payload_data = main_basesoc_socbushandler_axiinterface1_r_payload_data;
assign main_basesoc_socbushandler_axiinterface1_r_ready = main_basesoc_socbushandler_wishbone2axi1_r_ready;
assign main_basesoc_basesoc_socbushandler_sink_sink_valid = main_basesoc_basesoc_socbushandler_ax_burst_valid;
assign main_basesoc_basesoc_socbushandler_ax_burst_ready = main_basesoc_basesoc_socbushandler_sink_sink_ready;
assign main_basesoc_basesoc_socbushandler_sink_sink_first = main_basesoc_basesoc_socbushandler_ax_burst_first;
assign main_basesoc_basesoc_socbushandler_sink_sink_last = main_basesoc_basesoc_socbushandler_ax_burst_last;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_addr = main_basesoc_basesoc_socbushandler_ax_burst_payload_addr;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_burst = main_basesoc_basesoc_socbushandler_ax_burst_payload_burst;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_len = main_basesoc_basesoc_socbushandler_ax_burst_payload_len;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_size = main_basesoc_basesoc_socbushandler_ax_burst_payload_size;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_lock = main_basesoc_basesoc_socbushandler_ax_burst_payload_lock;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_prot = main_basesoc_basesoc_socbushandler_ax_burst_payload_prot;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_cache = main_basesoc_basesoc_socbushandler_ax_burst_payload_cache;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_qos = main_basesoc_basesoc_socbushandler_ax_burst_payload_qos;
assign main_basesoc_basesoc_socbushandler_sink_sink_payload_region = main_basesoc_basesoc_socbushandler_ax_burst_payload_region;
assign main_basesoc_basesoc_socbushandler_sink_sink_param_id = main_basesoc_basesoc_socbushandler_ax_burst_param_id;
assign main_basesoc_basesoc_socbushandler_sink_sink_param_dest = main_basesoc_basesoc_socbushandler_ax_burst_param_dest;
assign main_basesoc_basesoc_socbushandler_sink_sink_param_user = main_basesoc_basesoc_socbushandler_ax_burst_param_user;
assign main_basesoc_basesoc_ram_bus_b_ready = 1'd1;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_ready = ((~main_basesoc_basesoc_socbushandler_pipe_valid_source_valid) | main_basesoc_basesoc_socbushandler_pipe_valid_source_ready);
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_valid = main_basesoc_basesoc_socbushandler_sink_sink_valid;
assign main_basesoc_basesoc_socbushandler_sink_sink_ready = main_basesoc_basesoc_socbushandler_pipe_valid_sink_ready;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_first = main_basesoc_basesoc_socbushandler_sink_sink_first;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_last = main_basesoc_basesoc_socbushandler_sink_sink_last;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_addr = main_basesoc_basesoc_socbushandler_sink_sink_payload_addr;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_burst = main_basesoc_basesoc_socbushandler_sink_sink_payload_burst;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_len = main_basesoc_basesoc_socbushandler_sink_sink_payload_len;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_size = main_basesoc_basesoc_socbushandler_sink_sink_payload_size;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_lock = main_basesoc_basesoc_socbushandler_sink_sink_payload_lock;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_prot = main_basesoc_basesoc_socbushandler_sink_sink_payload_prot;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_cache = main_basesoc_basesoc_socbushandler_sink_sink_payload_cache;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_qos = main_basesoc_basesoc_socbushandler_sink_sink_payload_qos;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_region = main_basesoc_basesoc_socbushandler_sink_sink_payload_region;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_id = main_basesoc_basesoc_socbushandler_sink_sink_param_id;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_dest = main_basesoc_basesoc_socbushandler_sink_sink_param_dest;
assign main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_user = main_basesoc_basesoc_socbushandler_sink_sink_param_user;
assign main_basesoc_basesoc_socbushandler_source_source_valid = main_basesoc_basesoc_socbushandler_pipe_valid_source_valid;
assign main_basesoc_basesoc_socbushandler_pipe_valid_source_ready = main_basesoc_basesoc_socbushandler_source_source_ready;
assign main_basesoc_basesoc_socbushandler_source_source_first = main_basesoc_basesoc_socbushandler_pipe_valid_source_first;
assign main_basesoc_basesoc_socbushandler_source_source_last = main_basesoc_basesoc_socbushandler_pipe_valid_source_last;
assign main_basesoc_basesoc_socbushandler_source_source_payload_addr = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_addr;
assign main_basesoc_basesoc_socbushandler_source_source_payload_burst = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_burst;
assign main_basesoc_basesoc_socbushandler_source_source_payload_len = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_len;
assign main_basesoc_basesoc_socbushandler_source_source_payload_size = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_size;
assign main_basesoc_basesoc_socbushandler_source_source_payload_lock = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_lock;
assign main_basesoc_basesoc_socbushandler_source_source_payload_prot = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_prot;
assign main_basesoc_basesoc_socbushandler_source_source_payload_cache = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_cache;
assign main_basesoc_basesoc_socbushandler_source_source_payload_qos = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_qos;
assign main_basesoc_basesoc_socbushandler_source_source_payload_region = main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_region;
assign main_basesoc_basesoc_socbushandler_source_source_param_id = main_basesoc_basesoc_socbushandler_pipe_valid_source_param_id;
assign main_basesoc_basesoc_socbushandler_source_source_param_dest = main_basesoc_basesoc_socbushandler_pipe_valid_source_param_dest;
assign main_basesoc_basesoc_socbushandler_source_source_param_user = main_basesoc_basesoc_socbushandler_pipe_valid_source_param_user;
assign main_basesoc_basesoc_socbushandler_beat_size = (1'd1 <<< main_basesoc_basesoc_socbushandler_source_source_payload_size);
assign main_basesoc_basesoc_socbushandler_beat_wrap = (main_basesoc_basesoc_socbushandler_source_source_payload_len <<< main_basesoc_basesoc_socbushandler_source_source_payload_size);
assign main_basesoc_basesoc_socbushandler_ax_beat_valid = (main_basesoc_basesoc_socbushandler_source_source_valid | (~main_basesoc_basesoc_socbushandler_ax_beat_first));
assign main_basesoc_basesoc_socbushandler_ax_beat_first = (main_basesoc_basesoc_socbushandler_beat_count == 1'd0);
assign main_basesoc_basesoc_socbushandler_ax_beat_last = (main_basesoc_basesoc_socbushandler_beat_count == main_basesoc_basesoc_socbushandler_source_source_payload_len);
assign main_basesoc_basesoc_socbushandler_ax_beat_payload_addr = ($signed({1'd0, main_basesoc_basesoc_socbushandler_source_source_payload_addr}) + main_basesoc_basesoc_socbushandler_beat_offset);
assign main_basesoc_basesoc_socbushandler_ax_beat_param_id = main_basesoc_basesoc_socbushandler_source_source_param_id;
always @(*) begin
    main_basesoc_basesoc_socbushandler_source_source_ready <= 1'd0;
    if (main_basesoc_basesoc_socbushandler_ax_beat_ready) begin
        if (main_basesoc_basesoc_socbushandler_ax_beat_last) begin
            main_basesoc_basesoc_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    builder_axi2axilite0_next_state <= 2'd0;
    main_basesoc_basesoc_ram_bus_ar_payload_addr <= 32'd0;
    main_basesoc_basesoc_ram_bus_ar_valid <= 1'd0;
    main_basesoc_basesoc_ram_bus_aw_payload_addr <= 32'd0;
    main_basesoc_basesoc_ram_bus_aw_valid <= 1'd0;
    main_basesoc_basesoc_ram_bus_r_ready <= 1'd0;
    main_basesoc_basesoc_ram_bus_w_payload_data <= 32'd0;
    main_basesoc_basesoc_ram_bus_w_payload_strb <= 4'd0;
    main_basesoc_basesoc_ram_bus_w_valid <= 1'd0;
    main_basesoc_basesoc_socbushandler_ar_ready <= 1'd0;
    main_basesoc_basesoc_socbushandler_aw_ready <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_first <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_last <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_param_dest <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_param_id <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_param_user <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_addr <= 32'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_burst <= 2'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_cache <= 4'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_len <= 8'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_lock <= 1'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_prot <= 3'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_qos <= 4'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_region <= 4'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_payload_size <= 3'd0;
    main_basesoc_basesoc_socbushandler_ax_burst_valid <= 1'd0;
    main_basesoc_basesoc_socbushandler_b_param_id <= 1'd0;
    main_basesoc_basesoc_socbushandler_b_payload_resp <= 2'd0;
    main_basesoc_basesoc_socbushandler_b_valid <= 1'd0;
    main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd0;
    main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd0;
    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd0;
    main_basesoc_basesoc_socbushandler_r_last <= 1'd0;
    main_basesoc_basesoc_socbushandler_r_param_id <= 1'd0;
    main_basesoc_basesoc_socbushandler_r_payload_data <= 32'd0;
    main_basesoc_basesoc_socbushandler_r_payload_resp <= 2'd0;
    main_basesoc_basesoc_socbushandler_r_valid <= 1'd0;
    main_basesoc_basesoc_socbushandler_w_ready <= 1'd0;
    builder_axi2axilite0_next_state <= builder_axi2axilite0_state;
    case (builder_axi2axilite0_state)
        1'd1: begin
            main_basesoc_basesoc_ram_bus_ar_valid <= (main_basesoc_basesoc_socbushandler_ax_beat_valid & (~main_basesoc_basesoc_socbushandler_cmd_done));
            main_basesoc_basesoc_ram_bus_ar_payload_addr <= main_basesoc_basesoc_socbushandler_ax_beat_payload_addr;
            main_basesoc_basesoc_socbushandler_ax_beat_ready <= (main_basesoc_basesoc_ram_bus_ar_ready & (~main_basesoc_basesoc_socbushandler_cmd_done));
            if ((main_basesoc_basesoc_socbushandler_ax_beat_valid & main_basesoc_basesoc_socbushandler_ax_beat_last)) begin
                if (main_basesoc_basesoc_ram_bus_ar_ready) begin
                    main_basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd1;
                    main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
                end
            end
            main_basesoc_basesoc_socbushandler_r_valid <= main_basesoc_basesoc_ram_bus_r_valid;
            main_basesoc_basesoc_socbushandler_r_last <= main_basesoc_basesoc_socbushandler_cmd_done;
            main_basesoc_basesoc_socbushandler_r_payload_resp <= 1'd0;
            main_basesoc_basesoc_socbushandler_r_param_id <= main_basesoc_basesoc_socbushandler_ax_beat_param_id;
            main_basesoc_basesoc_socbushandler_r_payload_data <= main_basesoc_basesoc_ram_bus_r_payload_data;
            main_basesoc_basesoc_ram_bus_r_ready <= main_basesoc_basesoc_socbushandler_r_ready;
            if (((main_basesoc_basesoc_socbushandler_r_valid & main_basesoc_basesoc_socbushandler_r_last) & main_basesoc_basesoc_socbushandler_r_ready)) begin
                main_basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite0_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_basesoc_basesoc_ram_bus_aw_valid <= (main_basesoc_basesoc_socbushandler_ax_beat_valid & (~main_basesoc_basesoc_socbushandler_cmd_done));
            main_basesoc_basesoc_ram_bus_aw_payload_addr <= main_basesoc_basesoc_socbushandler_ax_beat_payload_addr;
            main_basesoc_basesoc_socbushandler_ax_beat_ready <= (main_basesoc_basesoc_ram_bus_aw_ready & (~main_basesoc_basesoc_socbushandler_cmd_done));
            if ((main_basesoc_basesoc_socbushandler_ax_beat_valid & main_basesoc_basesoc_socbushandler_ax_beat_last)) begin
                if (main_basesoc_basesoc_ram_bus_aw_ready) begin
                    main_basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd1;
                    main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
                end
            end
            main_basesoc_basesoc_ram_bus_w_valid <= main_basesoc_basesoc_socbushandler_w_valid;
            main_basesoc_basesoc_ram_bus_w_payload_data <= main_basesoc_basesoc_socbushandler_w_payload_data;
            main_basesoc_basesoc_ram_bus_w_payload_strb <= main_basesoc_basesoc_socbushandler_w_payload_strb;
            main_basesoc_basesoc_socbushandler_w_ready <= main_basesoc_basesoc_ram_bus_w_ready;
            if (((main_basesoc_basesoc_socbushandler_w_valid & main_basesoc_basesoc_socbushandler_w_last) & main_basesoc_basesoc_socbushandler_w_ready)) begin
                builder_axi2axilite0_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_basesoc_basesoc_socbushandler_b_valid <= 1'd1;
            main_basesoc_basesoc_socbushandler_b_payload_resp <= 1'd0;
            main_basesoc_basesoc_socbushandler_b_param_id <= main_basesoc_basesoc_socbushandler_ax_beat_param_id;
            if (main_basesoc_basesoc_socbushandler_b_ready) begin
                main_basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite0_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd0;
            main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
            if ((main_basesoc_basesoc_socbushandler_ar_valid & main_basesoc_basesoc_socbushandler_aw_valid)) begin
                if (main_basesoc_basesoc_socbushandler_last_ar_aw_n) begin
                    main_basesoc_basesoc_socbushandler_ax_burst_valid <= main_basesoc_basesoc_socbushandler_aw_valid;
                    main_basesoc_basesoc_socbushandler_aw_ready <= main_basesoc_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_basesoc_socbushandler_ax_burst_first <= main_basesoc_basesoc_socbushandler_aw_first;
                    main_basesoc_basesoc_socbushandler_ax_burst_last <= main_basesoc_basesoc_socbushandler_aw_last;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_basesoc_socbushandler_aw_payload_addr;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_basesoc_socbushandler_aw_payload_burst;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_basesoc_socbushandler_aw_payload_len;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_basesoc_socbushandler_aw_payload_size;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_basesoc_socbushandler_aw_payload_lock;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_basesoc_socbushandler_aw_payload_prot;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_basesoc_socbushandler_aw_payload_cache;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_basesoc_socbushandler_aw_payload_qos;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_basesoc_socbushandler_aw_payload_region;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_basesoc_socbushandler_aw_param_id;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_basesoc_socbushandler_aw_param_dest;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_basesoc_socbushandler_aw_param_user;
                    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
                    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                    builder_axi2axilite0_next_state <= 2'd2;
                end else begin
                    main_basesoc_basesoc_socbushandler_ax_burst_valid <= main_basesoc_basesoc_socbushandler_ar_valid;
                    main_basesoc_basesoc_socbushandler_ar_ready <= main_basesoc_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_basesoc_socbushandler_ax_burst_first <= main_basesoc_basesoc_socbushandler_ar_first;
                    main_basesoc_basesoc_socbushandler_ax_burst_last <= main_basesoc_basesoc_socbushandler_ar_last;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_basesoc_socbushandler_ar_payload_addr;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_basesoc_socbushandler_ar_payload_burst;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_basesoc_socbushandler_ar_payload_len;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_basesoc_socbushandler_ar_payload_size;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_basesoc_socbushandler_ar_payload_lock;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_basesoc_socbushandler_ar_payload_prot;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_basesoc_socbushandler_ar_payload_cache;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_basesoc_socbushandler_ar_payload_qos;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_basesoc_socbushandler_ar_payload_region;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_basesoc_socbushandler_ar_param_id;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_basesoc_socbushandler_ar_param_dest;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_basesoc_socbushandler_ar_param_user;
                    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd1;
                    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                    builder_axi2axilite0_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_basesoc_socbushandler_ar_valid) begin
                    main_basesoc_basesoc_socbushandler_ax_burst_valid <= main_basesoc_basesoc_socbushandler_ar_valid;
                    main_basesoc_basesoc_socbushandler_ar_ready <= main_basesoc_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_basesoc_socbushandler_ax_burst_first <= main_basesoc_basesoc_socbushandler_ar_first;
                    main_basesoc_basesoc_socbushandler_ax_burst_last <= main_basesoc_basesoc_socbushandler_ar_last;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_basesoc_socbushandler_ar_payload_addr;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_basesoc_socbushandler_ar_payload_burst;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_basesoc_socbushandler_ar_payload_len;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_basesoc_socbushandler_ar_payload_size;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_basesoc_socbushandler_ar_payload_lock;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_basesoc_socbushandler_ar_payload_prot;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_basesoc_socbushandler_ar_payload_cache;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_basesoc_socbushandler_ar_payload_qos;
                    main_basesoc_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_basesoc_socbushandler_ar_payload_region;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_basesoc_socbushandler_ar_param_id;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_basesoc_socbushandler_ar_param_dest;
                    main_basesoc_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_basesoc_socbushandler_ar_param_user;
                    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd1;
                    main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                    builder_axi2axilite0_next_state <= 1'd1;
                end else begin
                    if (main_basesoc_basesoc_socbushandler_aw_valid) begin
                        main_basesoc_basesoc_socbushandler_ax_burst_valid <= main_basesoc_basesoc_socbushandler_aw_valid;
                        main_basesoc_basesoc_socbushandler_aw_ready <= main_basesoc_basesoc_socbushandler_ax_burst_ready;
                        main_basesoc_basesoc_socbushandler_ax_burst_first <= main_basesoc_basesoc_socbushandler_aw_first;
                        main_basesoc_basesoc_socbushandler_ax_burst_last <= main_basesoc_basesoc_socbushandler_aw_last;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_basesoc_socbushandler_aw_payload_addr;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_basesoc_socbushandler_aw_payload_burst;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_basesoc_socbushandler_aw_payload_len;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_basesoc_socbushandler_aw_payload_size;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_basesoc_socbushandler_aw_payload_lock;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_basesoc_socbushandler_aw_payload_prot;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_basesoc_socbushandler_aw_payload_cache;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_basesoc_socbushandler_aw_payload_qos;
                        main_basesoc_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_basesoc_socbushandler_aw_payload_region;
                        main_basesoc_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_basesoc_socbushandler_aw_param_id;
                        main_basesoc_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_basesoc_socbushandler_aw_param_dest;
                        main_basesoc_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_basesoc_socbushandler_aw_param_user;
                        main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
                        main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                        builder_axi2axilite0_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign main_basesoc_socbushandler_sink_sink_valid = main_basesoc_socbushandler_ax_burst_valid;
assign main_basesoc_socbushandler_ax_burst_ready = main_basesoc_socbushandler_sink_sink_ready;
assign main_basesoc_socbushandler_sink_sink_first = main_basesoc_socbushandler_ax_burst_first;
assign main_basesoc_socbushandler_sink_sink_last = main_basesoc_socbushandler_ax_burst_last;
assign main_basesoc_socbushandler_sink_sink_payload_addr = main_basesoc_socbushandler_ax_burst_payload_addr;
assign main_basesoc_socbushandler_sink_sink_payload_burst = main_basesoc_socbushandler_ax_burst_payload_burst;
assign main_basesoc_socbushandler_sink_sink_payload_len = main_basesoc_socbushandler_ax_burst_payload_len;
assign main_basesoc_socbushandler_sink_sink_payload_size = main_basesoc_socbushandler_ax_burst_payload_size;
assign main_basesoc_socbushandler_sink_sink_payload_lock = main_basesoc_socbushandler_ax_burst_payload_lock;
assign main_basesoc_socbushandler_sink_sink_payload_prot = main_basesoc_socbushandler_ax_burst_payload_prot;
assign main_basesoc_socbushandler_sink_sink_payload_cache = main_basesoc_socbushandler_ax_burst_payload_cache;
assign main_basesoc_socbushandler_sink_sink_payload_qos = main_basesoc_socbushandler_ax_burst_payload_qos;
assign main_basesoc_socbushandler_sink_sink_payload_region = main_basesoc_socbushandler_ax_burst_payload_region;
assign main_basesoc_socbushandler_sink_sink_param_id = main_basesoc_socbushandler_ax_burst_param_id;
assign main_basesoc_socbushandler_sink_sink_param_dest = main_basesoc_socbushandler_ax_burst_param_dest;
assign main_basesoc_socbushandler_sink_sink_param_user = main_basesoc_socbushandler_ax_burst_param_user;
assign main_basesoc_ram_bus_b_ready = 1'd1;
assign main_basesoc_socbushandler_pipe_valid_sink_ready = ((~main_basesoc_socbushandler_pipe_valid_source_valid) | main_basesoc_socbushandler_pipe_valid_source_ready);
assign main_basesoc_socbushandler_pipe_valid_sink_valid = main_basesoc_socbushandler_sink_sink_valid;
assign main_basesoc_socbushandler_sink_sink_ready = main_basesoc_socbushandler_pipe_valid_sink_ready;
assign main_basesoc_socbushandler_pipe_valid_sink_first = main_basesoc_socbushandler_sink_sink_first;
assign main_basesoc_socbushandler_pipe_valid_sink_last = main_basesoc_socbushandler_sink_sink_last;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_addr = main_basesoc_socbushandler_sink_sink_payload_addr;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_burst = main_basesoc_socbushandler_sink_sink_payload_burst;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_len = main_basesoc_socbushandler_sink_sink_payload_len;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_size = main_basesoc_socbushandler_sink_sink_payload_size;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_lock = main_basesoc_socbushandler_sink_sink_payload_lock;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_prot = main_basesoc_socbushandler_sink_sink_payload_prot;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_cache = main_basesoc_socbushandler_sink_sink_payload_cache;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_qos = main_basesoc_socbushandler_sink_sink_payload_qos;
assign main_basesoc_socbushandler_pipe_valid_sink_payload_region = main_basesoc_socbushandler_sink_sink_payload_region;
assign main_basesoc_socbushandler_pipe_valid_sink_param_id = main_basesoc_socbushandler_sink_sink_param_id;
assign main_basesoc_socbushandler_pipe_valid_sink_param_dest = main_basesoc_socbushandler_sink_sink_param_dest;
assign main_basesoc_socbushandler_pipe_valid_sink_param_user = main_basesoc_socbushandler_sink_sink_param_user;
assign main_basesoc_socbushandler_source_source_valid = main_basesoc_socbushandler_pipe_valid_source_valid;
assign main_basesoc_socbushandler_pipe_valid_source_ready = main_basesoc_socbushandler_source_source_ready;
assign main_basesoc_socbushandler_source_source_first = main_basesoc_socbushandler_pipe_valid_source_first;
assign main_basesoc_socbushandler_source_source_last = main_basesoc_socbushandler_pipe_valid_source_last;
assign main_basesoc_socbushandler_source_source_payload_addr = main_basesoc_socbushandler_pipe_valid_source_payload_addr;
assign main_basesoc_socbushandler_source_source_payload_burst = main_basesoc_socbushandler_pipe_valid_source_payload_burst;
assign main_basesoc_socbushandler_source_source_payload_len = main_basesoc_socbushandler_pipe_valid_source_payload_len;
assign main_basesoc_socbushandler_source_source_payload_size = main_basesoc_socbushandler_pipe_valid_source_payload_size;
assign main_basesoc_socbushandler_source_source_payload_lock = main_basesoc_socbushandler_pipe_valid_source_payload_lock;
assign main_basesoc_socbushandler_source_source_payload_prot = main_basesoc_socbushandler_pipe_valid_source_payload_prot;
assign main_basesoc_socbushandler_source_source_payload_cache = main_basesoc_socbushandler_pipe_valid_source_payload_cache;
assign main_basesoc_socbushandler_source_source_payload_qos = main_basesoc_socbushandler_pipe_valid_source_payload_qos;
assign main_basesoc_socbushandler_source_source_payload_region = main_basesoc_socbushandler_pipe_valid_source_payload_region;
assign main_basesoc_socbushandler_source_source_param_id = main_basesoc_socbushandler_pipe_valid_source_param_id;
assign main_basesoc_socbushandler_source_source_param_dest = main_basesoc_socbushandler_pipe_valid_source_param_dest;
assign main_basesoc_socbushandler_source_source_param_user = main_basesoc_socbushandler_pipe_valid_source_param_user;
assign main_basesoc_socbushandler_beat_size = (1'd1 <<< main_basesoc_socbushandler_source_source_payload_size);
assign main_basesoc_socbushandler_beat_wrap = (main_basesoc_socbushandler_source_source_payload_len <<< main_basesoc_socbushandler_source_source_payload_size);
assign main_basesoc_socbushandler_ax_beat_valid = (main_basesoc_socbushandler_source_source_valid | (~main_basesoc_socbushandler_ax_beat_first));
assign main_basesoc_socbushandler_ax_beat_first = (main_basesoc_socbushandler_beat_count == 1'd0);
assign main_basesoc_socbushandler_ax_beat_last = (main_basesoc_socbushandler_beat_count == main_basesoc_socbushandler_source_source_payload_len);
assign main_basesoc_socbushandler_ax_beat_payload_addr = ($signed({1'd0, main_basesoc_socbushandler_source_source_payload_addr}) + main_basesoc_socbushandler_beat_offset);
assign main_basesoc_socbushandler_ax_beat_param_id = main_basesoc_socbushandler_source_source_param_id;
always @(*) begin
    main_basesoc_socbushandler_source_source_ready <= 1'd0;
    if (main_basesoc_socbushandler_ax_beat_ready) begin
        if (main_basesoc_socbushandler_ax_beat_last) begin
            main_basesoc_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    builder_axi2axilite1_next_state <= 2'd0;
    main_basesoc_ram_bus_ar_payload_addr <= 32'd0;
    main_basesoc_ram_bus_ar_valid <= 1'd0;
    main_basesoc_ram_bus_aw_payload_addr <= 32'd0;
    main_basesoc_ram_bus_aw_valid <= 1'd0;
    main_basesoc_ram_bus_r_ready <= 1'd0;
    main_basesoc_ram_bus_w_payload_data <= 32'd0;
    main_basesoc_ram_bus_w_payload_strb <= 4'd0;
    main_basesoc_ram_bus_w_valid <= 1'd0;
    main_basesoc_socbushandler_ar_ready <= 1'd0;
    main_basesoc_socbushandler_aw_ready <= 1'd0;
    main_basesoc_socbushandler_ax_beat_ready <= 1'd0;
    main_basesoc_socbushandler_ax_burst_first <= 1'd0;
    main_basesoc_socbushandler_ax_burst_last <= 1'd0;
    main_basesoc_socbushandler_ax_burst_param_dest <= 1'd0;
    main_basesoc_socbushandler_ax_burst_param_id <= 1'd0;
    main_basesoc_socbushandler_ax_burst_param_user <= 1'd0;
    main_basesoc_socbushandler_ax_burst_payload_addr <= 32'd0;
    main_basesoc_socbushandler_ax_burst_payload_burst <= 2'd0;
    main_basesoc_socbushandler_ax_burst_payload_cache <= 4'd0;
    main_basesoc_socbushandler_ax_burst_payload_len <= 8'd0;
    main_basesoc_socbushandler_ax_burst_payload_lock <= 1'd0;
    main_basesoc_socbushandler_ax_burst_payload_prot <= 3'd0;
    main_basesoc_socbushandler_ax_burst_payload_qos <= 4'd0;
    main_basesoc_socbushandler_ax_burst_payload_region <= 4'd0;
    main_basesoc_socbushandler_ax_burst_payload_size <= 3'd0;
    main_basesoc_socbushandler_ax_burst_valid <= 1'd0;
    main_basesoc_socbushandler_b_param_id <= 1'd0;
    main_basesoc_socbushandler_b_payload_resp <= 2'd0;
    main_basesoc_socbushandler_b_valid <= 1'd0;
    main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value0 <= 1'd0;
    main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value_ce0 <= 1'd0;
    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd0;
    main_basesoc_socbushandler_r_last <= 1'd0;
    main_basesoc_socbushandler_r_param_id <= 1'd0;
    main_basesoc_socbushandler_r_payload_data <= 32'd0;
    main_basesoc_socbushandler_r_payload_resp <= 2'd0;
    main_basesoc_socbushandler_r_valid <= 1'd0;
    main_basesoc_socbushandler_w_ready <= 1'd0;
    builder_axi2axilite1_next_state <= builder_axi2axilite1_state;
    case (builder_axi2axilite1_state)
        1'd1: begin
            main_basesoc_ram_bus_ar_valid <= (main_basesoc_socbushandler_ax_beat_valid & (~main_basesoc_socbushandler_cmd_done));
            main_basesoc_ram_bus_ar_payload_addr <= main_basesoc_socbushandler_ax_beat_payload_addr;
            main_basesoc_socbushandler_ax_beat_ready <= (main_basesoc_ram_bus_ar_ready & (~main_basesoc_socbushandler_cmd_done));
            if ((main_basesoc_socbushandler_ax_beat_valid & main_basesoc_socbushandler_ax_beat_last)) begin
                if (main_basesoc_ram_bus_ar_ready) begin
                    main_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value0 <= 1'd1;
                    main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
                end
            end
            main_basesoc_socbushandler_r_valid <= main_basesoc_ram_bus_r_valid;
            main_basesoc_socbushandler_r_last <= main_basesoc_socbushandler_cmd_done;
            main_basesoc_socbushandler_r_payload_resp <= 1'd0;
            main_basesoc_socbushandler_r_param_id <= main_basesoc_socbushandler_ax_beat_param_id;
            main_basesoc_socbushandler_r_payload_data <= main_basesoc_ram_bus_r_payload_data;
            main_basesoc_ram_bus_r_ready <= main_basesoc_socbushandler_r_ready;
            if (((main_basesoc_socbushandler_r_valid & main_basesoc_socbushandler_r_last) & main_basesoc_socbushandler_r_ready)) begin
                main_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite1_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_basesoc_ram_bus_aw_valid <= (main_basesoc_socbushandler_ax_beat_valid & (~main_basesoc_socbushandler_cmd_done));
            main_basesoc_ram_bus_aw_payload_addr <= main_basesoc_socbushandler_ax_beat_payload_addr;
            main_basesoc_socbushandler_ax_beat_ready <= (main_basesoc_ram_bus_aw_ready & (~main_basesoc_socbushandler_cmd_done));
            if ((main_basesoc_socbushandler_ax_beat_valid & main_basesoc_socbushandler_ax_beat_last)) begin
                if (main_basesoc_ram_bus_aw_ready) begin
                    main_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value0 <= 1'd1;
                    main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
                end
            end
            main_basesoc_ram_bus_w_valid <= main_basesoc_socbushandler_w_valid;
            main_basesoc_ram_bus_w_payload_data <= main_basesoc_socbushandler_w_payload_data;
            main_basesoc_ram_bus_w_payload_strb <= main_basesoc_socbushandler_w_payload_strb;
            main_basesoc_socbushandler_w_ready <= main_basesoc_ram_bus_w_ready;
            if (((main_basesoc_socbushandler_w_valid & main_basesoc_socbushandler_w_last) & main_basesoc_socbushandler_w_ready)) begin
                builder_axi2axilite1_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_basesoc_socbushandler_b_valid <= 1'd1;
            main_basesoc_socbushandler_b_payload_resp <= 1'd0;
            main_basesoc_socbushandler_b_param_id <= main_basesoc_socbushandler_ax_beat_param_id;
            if (main_basesoc_socbushandler_b_ready) begin
                main_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite1_next_state <= 1'd0;
            end
        end
        default: begin
            main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value0 <= 1'd0;
            main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
            if ((main_basesoc_socbushandler_ar_valid & main_basesoc_socbushandler_aw_valid)) begin
                if (main_basesoc_socbushandler_last_ar_aw_n) begin
                    main_basesoc_socbushandler_ax_burst_valid <= main_basesoc_socbushandler_aw_valid;
                    main_basesoc_socbushandler_aw_ready <= main_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_socbushandler_ax_burst_first <= main_basesoc_socbushandler_aw_first;
                    main_basesoc_socbushandler_ax_burst_last <= main_basesoc_socbushandler_aw_last;
                    main_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_socbushandler_aw_payload_addr;
                    main_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_socbushandler_aw_payload_burst;
                    main_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_socbushandler_aw_payload_len;
                    main_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_socbushandler_aw_payload_size;
                    main_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_socbushandler_aw_payload_lock;
                    main_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_socbushandler_aw_payload_prot;
                    main_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_socbushandler_aw_payload_cache;
                    main_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_socbushandler_aw_payload_qos;
                    main_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_socbushandler_aw_payload_region;
                    main_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_socbushandler_aw_param_id;
                    main_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_socbushandler_aw_param_dest;
                    main_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_socbushandler_aw_param_user;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                    builder_axi2axilite1_next_state <= 2'd2;
                end else begin
                    main_basesoc_socbushandler_ax_burst_valid <= main_basesoc_socbushandler_ar_valid;
                    main_basesoc_socbushandler_ar_ready <= main_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_socbushandler_ax_burst_first <= main_basesoc_socbushandler_ar_first;
                    main_basesoc_socbushandler_ax_burst_last <= main_basesoc_socbushandler_ar_last;
                    main_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_socbushandler_ar_payload_addr;
                    main_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_socbushandler_ar_payload_burst;
                    main_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_socbushandler_ar_payload_len;
                    main_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_socbushandler_ar_payload_size;
                    main_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_socbushandler_ar_payload_lock;
                    main_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_socbushandler_ar_payload_prot;
                    main_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_socbushandler_ar_payload_cache;
                    main_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_socbushandler_ar_payload_qos;
                    main_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_socbushandler_ar_payload_region;
                    main_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_socbushandler_ar_param_id;
                    main_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_socbushandler_ar_param_dest;
                    main_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_socbushandler_ar_param_user;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd1;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                    builder_axi2axilite1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_socbushandler_ar_valid) begin
                    main_basesoc_socbushandler_ax_burst_valid <= main_basesoc_socbushandler_ar_valid;
                    main_basesoc_socbushandler_ar_ready <= main_basesoc_socbushandler_ax_burst_ready;
                    main_basesoc_socbushandler_ax_burst_first <= main_basesoc_socbushandler_ar_first;
                    main_basesoc_socbushandler_ax_burst_last <= main_basesoc_socbushandler_ar_last;
                    main_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_socbushandler_ar_payload_addr;
                    main_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_socbushandler_ar_payload_burst;
                    main_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_socbushandler_ar_payload_len;
                    main_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_socbushandler_ar_payload_size;
                    main_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_socbushandler_ar_payload_lock;
                    main_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_socbushandler_ar_payload_prot;
                    main_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_socbushandler_ar_payload_cache;
                    main_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_socbushandler_ar_payload_qos;
                    main_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_socbushandler_ar_payload_region;
                    main_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_socbushandler_ar_param_id;
                    main_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_socbushandler_ar_param_dest;
                    main_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_socbushandler_ar_param_user;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd1;
                    main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                    builder_axi2axilite1_next_state <= 1'd1;
                end else begin
                    if (main_basesoc_socbushandler_aw_valid) begin
                        main_basesoc_socbushandler_ax_burst_valid <= main_basesoc_socbushandler_aw_valid;
                        main_basesoc_socbushandler_aw_ready <= main_basesoc_socbushandler_ax_burst_ready;
                        main_basesoc_socbushandler_ax_burst_first <= main_basesoc_socbushandler_aw_first;
                        main_basesoc_socbushandler_ax_burst_last <= main_basesoc_socbushandler_aw_last;
                        main_basesoc_socbushandler_ax_burst_payload_addr <= main_basesoc_socbushandler_aw_payload_addr;
                        main_basesoc_socbushandler_ax_burst_payload_burst <= main_basesoc_socbushandler_aw_payload_burst;
                        main_basesoc_socbushandler_ax_burst_payload_len <= main_basesoc_socbushandler_aw_payload_len;
                        main_basesoc_socbushandler_ax_burst_payload_size <= main_basesoc_socbushandler_aw_payload_size;
                        main_basesoc_socbushandler_ax_burst_payload_lock <= main_basesoc_socbushandler_aw_payload_lock;
                        main_basesoc_socbushandler_ax_burst_payload_prot <= main_basesoc_socbushandler_aw_payload_prot;
                        main_basesoc_socbushandler_ax_burst_payload_cache <= main_basesoc_socbushandler_aw_payload_cache;
                        main_basesoc_socbushandler_ax_burst_payload_qos <= main_basesoc_socbushandler_aw_payload_qos;
                        main_basesoc_socbushandler_ax_burst_payload_region <= main_basesoc_socbushandler_aw_payload_region;
                        main_basesoc_socbushandler_ax_burst_param_id <= main_basesoc_socbushandler_aw_param_id;
                        main_basesoc_socbushandler_ax_burst_param_dest <= main_basesoc_socbushandler_aw_param_dest;
                        main_basesoc_socbushandler_ax_burst_param_user <= main_basesoc_socbushandler_aw_param_user;
                        main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
                        main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                        builder_axi2axilite1_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign main_bridge_axi2axi_lite_sink_sink_valid = main_bridge_axi2axi_lite_ax_burst_valid;
assign main_bridge_axi2axi_lite_ax_burst_ready = main_bridge_axi2axi_lite_sink_sink_ready;
assign main_bridge_axi2axi_lite_sink_sink_first = main_bridge_axi2axi_lite_ax_burst_first;
assign main_bridge_axi2axi_lite_sink_sink_last = main_bridge_axi2axi_lite_ax_burst_last;
assign main_bridge_axi2axi_lite_sink_sink_payload_addr = main_bridge_axi2axi_lite_ax_burst_payload_addr;
assign main_bridge_axi2axi_lite_sink_sink_payload_burst = main_bridge_axi2axi_lite_ax_burst_payload_burst;
assign main_bridge_axi2axi_lite_sink_sink_payload_len = main_bridge_axi2axi_lite_ax_burst_payload_len;
assign main_bridge_axi2axi_lite_sink_sink_payload_size = main_bridge_axi2axi_lite_ax_burst_payload_size;
assign main_bridge_axi2axi_lite_sink_sink_payload_lock = main_bridge_axi2axi_lite_ax_burst_payload_lock;
assign main_bridge_axi2axi_lite_sink_sink_payload_prot = main_bridge_axi2axi_lite_ax_burst_payload_prot;
assign main_bridge_axi2axi_lite_sink_sink_payload_cache = main_bridge_axi2axi_lite_ax_burst_payload_cache;
assign main_bridge_axi2axi_lite_sink_sink_payload_qos = main_bridge_axi2axi_lite_ax_burst_payload_qos;
assign main_bridge_axi2axi_lite_sink_sink_payload_region = main_bridge_axi2axi_lite_ax_burst_payload_region;
assign main_bridge_axi2axi_lite_sink_sink_param_id = main_bridge_axi2axi_lite_ax_burst_param_id;
assign main_bridge_axi2axi_lite_sink_sink_param_dest = main_bridge_axi2axi_lite_ax_burst_param_dest;
assign main_bridge_axi2axi_lite_sink_sink_param_user = main_bridge_axi2axi_lite_ax_burst_param_user;
assign main_bridge_b_ready = 1'd1;
assign main_bridge_axi2axi_lite_pipe_valid_sink_ready = ((~main_bridge_axi2axi_lite_pipe_valid_source_valid) | main_bridge_axi2axi_lite_pipe_valid_source_ready);
assign main_bridge_axi2axi_lite_pipe_valid_sink_valid = main_bridge_axi2axi_lite_sink_sink_valid;
assign main_bridge_axi2axi_lite_sink_sink_ready = main_bridge_axi2axi_lite_pipe_valid_sink_ready;
assign main_bridge_axi2axi_lite_pipe_valid_sink_first = main_bridge_axi2axi_lite_sink_sink_first;
assign main_bridge_axi2axi_lite_pipe_valid_sink_last = main_bridge_axi2axi_lite_sink_sink_last;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_addr = main_bridge_axi2axi_lite_sink_sink_payload_addr;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_burst = main_bridge_axi2axi_lite_sink_sink_payload_burst;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_len = main_bridge_axi2axi_lite_sink_sink_payload_len;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_size = main_bridge_axi2axi_lite_sink_sink_payload_size;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_lock = main_bridge_axi2axi_lite_sink_sink_payload_lock;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_prot = main_bridge_axi2axi_lite_sink_sink_payload_prot;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_cache = main_bridge_axi2axi_lite_sink_sink_payload_cache;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_qos = main_bridge_axi2axi_lite_sink_sink_payload_qos;
assign main_bridge_axi2axi_lite_pipe_valid_sink_payload_region = main_bridge_axi2axi_lite_sink_sink_payload_region;
assign main_bridge_axi2axi_lite_pipe_valid_sink_param_id = main_bridge_axi2axi_lite_sink_sink_param_id;
assign main_bridge_axi2axi_lite_pipe_valid_sink_param_dest = main_bridge_axi2axi_lite_sink_sink_param_dest;
assign main_bridge_axi2axi_lite_pipe_valid_sink_param_user = main_bridge_axi2axi_lite_sink_sink_param_user;
assign main_bridge_axi2axi_lite_source_source_valid = main_bridge_axi2axi_lite_pipe_valid_source_valid;
assign main_bridge_axi2axi_lite_pipe_valid_source_ready = main_bridge_axi2axi_lite_source_source_ready;
assign main_bridge_axi2axi_lite_source_source_first = main_bridge_axi2axi_lite_pipe_valid_source_first;
assign main_bridge_axi2axi_lite_source_source_last = main_bridge_axi2axi_lite_pipe_valid_source_last;
assign main_bridge_axi2axi_lite_source_source_payload_addr = main_bridge_axi2axi_lite_pipe_valid_source_payload_addr;
assign main_bridge_axi2axi_lite_source_source_payload_burst = main_bridge_axi2axi_lite_pipe_valid_source_payload_burst;
assign main_bridge_axi2axi_lite_source_source_payload_len = main_bridge_axi2axi_lite_pipe_valid_source_payload_len;
assign main_bridge_axi2axi_lite_source_source_payload_size = main_bridge_axi2axi_lite_pipe_valid_source_payload_size;
assign main_bridge_axi2axi_lite_source_source_payload_lock = main_bridge_axi2axi_lite_pipe_valid_source_payload_lock;
assign main_bridge_axi2axi_lite_source_source_payload_prot = main_bridge_axi2axi_lite_pipe_valid_source_payload_prot;
assign main_bridge_axi2axi_lite_source_source_payload_cache = main_bridge_axi2axi_lite_pipe_valid_source_payload_cache;
assign main_bridge_axi2axi_lite_source_source_payload_qos = main_bridge_axi2axi_lite_pipe_valid_source_payload_qos;
assign main_bridge_axi2axi_lite_source_source_payload_region = main_bridge_axi2axi_lite_pipe_valid_source_payload_region;
assign main_bridge_axi2axi_lite_source_source_param_id = main_bridge_axi2axi_lite_pipe_valid_source_param_id;
assign main_bridge_axi2axi_lite_source_source_param_dest = main_bridge_axi2axi_lite_pipe_valid_source_param_dest;
assign main_bridge_axi2axi_lite_source_source_param_user = main_bridge_axi2axi_lite_pipe_valid_source_param_user;
assign main_bridge_axi2axi_lite_beat_size = (1'd1 <<< main_bridge_axi2axi_lite_source_source_payload_size);
assign main_bridge_axi2axi_lite_beat_wrap = (main_bridge_axi2axi_lite_source_source_payload_len <<< main_bridge_axi2axi_lite_source_source_payload_size);
assign main_bridge_axi2axi_lite_ax_beat_valid = (main_bridge_axi2axi_lite_source_source_valid | (~main_bridge_axi2axi_lite_ax_beat_first));
assign main_bridge_axi2axi_lite_ax_beat_first = (main_bridge_axi2axi_lite_beat_count == 1'd0);
assign main_bridge_axi2axi_lite_ax_beat_last = (main_bridge_axi2axi_lite_beat_count == main_bridge_axi2axi_lite_source_source_payload_len);
assign main_bridge_axi2axi_lite_ax_beat_payload_addr = ($signed({1'd0, main_bridge_axi2axi_lite_source_source_payload_addr}) + main_bridge_axi2axi_lite_beat_offset);
assign main_bridge_axi2axi_lite_ax_beat_param_id = main_bridge_axi2axi_lite_source_source_param_id;
always @(*) begin
    main_bridge_axi2axi_lite_source_source_ready <= 1'd0;
    if (main_bridge_axi2axi_lite_ax_beat_ready) begin
        if (main_bridge_axi2axi_lite_ax_beat_last) begin
            main_bridge_axi2axi_lite_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    builder_axi2axilite_next_state <= 2'd0;
    main_adapted_interface_ar_ready <= 1'd0;
    main_adapted_interface_aw_ready <= 1'd0;
    main_adapted_interface_b_param_id <= 1'd0;
    main_adapted_interface_b_payload_resp <= 2'd0;
    main_adapted_interface_b_valid <= 1'd0;
    main_adapted_interface_r_last <= 1'd0;
    main_adapted_interface_r_param_id <= 1'd0;
    main_adapted_interface_r_payload_data <= 32'd0;
    main_adapted_interface_r_payload_resp <= 2'd0;
    main_adapted_interface_r_valid <= 1'd0;
    main_adapted_interface_w_ready <= 1'd0;
    main_bridge_ar_payload_addr <= 32'd0;
    main_bridge_ar_valid <= 1'd0;
    main_bridge_aw_payload_addr <= 32'd0;
    main_bridge_aw_valid <= 1'd0;
    main_bridge_axi2axi_lite_ax_beat_ready <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_first <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_last <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_param_dest <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_param_id <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_param_user <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_addr <= 32'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_burst <= 2'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_cache <= 4'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_len <= 8'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_lock <= 1'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_prot <= 3'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_qos <= 4'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_region <= 4'd0;
    main_bridge_axi2axi_lite_ax_burst_payload_size <= 3'd0;
    main_bridge_axi2axi_lite_ax_burst_valid <= 1'd0;
    main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value0 <= 1'd0;
    main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value_ce0 <= 1'd0;
    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1 <= 1'd0;
    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd0;
    main_bridge_r_ready <= 1'd0;
    main_bridge_w_payload_data <= 32'd0;
    main_bridge_w_payload_strb <= 4'd0;
    main_bridge_w_valid <= 1'd0;
    builder_axi2axilite_next_state <= builder_axi2axilite_state;
    case (builder_axi2axilite_state)
        1'd1: begin
            main_bridge_ar_valid <= (main_bridge_axi2axi_lite_ax_beat_valid & (~main_bridge_axi2axi_lite_cmd_done));
            main_bridge_ar_payload_addr <= main_bridge_axi2axi_lite_ax_beat_payload_addr;
            main_bridge_axi2axi_lite_ax_beat_ready <= (main_bridge_ar_ready & (~main_bridge_axi2axi_lite_cmd_done));
            if ((main_bridge_axi2axi_lite_ax_beat_valid & main_bridge_axi2axi_lite_ax_beat_last)) begin
                if (main_bridge_ar_ready) begin
                    main_bridge_axi2axi_lite_ax_beat_ready <= 1'd0;
                    main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value0 <= 1'd1;
                    main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value_ce0 <= 1'd1;
                end
            end
            main_adapted_interface_r_valid <= main_bridge_r_valid;
            main_adapted_interface_r_last <= main_bridge_axi2axi_lite_cmd_done;
            main_adapted_interface_r_payload_resp <= 1'd0;
            main_adapted_interface_r_param_id <= main_bridge_axi2axi_lite_ax_beat_param_id;
            main_adapted_interface_r_payload_data <= main_bridge_r_payload_data;
            main_bridge_r_ready <= main_adapted_interface_r_ready;
            if (((main_adapted_interface_r_valid & main_adapted_interface_r_last) & main_adapted_interface_r_ready)) begin
                main_bridge_axi2axi_lite_ax_beat_ready <= 1'd1;
                builder_axi2axilite_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_bridge_aw_valid <= (main_bridge_axi2axi_lite_ax_beat_valid & (~main_bridge_axi2axi_lite_cmd_done));
            main_bridge_aw_payload_addr <= main_bridge_axi2axi_lite_ax_beat_payload_addr;
            main_bridge_axi2axi_lite_ax_beat_ready <= (main_bridge_aw_ready & (~main_bridge_axi2axi_lite_cmd_done));
            if ((main_bridge_axi2axi_lite_ax_beat_valid & main_bridge_axi2axi_lite_ax_beat_last)) begin
                if (main_bridge_aw_ready) begin
                    main_bridge_axi2axi_lite_ax_beat_ready <= 1'd0;
                    main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value0 <= 1'd1;
                    main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value_ce0 <= 1'd1;
                end
            end
            main_bridge_w_valid <= main_adapted_interface_w_valid;
            main_bridge_w_payload_data <= main_adapted_interface_w_payload_data;
            main_bridge_w_payload_strb <= main_adapted_interface_w_payload_strb;
            main_adapted_interface_w_ready <= main_bridge_w_ready;
            if (((main_adapted_interface_w_valid & main_adapted_interface_w_last) & main_adapted_interface_w_ready)) begin
                builder_axi2axilite_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_adapted_interface_b_valid <= 1'd1;
            main_adapted_interface_b_payload_resp <= 1'd0;
            main_adapted_interface_b_param_id <= main_bridge_axi2axi_lite_ax_beat_param_id;
            if (main_adapted_interface_b_ready) begin
                main_bridge_axi2axi_lite_ax_beat_ready <= 1'd1;
                builder_axi2axilite_next_state <= 1'd0;
            end
        end
        default: begin
            main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value0 <= 1'd0;
            main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value_ce0 <= 1'd1;
            if ((main_adapted_interface_ar_valid & main_adapted_interface_aw_valid)) begin
                if (main_bridge_axi2axi_lite_last_ar_aw_n) begin
                    main_bridge_axi2axi_lite_ax_burst_valid <= main_adapted_interface_aw_valid;
                    main_adapted_interface_aw_ready <= main_bridge_axi2axi_lite_ax_burst_ready;
                    main_bridge_axi2axi_lite_ax_burst_first <= main_adapted_interface_aw_first;
                    main_bridge_axi2axi_lite_ax_burst_last <= main_adapted_interface_aw_last;
                    main_bridge_axi2axi_lite_ax_burst_payload_addr <= main_adapted_interface_aw_payload_addr;
                    main_bridge_axi2axi_lite_ax_burst_payload_burst <= main_adapted_interface_aw_payload_burst;
                    main_bridge_axi2axi_lite_ax_burst_payload_len <= main_adapted_interface_aw_payload_len;
                    main_bridge_axi2axi_lite_ax_burst_payload_size <= main_adapted_interface_aw_payload_size;
                    main_bridge_axi2axi_lite_ax_burst_payload_lock <= main_adapted_interface_aw_payload_lock;
                    main_bridge_axi2axi_lite_ax_burst_payload_prot <= main_adapted_interface_aw_payload_prot;
                    main_bridge_axi2axi_lite_ax_burst_payload_cache <= main_adapted_interface_aw_payload_cache;
                    main_bridge_axi2axi_lite_ax_burst_payload_qos <= main_adapted_interface_aw_payload_qos;
                    main_bridge_axi2axi_lite_ax_burst_payload_region <= main_adapted_interface_aw_payload_region;
                    main_bridge_axi2axi_lite_ax_burst_param_id <= main_adapted_interface_aw_param_id;
                    main_bridge_axi2axi_lite_ax_burst_param_dest <= main_adapted_interface_aw_param_dest;
                    main_bridge_axi2axi_lite_ax_burst_param_user <= main_adapted_interface_aw_param_user;
                    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1 <= 1'd0;
                    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd1;
                    builder_axi2axilite_next_state <= 2'd2;
                end else begin
                    main_bridge_axi2axi_lite_ax_burst_valid <= main_adapted_interface_ar_valid;
                    main_adapted_interface_ar_ready <= main_bridge_axi2axi_lite_ax_burst_ready;
                    main_bridge_axi2axi_lite_ax_burst_first <= main_adapted_interface_ar_first;
                    main_bridge_axi2axi_lite_ax_burst_last <= main_adapted_interface_ar_last;
                    main_bridge_axi2axi_lite_ax_burst_payload_addr <= main_adapted_interface_ar_payload_addr;
                    main_bridge_axi2axi_lite_ax_burst_payload_burst <= main_adapted_interface_ar_payload_burst;
                    main_bridge_axi2axi_lite_ax_burst_payload_len <= main_adapted_interface_ar_payload_len;
                    main_bridge_axi2axi_lite_ax_burst_payload_size <= main_adapted_interface_ar_payload_size;
                    main_bridge_axi2axi_lite_ax_burst_payload_lock <= main_adapted_interface_ar_payload_lock;
                    main_bridge_axi2axi_lite_ax_burst_payload_prot <= main_adapted_interface_ar_payload_prot;
                    main_bridge_axi2axi_lite_ax_burst_payload_cache <= main_adapted_interface_ar_payload_cache;
                    main_bridge_axi2axi_lite_ax_burst_payload_qos <= main_adapted_interface_ar_payload_qos;
                    main_bridge_axi2axi_lite_ax_burst_payload_region <= main_adapted_interface_ar_payload_region;
                    main_bridge_axi2axi_lite_ax_burst_param_id <= main_adapted_interface_ar_param_id;
                    main_bridge_axi2axi_lite_ax_burst_param_dest <= main_adapted_interface_ar_param_dest;
                    main_bridge_axi2axi_lite_ax_burst_param_user <= main_adapted_interface_ar_param_user;
                    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1 <= 1'd1;
                    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd1;
                    builder_axi2axilite_next_state <= 1'd1;
                end
            end else begin
                if (main_adapted_interface_ar_valid) begin
                    main_bridge_axi2axi_lite_ax_burst_valid <= main_adapted_interface_ar_valid;
                    main_adapted_interface_ar_ready <= main_bridge_axi2axi_lite_ax_burst_ready;
                    main_bridge_axi2axi_lite_ax_burst_first <= main_adapted_interface_ar_first;
                    main_bridge_axi2axi_lite_ax_burst_last <= main_adapted_interface_ar_last;
                    main_bridge_axi2axi_lite_ax_burst_payload_addr <= main_adapted_interface_ar_payload_addr;
                    main_bridge_axi2axi_lite_ax_burst_payload_burst <= main_adapted_interface_ar_payload_burst;
                    main_bridge_axi2axi_lite_ax_burst_payload_len <= main_adapted_interface_ar_payload_len;
                    main_bridge_axi2axi_lite_ax_burst_payload_size <= main_adapted_interface_ar_payload_size;
                    main_bridge_axi2axi_lite_ax_burst_payload_lock <= main_adapted_interface_ar_payload_lock;
                    main_bridge_axi2axi_lite_ax_burst_payload_prot <= main_adapted_interface_ar_payload_prot;
                    main_bridge_axi2axi_lite_ax_burst_payload_cache <= main_adapted_interface_ar_payload_cache;
                    main_bridge_axi2axi_lite_ax_burst_payload_qos <= main_adapted_interface_ar_payload_qos;
                    main_bridge_axi2axi_lite_ax_burst_payload_region <= main_adapted_interface_ar_payload_region;
                    main_bridge_axi2axi_lite_ax_burst_param_id <= main_adapted_interface_ar_param_id;
                    main_bridge_axi2axi_lite_ax_burst_param_dest <= main_adapted_interface_ar_param_dest;
                    main_bridge_axi2axi_lite_ax_burst_param_user <= main_adapted_interface_ar_param_user;
                    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1 <= 1'd1;
                    main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd1;
                    builder_axi2axilite_next_state <= 1'd1;
                end else begin
                    if (main_adapted_interface_aw_valid) begin
                        main_bridge_axi2axi_lite_ax_burst_valid <= main_adapted_interface_aw_valid;
                        main_adapted_interface_aw_ready <= main_bridge_axi2axi_lite_ax_burst_ready;
                        main_bridge_axi2axi_lite_ax_burst_first <= main_adapted_interface_aw_first;
                        main_bridge_axi2axi_lite_ax_burst_last <= main_adapted_interface_aw_last;
                        main_bridge_axi2axi_lite_ax_burst_payload_addr <= main_adapted_interface_aw_payload_addr;
                        main_bridge_axi2axi_lite_ax_burst_payload_burst <= main_adapted_interface_aw_payload_burst;
                        main_bridge_axi2axi_lite_ax_burst_payload_len <= main_adapted_interface_aw_payload_len;
                        main_bridge_axi2axi_lite_ax_burst_payload_size <= main_adapted_interface_aw_payload_size;
                        main_bridge_axi2axi_lite_ax_burst_payload_lock <= main_adapted_interface_aw_payload_lock;
                        main_bridge_axi2axi_lite_ax_burst_payload_prot <= main_adapted_interface_aw_payload_prot;
                        main_bridge_axi2axi_lite_ax_burst_payload_cache <= main_adapted_interface_aw_payload_cache;
                        main_bridge_axi2axi_lite_ax_burst_payload_qos <= main_adapted_interface_aw_payload_qos;
                        main_bridge_axi2axi_lite_ax_burst_payload_region <= main_adapted_interface_aw_payload_region;
                        main_bridge_axi2axi_lite_ax_burst_param_id <= main_adapted_interface_aw_param_id;
                        main_bridge_axi2axi_lite_ax_burst_param_dest <= main_adapted_interface_aw_param_dest;
                        main_bridge_axi2axi_lite_ax_burst_param_user <= main_adapted_interface_aw_param_user;
                        main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1 <= 1'd0;
                        main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1 <= 1'd1;
                        builder_axi2axilite_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign main_bridge_axi_lite2wishbone_r_addr = (main_bridge_ar_payload_addr - 1'd0);
assign main_bridge_axi_lite2wishbone_w_addr = (main_bridge_aw_payload_addr - 1'd0);
always @(*) begin
    builder_axilite2wishbone_next_state <= 3'd0;
    main_adapted_interface_adapted_interface_adr <= 32'd0;
    main_adapted_interface_adapted_interface_cyc <= 1'd0;
    main_adapted_interface_adapted_interface_dat_w <= 32'd0;
    main_adapted_interface_adapted_interface_sel <= 4'd0;
    main_adapted_interface_adapted_interface_stb <= 1'd0;
    main_adapted_interface_adapted_interface_we <= 1'd0;
    main_bridge_ar_ready <= 1'd0;
    main_bridge_aw_ready <= 1'd0;
    main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value1 <= 32'd0;
    main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value_ce1 <= 1'd0;
    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0 <= 1'd0;
    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0 <= 1'd0;
    main_bridge_b_payload_resp <= 2'd0;
    main_bridge_b_valid <= 1'd0;
    main_bridge_r_payload_data <= 32'd0;
    main_bridge_r_payload_resp <= 2'd0;
    main_bridge_r_valid <= 1'd0;
    main_bridge_w_ready <= 1'd0;
    builder_axilite2wishbone_next_state <= builder_axilite2wishbone_state;
    case (builder_axilite2wishbone_state)
        1'd1: begin
            main_adapted_interface_adapted_interface_stb <= 1'd1;
            main_adapted_interface_adapted_interface_cyc <= 1'd1;
            main_adapted_interface_adapted_interface_adr <= main_bridge_axi_lite2wishbone_r_addr[31:0];
            main_adapted_interface_adapted_interface_sel <= 4'd15;
            if (main_adapted_interface_adapted_interface_ack) begin
                main_bridge_ar_ready <= 1'd1;
                main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value1 <= main_adapted_interface_adapted_interface_dat_r;
                main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value_ce1 <= 1'd1;
                builder_axilite2wishbone_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_bridge_r_valid <= 1'd1;
            main_bridge_r_payload_resp <= 1'd0;
            main_bridge_r_payload_data <= main_bridge_axi_lite2wishbone_data;
            if (main_bridge_r_ready) begin
                builder_axilite2wishbone_next_state <= 1'd0;
            end
        end
        2'd3: begin
            main_adapted_interface_adapted_interface_stb <= main_bridge_w_valid;
            main_adapted_interface_adapted_interface_cyc <= main_bridge_w_valid;
            main_adapted_interface_adapted_interface_we <= 1'd1;
            main_adapted_interface_adapted_interface_adr <= main_bridge_axi_lite2wishbone_w_addr[31:0];
            main_adapted_interface_adapted_interface_sel <= main_bridge_w_payload_strb;
            main_adapted_interface_adapted_interface_dat_w <= main_bridge_w_payload_data;
            if (main_adapted_interface_adapted_interface_ack) begin
                main_bridge_aw_ready <= 1'd1;
                main_bridge_w_ready <= 1'd1;
                builder_axilite2wishbone_next_state <= 3'd4;
            end
        end
        3'd4: begin
            main_bridge_b_valid <= 1'd1;
            main_bridge_b_payload_resp <= 1'd0;
            if (main_bridge_b_ready) begin
                builder_axilite2wishbone_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_bridge_ar_valid & main_bridge_aw_valid)) begin
                if (main_bridge_axi_lite2wishbone_last_ar_aw_n) begin
                    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0 <= 1'd0;
                    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0 <= 1'd1;
                    builder_axilite2wishbone_next_state <= 2'd3;
                end else begin
                    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0 <= 1'd1;
                    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0 <= 1'd1;
                    builder_axilite2wishbone_next_state <= 1'd1;
                end
            end else begin
                if (main_bridge_ar_valid) begin
                    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0 <= 1'd1;
                    main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0 <= 1'd1;
                    builder_axilite2wishbone_next_state <= 1'd1;
                end else begin
                    if (main_bridge_aw_valid) begin
                        main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0 <= 1'd0;
                        main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0 <= 1'd1;
                        builder_axilite2wishbone_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign builder_basesoc_socbushandler_sink_sink_valid = builder_basesoc_socbushandler_ax_burst_valid;
assign builder_basesoc_socbushandler_ax_burst_ready = builder_basesoc_socbushandler_sink_sink_ready;
assign builder_basesoc_socbushandler_sink_sink_first = builder_basesoc_socbushandler_ax_burst_first;
assign builder_basesoc_socbushandler_sink_sink_last = builder_basesoc_socbushandler_ax_burst_last;
assign builder_basesoc_socbushandler_sink_sink_payload_addr = builder_basesoc_socbushandler_ax_burst_payload_addr;
assign builder_basesoc_socbushandler_sink_sink_payload_burst = builder_basesoc_socbushandler_ax_burst_payload_burst;
assign builder_basesoc_socbushandler_sink_sink_payload_len = builder_basesoc_socbushandler_ax_burst_payload_len;
assign builder_basesoc_socbushandler_sink_sink_payload_size = builder_basesoc_socbushandler_ax_burst_payload_size;
assign builder_basesoc_socbushandler_sink_sink_payload_lock = builder_basesoc_socbushandler_ax_burst_payload_lock;
assign builder_basesoc_socbushandler_sink_sink_payload_prot = builder_basesoc_socbushandler_ax_burst_payload_prot;
assign builder_basesoc_socbushandler_sink_sink_payload_cache = builder_basesoc_socbushandler_ax_burst_payload_cache;
assign builder_basesoc_socbushandler_sink_sink_payload_qos = builder_basesoc_socbushandler_ax_burst_payload_qos;
assign builder_basesoc_socbushandler_sink_sink_payload_region = builder_basesoc_socbushandler_ax_burst_payload_region;
assign builder_basesoc_socbushandler_sink_sink_param_id = builder_basesoc_socbushandler_ax_burst_param_id;
assign builder_basesoc_socbushandler_sink_sink_param_dest = builder_basesoc_socbushandler_ax_burst_param_dest;
assign builder_basesoc_socbushandler_sink_sink_param_user = builder_basesoc_socbushandler_ax_burst_param_user;
assign builder_basesoc_axiliteinterface_b_ready = 1'd1;
assign builder_basesoc_socbushandler_pipe_valid_sink_ready = ((~builder_basesoc_socbushandler_pipe_valid_source_valid) | builder_basesoc_socbushandler_pipe_valid_source_ready);
assign builder_basesoc_socbushandler_pipe_valid_sink_valid = builder_basesoc_socbushandler_sink_sink_valid;
assign builder_basesoc_socbushandler_sink_sink_ready = builder_basesoc_socbushandler_pipe_valid_sink_ready;
assign builder_basesoc_socbushandler_pipe_valid_sink_first = builder_basesoc_socbushandler_sink_sink_first;
assign builder_basesoc_socbushandler_pipe_valid_sink_last = builder_basesoc_socbushandler_sink_sink_last;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_addr = builder_basesoc_socbushandler_sink_sink_payload_addr;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_burst = builder_basesoc_socbushandler_sink_sink_payload_burst;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_len = builder_basesoc_socbushandler_sink_sink_payload_len;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_size = builder_basesoc_socbushandler_sink_sink_payload_size;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_lock = builder_basesoc_socbushandler_sink_sink_payload_lock;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_prot = builder_basesoc_socbushandler_sink_sink_payload_prot;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_cache = builder_basesoc_socbushandler_sink_sink_payload_cache;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_qos = builder_basesoc_socbushandler_sink_sink_payload_qos;
assign builder_basesoc_socbushandler_pipe_valid_sink_payload_region = builder_basesoc_socbushandler_sink_sink_payload_region;
assign builder_basesoc_socbushandler_pipe_valid_sink_param_id = builder_basesoc_socbushandler_sink_sink_param_id;
assign builder_basesoc_socbushandler_pipe_valid_sink_param_dest = builder_basesoc_socbushandler_sink_sink_param_dest;
assign builder_basesoc_socbushandler_pipe_valid_sink_param_user = builder_basesoc_socbushandler_sink_sink_param_user;
assign builder_basesoc_socbushandler_source_source_valid = builder_basesoc_socbushandler_pipe_valid_source_valid;
assign builder_basesoc_socbushandler_pipe_valid_source_ready = builder_basesoc_socbushandler_source_source_ready;
assign builder_basesoc_socbushandler_source_source_first = builder_basesoc_socbushandler_pipe_valid_source_first;
assign builder_basesoc_socbushandler_source_source_last = builder_basesoc_socbushandler_pipe_valid_source_last;
assign builder_basesoc_socbushandler_source_source_payload_addr = builder_basesoc_socbushandler_pipe_valid_source_payload_addr;
assign builder_basesoc_socbushandler_source_source_payload_burst = builder_basesoc_socbushandler_pipe_valid_source_payload_burst;
assign builder_basesoc_socbushandler_source_source_payload_len = builder_basesoc_socbushandler_pipe_valid_source_payload_len;
assign builder_basesoc_socbushandler_source_source_payload_size = builder_basesoc_socbushandler_pipe_valid_source_payload_size;
assign builder_basesoc_socbushandler_source_source_payload_lock = builder_basesoc_socbushandler_pipe_valid_source_payload_lock;
assign builder_basesoc_socbushandler_source_source_payload_prot = builder_basesoc_socbushandler_pipe_valid_source_payload_prot;
assign builder_basesoc_socbushandler_source_source_payload_cache = builder_basesoc_socbushandler_pipe_valid_source_payload_cache;
assign builder_basesoc_socbushandler_source_source_payload_qos = builder_basesoc_socbushandler_pipe_valid_source_payload_qos;
assign builder_basesoc_socbushandler_source_source_payload_region = builder_basesoc_socbushandler_pipe_valid_source_payload_region;
assign builder_basesoc_socbushandler_source_source_param_id = builder_basesoc_socbushandler_pipe_valid_source_param_id;
assign builder_basesoc_socbushandler_source_source_param_dest = builder_basesoc_socbushandler_pipe_valid_source_param_dest;
assign builder_basesoc_socbushandler_source_source_param_user = builder_basesoc_socbushandler_pipe_valid_source_param_user;
assign builder_basesoc_socbushandler_beat_size = (1'd1 <<< builder_basesoc_socbushandler_source_source_payload_size);
assign builder_basesoc_socbushandler_beat_wrap = (builder_basesoc_socbushandler_source_source_payload_len <<< builder_basesoc_socbushandler_source_source_payload_size);
assign builder_basesoc_socbushandler_ax_beat_valid = (builder_basesoc_socbushandler_source_source_valid | (~builder_basesoc_socbushandler_ax_beat_first));
assign builder_basesoc_socbushandler_ax_beat_first = (builder_basesoc_socbushandler_beat_count == 1'd0);
assign builder_basesoc_socbushandler_ax_beat_last = (builder_basesoc_socbushandler_beat_count == builder_basesoc_socbushandler_source_source_payload_len);
assign builder_basesoc_socbushandler_ax_beat_payload_addr = ($signed({1'd0, builder_basesoc_socbushandler_source_source_payload_addr}) + builder_basesoc_socbushandler_beat_offset);
assign builder_basesoc_socbushandler_ax_beat_param_id = builder_basesoc_socbushandler_source_source_param_id;
always @(*) begin
    builder_basesoc_socbushandler_source_source_ready <= 1'd0;
    if (builder_basesoc_socbushandler_ax_beat_ready) begin
        if (builder_basesoc_socbushandler_ax_beat_last) begin
            builder_basesoc_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    builder_axi2axilite2_next_state <= 2'd0;
    builder_basesoc_axiliteinterface_ar_payload_addr <= 32'd0;
    builder_basesoc_axiliteinterface_ar_valid <= 1'd0;
    builder_basesoc_axiliteinterface_aw_payload_addr <= 32'd0;
    builder_basesoc_axiliteinterface_aw_valid <= 1'd0;
    builder_basesoc_axiliteinterface_r_ready <= 1'd0;
    builder_basesoc_axiliteinterface_w_payload_data <= 32'd0;
    builder_basesoc_axiliteinterface_w_payload_strb <= 4'd0;
    builder_basesoc_axiliteinterface_w_valid <= 1'd0;
    builder_basesoc_socbushandler_ar_ready <= 1'd0;
    builder_basesoc_socbushandler_aw_ready <= 1'd0;
    builder_basesoc_socbushandler_ax_beat_ready <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_first <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_last <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_param_dest <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_param_id <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_param_user <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_payload_addr <= 32'd0;
    builder_basesoc_socbushandler_ax_burst_payload_burst <= 2'd0;
    builder_basesoc_socbushandler_ax_burst_payload_cache <= 4'd0;
    builder_basesoc_socbushandler_ax_burst_payload_len <= 8'd0;
    builder_basesoc_socbushandler_ax_burst_payload_lock <= 1'd0;
    builder_basesoc_socbushandler_ax_burst_payload_prot <= 3'd0;
    builder_basesoc_socbushandler_ax_burst_payload_qos <= 4'd0;
    builder_basesoc_socbushandler_ax_burst_payload_region <= 4'd0;
    builder_basesoc_socbushandler_ax_burst_payload_size <= 3'd0;
    builder_basesoc_socbushandler_ax_burst_valid <= 1'd0;
    builder_basesoc_socbushandler_b_param_id <= 1'd0;
    builder_basesoc_socbushandler_b_payload_resp <= 2'd0;
    builder_basesoc_socbushandler_b_valid <= 1'd0;
    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd0;
    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd0;
    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd0;
    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd0;
    builder_basesoc_socbushandler_r_last <= 1'd0;
    builder_basesoc_socbushandler_r_param_id <= 1'd0;
    builder_basesoc_socbushandler_r_payload_data <= 32'd0;
    builder_basesoc_socbushandler_r_payload_resp <= 2'd0;
    builder_basesoc_socbushandler_r_valid <= 1'd0;
    builder_basesoc_socbushandler_w_ready <= 1'd0;
    builder_axi2axilite2_next_state <= builder_axi2axilite2_state;
    case (builder_axi2axilite2_state)
        1'd1: begin
            builder_basesoc_axiliteinterface_ar_valid <= (builder_basesoc_socbushandler_ax_beat_valid & (~builder_basesoc_socbushandler_cmd_done));
            builder_basesoc_axiliteinterface_ar_payload_addr <= builder_basesoc_socbushandler_ax_beat_payload_addr;
            builder_basesoc_socbushandler_ax_beat_ready <= (builder_basesoc_axiliteinterface_ar_ready & (~builder_basesoc_socbushandler_cmd_done));
            if ((builder_basesoc_socbushandler_ax_beat_valid & builder_basesoc_socbushandler_ax_beat_last)) begin
                if (builder_basesoc_axiliteinterface_ar_ready) begin
                    builder_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd1;
                    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd1;
                end
            end
            builder_basesoc_socbushandler_r_valid <= builder_basesoc_axiliteinterface_r_valid;
            builder_basesoc_socbushandler_r_last <= builder_basesoc_socbushandler_cmd_done;
            builder_basesoc_socbushandler_r_payload_resp <= 1'd0;
            builder_basesoc_socbushandler_r_param_id <= builder_basesoc_socbushandler_ax_beat_param_id;
            builder_basesoc_socbushandler_r_payload_data <= builder_basesoc_axiliteinterface_r_payload_data;
            builder_basesoc_axiliteinterface_r_ready <= builder_basesoc_socbushandler_r_ready;
            if (((builder_basesoc_socbushandler_r_valid & builder_basesoc_socbushandler_r_last) & builder_basesoc_socbushandler_r_ready)) begin
                builder_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite2_next_state <= 1'd0;
            end
        end
        2'd2: begin
            builder_basesoc_axiliteinterface_aw_valid <= (builder_basesoc_socbushandler_ax_beat_valid & (~builder_basesoc_socbushandler_cmd_done));
            builder_basesoc_axiliteinterface_aw_payload_addr <= builder_basesoc_socbushandler_ax_beat_payload_addr;
            builder_basesoc_socbushandler_ax_beat_ready <= (builder_basesoc_axiliteinterface_aw_ready & (~builder_basesoc_socbushandler_cmd_done));
            if ((builder_basesoc_socbushandler_ax_beat_valid & builder_basesoc_socbushandler_ax_beat_last)) begin
                if (builder_basesoc_axiliteinterface_aw_ready) begin
                    builder_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd1;
                    builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd1;
                end
            end
            builder_basesoc_axiliteinterface_w_valid <= builder_basesoc_socbushandler_w_valid;
            builder_basesoc_axiliteinterface_w_payload_data <= builder_basesoc_socbushandler_w_payload_data;
            builder_basesoc_axiliteinterface_w_payload_strb <= builder_basesoc_socbushandler_w_payload_strb;
            builder_basesoc_socbushandler_w_ready <= builder_basesoc_axiliteinterface_w_ready;
            if (((builder_basesoc_socbushandler_w_valid & builder_basesoc_socbushandler_w_last) & builder_basesoc_socbushandler_w_ready)) begin
                builder_axi2axilite2_next_state <= 2'd3;
            end
        end
        2'd3: begin
            builder_basesoc_socbushandler_b_valid <= 1'd1;
            builder_basesoc_socbushandler_b_payload_resp <= 1'd0;
            builder_basesoc_socbushandler_b_param_id <= builder_basesoc_socbushandler_ax_beat_param_id;
            if (builder_basesoc_socbushandler_b_ready) begin
                builder_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                builder_axi2axilite2_next_state <= 1'd0;
            end
        end
        default: begin
            builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd0;
            builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd1;
            if ((builder_basesoc_socbushandler_ar_valid & builder_basesoc_socbushandler_aw_valid)) begin
                if (builder_basesoc_socbushandler_last_ar_aw_n) begin
                    builder_basesoc_socbushandler_ax_burst_valid <= builder_basesoc_socbushandler_aw_valid;
                    builder_basesoc_socbushandler_aw_ready <= builder_basesoc_socbushandler_ax_burst_ready;
                    builder_basesoc_socbushandler_ax_burst_first <= builder_basesoc_socbushandler_aw_first;
                    builder_basesoc_socbushandler_ax_burst_last <= builder_basesoc_socbushandler_aw_last;
                    builder_basesoc_socbushandler_ax_burst_payload_addr <= builder_basesoc_socbushandler_aw_payload_addr;
                    builder_basesoc_socbushandler_ax_burst_payload_burst <= builder_basesoc_socbushandler_aw_payload_burst;
                    builder_basesoc_socbushandler_ax_burst_payload_len <= builder_basesoc_socbushandler_aw_payload_len;
                    builder_basesoc_socbushandler_ax_burst_payload_size <= builder_basesoc_socbushandler_aw_payload_size;
                    builder_basesoc_socbushandler_ax_burst_payload_lock <= builder_basesoc_socbushandler_aw_payload_lock;
                    builder_basesoc_socbushandler_ax_burst_payload_prot <= builder_basesoc_socbushandler_aw_payload_prot;
                    builder_basesoc_socbushandler_ax_burst_payload_cache <= builder_basesoc_socbushandler_aw_payload_cache;
                    builder_basesoc_socbushandler_ax_burst_payload_qos <= builder_basesoc_socbushandler_aw_payload_qos;
                    builder_basesoc_socbushandler_ax_burst_payload_region <= builder_basesoc_socbushandler_aw_payload_region;
                    builder_basesoc_socbushandler_ax_burst_param_id <= builder_basesoc_socbushandler_aw_param_id;
                    builder_basesoc_socbushandler_ax_burst_param_dest <= builder_basesoc_socbushandler_aw_param_dest;
                    builder_basesoc_socbushandler_ax_burst_param_user <= builder_basesoc_socbushandler_aw_param_user;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd0;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                    builder_axi2axilite2_next_state <= 2'd2;
                end else begin
                    builder_basesoc_socbushandler_ax_burst_valid <= builder_basesoc_socbushandler_ar_valid;
                    builder_basesoc_socbushandler_ar_ready <= builder_basesoc_socbushandler_ax_burst_ready;
                    builder_basesoc_socbushandler_ax_burst_first <= builder_basesoc_socbushandler_ar_first;
                    builder_basesoc_socbushandler_ax_burst_last <= builder_basesoc_socbushandler_ar_last;
                    builder_basesoc_socbushandler_ax_burst_payload_addr <= builder_basesoc_socbushandler_ar_payload_addr;
                    builder_basesoc_socbushandler_ax_burst_payload_burst <= builder_basesoc_socbushandler_ar_payload_burst;
                    builder_basesoc_socbushandler_ax_burst_payload_len <= builder_basesoc_socbushandler_ar_payload_len;
                    builder_basesoc_socbushandler_ax_burst_payload_size <= builder_basesoc_socbushandler_ar_payload_size;
                    builder_basesoc_socbushandler_ax_burst_payload_lock <= builder_basesoc_socbushandler_ar_payload_lock;
                    builder_basesoc_socbushandler_ax_burst_payload_prot <= builder_basesoc_socbushandler_ar_payload_prot;
                    builder_basesoc_socbushandler_ax_burst_payload_cache <= builder_basesoc_socbushandler_ar_payload_cache;
                    builder_basesoc_socbushandler_ax_burst_payload_qos <= builder_basesoc_socbushandler_ar_payload_qos;
                    builder_basesoc_socbushandler_ax_burst_payload_region <= builder_basesoc_socbushandler_ar_payload_region;
                    builder_basesoc_socbushandler_ax_burst_param_id <= builder_basesoc_socbushandler_ar_param_id;
                    builder_basesoc_socbushandler_ax_burst_param_dest <= builder_basesoc_socbushandler_ar_param_dest;
                    builder_basesoc_socbushandler_ax_burst_param_user <= builder_basesoc_socbushandler_ar_param_user;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd1;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                    builder_axi2axilite2_next_state <= 1'd1;
                end
            end else begin
                if (builder_basesoc_socbushandler_ar_valid) begin
                    builder_basesoc_socbushandler_ax_burst_valid <= builder_basesoc_socbushandler_ar_valid;
                    builder_basesoc_socbushandler_ar_ready <= builder_basesoc_socbushandler_ax_burst_ready;
                    builder_basesoc_socbushandler_ax_burst_first <= builder_basesoc_socbushandler_ar_first;
                    builder_basesoc_socbushandler_ax_burst_last <= builder_basesoc_socbushandler_ar_last;
                    builder_basesoc_socbushandler_ax_burst_payload_addr <= builder_basesoc_socbushandler_ar_payload_addr;
                    builder_basesoc_socbushandler_ax_burst_payload_burst <= builder_basesoc_socbushandler_ar_payload_burst;
                    builder_basesoc_socbushandler_ax_burst_payload_len <= builder_basesoc_socbushandler_ar_payload_len;
                    builder_basesoc_socbushandler_ax_burst_payload_size <= builder_basesoc_socbushandler_ar_payload_size;
                    builder_basesoc_socbushandler_ax_burst_payload_lock <= builder_basesoc_socbushandler_ar_payload_lock;
                    builder_basesoc_socbushandler_ax_burst_payload_prot <= builder_basesoc_socbushandler_ar_payload_prot;
                    builder_basesoc_socbushandler_ax_burst_payload_cache <= builder_basesoc_socbushandler_ar_payload_cache;
                    builder_basesoc_socbushandler_ax_burst_payload_qos <= builder_basesoc_socbushandler_ar_payload_qos;
                    builder_basesoc_socbushandler_ax_burst_payload_region <= builder_basesoc_socbushandler_ar_payload_region;
                    builder_basesoc_socbushandler_ax_burst_param_id <= builder_basesoc_socbushandler_ar_param_id;
                    builder_basesoc_socbushandler_ax_burst_param_dest <= builder_basesoc_socbushandler_ar_param_dest;
                    builder_basesoc_socbushandler_ax_burst_param_user <= builder_basesoc_socbushandler_ar_param_user;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd1;
                    builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                    builder_axi2axilite2_next_state <= 1'd1;
                end else begin
                    if (builder_basesoc_socbushandler_aw_valid) begin
                        builder_basesoc_socbushandler_ax_burst_valid <= builder_basesoc_socbushandler_aw_valid;
                        builder_basesoc_socbushandler_aw_ready <= builder_basesoc_socbushandler_ax_burst_ready;
                        builder_basesoc_socbushandler_ax_burst_first <= builder_basesoc_socbushandler_aw_first;
                        builder_basesoc_socbushandler_ax_burst_last <= builder_basesoc_socbushandler_aw_last;
                        builder_basesoc_socbushandler_ax_burst_payload_addr <= builder_basesoc_socbushandler_aw_payload_addr;
                        builder_basesoc_socbushandler_ax_burst_payload_burst <= builder_basesoc_socbushandler_aw_payload_burst;
                        builder_basesoc_socbushandler_ax_burst_payload_len <= builder_basesoc_socbushandler_aw_payload_len;
                        builder_basesoc_socbushandler_ax_burst_payload_size <= builder_basesoc_socbushandler_aw_payload_size;
                        builder_basesoc_socbushandler_ax_burst_payload_lock <= builder_basesoc_socbushandler_aw_payload_lock;
                        builder_basesoc_socbushandler_ax_burst_payload_prot <= builder_basesoc_socbushandler_aw_payload_prot;
                        builder_basesoc_socbushandler_ax_burst_payload_cache <= builder_basesoc_socbushandler_aw_payload_cache;
                        builder_basesoc_socbushandler_ax_burst_payload_qos <= builder_basesoc_socbushandler_aw_payload_qos;
                        builder_basesoc_socbushandler_ax_burst_payload_region <= builder_basesoc_socbushandler_aw_payload_region;
                        builder_basesoc_socbushandler_ax_burst_param_id <= builder_basesoc_socbushandler_aw_param_id;
                        builder_basesoc_socbushandler_ax_burst_param_dest <= builder_basesoc_socbushandler_aw_param_dest;
                        builder_basesoc_socbushandler_ax_burst_param_user <= builder_basesoc_socbushandler_aw_param_user;
                        builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd0;
                        builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                        builder_axi2axilite2_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign builder_aw_valid = builder_comb_rhs_self0;
assign builder_aw_first = builder_comb_rhs_self1;
assign builder_aw_last = builder_comb_rhs_self2;
assign builder_aw_payload_addr = builder_comb_rhs_self3;
assign builder_aw_payload_burst = builder_comb_rhs_self4;
assign builder_aw_payload_len = builder_comb_rhs_self5;
assign builder_aw_payload_size = builder_comb_rhs_self6;
assign builder_aw_payload_lock = builder_comb_rhs_self7;
assign builder_aw_payload_prot = builder_comb_rhs_self8;
assign builder_aw_payload_cache = builder_comb_rhs_self9;
assign builder_aw_payload_qos = builder_comb_rhs_self10;
assign builder_aw_payload_region = builder_comb_rhs_self11;
assign builder_aw_param_id = builder_comb_rhs_self12;
assign builder_aw_param_dest = builder_comb_rhs_self13;
assign builder_aw_param_user = builder_comb_rhs_self14;
assign builder_w_valid = builder_comb_rhs_self15;
assign builder_w_first = builder_comb_rhs_self16;
assign builder_w_last = builder_comb_rhs_self17;
assign builder_w_payload_data = builder_comb_rhs_self18;
assign builder_w_payload_strb = builder_comb_rhs_self19;
assign builder_w_param_id = builder_comb_rhs_self20;
assign builder_w_param_dest = builder_comb_rhs_self21;
assign builder_w_param_user = builder_comb_rhs_self22;
assign builder_b_ready = builder_comb_rhs_self23;
assign builder_ar_valid = builder_comb_rhs_self24;
assign builder_ar_first = builder_comb_rhs_self25;
assign builder_ar_last = builder_comb_rhs_self26;
assign builder_ar_payload_addr = builder_comb_rhs_self27;
assign builder_ar_payload_burst = builder_comb_rhs_self28;
assign builder_ar_payload_len = builder_comb_rhs_self29;
assign builder_ar_payload_size = builder_comb_rhs_self30;
assign builder_ar_payload_lock = builder_comb_rhs_self31;
assign builder_ar_payload_prot = builder_comb_rhs_self32;
assign builder_ar_payload_cache = builder_comb_rhs_self33;
assign builder_ar_payload_qos = builder_comb_rhs_self34;
assign builder_ar_payload_region = builder_comb_rhs_self35;
assign builder_ar_param_id = builder_comb_rhs_self36;
assign builder_ar_param_dest = builder_comb_rhs_self37;
assign builder_ar_param_user = builder_comb_rhs_self38;
assign builder_r_ready = builder_comb_rhs_self39;
always @(*) begin
    main_basesoc_socbushandler_axiinterface0_aw_ready <= 1'd0;
    if ((builder_rr_write_grant == 1'd0)) begin
        main_basesoc_socbushandler_axiinterface0_aw_ready <= builder_aw_ready;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface1_aw_ready <= 1'd0;
    if ((builder_rr_write_grant == 1'd1)) begin
        main_basesoc_socbushandler_axiinterface1_aw_ready <= builder_aw_ready;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface0_w_ready <= 1'd0;
    if ((builder_rr_write_grant == 1'd0)) begin
        main_basesoc_socbushandler_axiinterface0_w_ready <= builder_w_ready;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface1_w_ready <= 1'd0;
    if ((builder_rr_write_grant == 1'd1)) begin
        main_basesoc_socbushandler_axiinterface1_w_ready <= builder_w_ready;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface0_b_valid <= 1'd0;
    if ((builder_rr_write_grant == 1'd0)) begin
        main_basesoc_socbushandler_axiinterface0_b_valid <= builder_b_valid;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface1_b_valid <= 1'd0;
    if ((builder_rr_write_grant == 1'd1)) begin
        main_basesoc_socbushandler_axiinterface1_b_valid <= builder_b_valid;
    end
end
assign main_basesoc_socbushandler_axiinterface0_b_first = builder_b_first;
assign main_basesoc_socbushandler_axiinterface1_b_first = builder_b_first;
assign main_basesoc_socbushandler_axiinterface0_b_last = builder_b_last;
assign main_basesoc_socbushandler_axiinterface1_b_last = builder_b_last;
assign main_basesoc_socbushandler_axiinterface0_b_payload_resp = builder_b_payload_resp;
assign main_basesoc_socbushandler_axiinterface1_b_payload_resp = builder_b_payload_resp;
assign main_basesoc_socbushandler_axiinterface0_b_param_id = builder_b_param_id;
assign main_basesoc_socbushandler_axiinterface1_b_param_id = builder_b_param_id;
assign main_basesoc_socbushandler_axiinterface0_b_param_dest = builder_b_param_dest;
assign main_basesoc_socbushandler_axiinterface1_b_param_dest = builder_b_param_dest;
assign main_basesoc_socbushandler_axiinterface0_b_param_user = builder_b_param_user;
assign main_basesoc_socbushandler_axiinterface1_b_param_user = builder_b_param_user;
always @(*) begin
    main_basesoc_socbushandler_axiinterface0_ar_ready <= 1'd0;
    if ((builder_rr_read_grant == 1'd0)) begin
        main_basesoc_socbushandler_axiinterface0_ar_ready <= builder_ar_ready;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface1_ar_ready <= 1'd0;
    if ((builder_rr_read_grant == 1'd1)) begin
        main_basesoc_socbushandler_axiinterface1_ar_ready <= builder_ar_ready;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface0_r_valid <= 1'd0;
    if ((builder_rr_read_grant == 1'd0)) begin
        main_basesoc_socbushandler_axiinterface0_r_valid <= builder_r_valid;
    end
end
always @(*) begin
    main_basesoc_socbushandler_axiinterface1_r_valid <= 1'd0;
    if ((builder_rr_read_grant == 1'd1)) begin
        main_basesoc_socbushandler_axiinterface1_r_valid <= builder_r_valid;
    end
end
assign main_basesoc_socbushandler_axiinterface0_r_first = builder_r_first;
assign main_basesoc_socbushandler_axiinterface1_r_first = builder_r_first;
assign main_basesoc_socbushandler_axiinterface0_r_last = builder_r_last;
assign main_basesoc_socbushandler_axiinterface1_r_last = builder_r_last;
assign main_basesoc_socbushandler_axiinterface0_r_payload_resp = builder_r_payload_resp;
assign main_basesoc_socbushandler_axiinterface1_r_payload_resp = builder_r_payload_resp;
assign main_basesoc_socbushandler_axiinterface0_r_payload_data = builder_r_payload_data;
assign main_basesoc_socbushandler_axiinterface1_r_payload_data = builder_r_payload_data;
assign main_basesoc_socbushandler_axiinterface0_r_param_id = builder_r_param_id;
assign main_basesoc_socbushandler_axiinterface1_r_param_id = builder_r_param_id;
assign main_basesoc_socbushandler_axiinterface0_r_param_dest = builder_r_param_dest;
assign main_basesoc_socbushandler_axiinterface1_r_param_dest = builder_r_param_dest;
assign main_basesoc_socbushandler_axiinterface0_r_param_user = builder_r_param_user;
assign main_basesoc_socbushandler_axiinterface1_r_param_user = builder_r_param_user;
assign builder_rr_write_ce = ((~((builder_aw_valid | builder_w_valid) | builder_b_valid)) & builder_wr_lock_empty);
assign builder_rr_read_ce = ((~(builder_ar_valid | builder_r_valid)) & builder_rd_lock_empty);
assign builder_rr_write_request = {((main_basesoc_socbushandler_axiinterface1_aw_valid | main_basesoc_socbushandler_axiinterface1_w_valid) | main_basesoc_socbushandler_axiinterface1_b_valid), ((main_basesoc_socbushandler_axiinterface0_aw_valid | main_basesoc_socbushandler_axiinterface0_w_valid) | main_basesoc_socbushandler_axiinterface0_b_valid)};
assign builder_rr_read_request = {(main_basesoc_socbushandler_axiinterface1_ar_valid | main_basesoc_socbushandler_axiinterface1_r_valid), (main_basesoc_socbushandler_axiinterface0_ar_valid | main_basesoc_socbushandler_axiinterface0_r_valid)};
assign builder_wr_lock_full = (builder_wr_lock_counter == 8'd255);
assign builder_wr_lock_empty = (builder_wr_lock_counter == 1'd0);
assign builder_wr_lock_stall = ((builder_aw_valid & builder_aw_ready) & builder_wr_lock_full);
assign builder_rd_lock_full = (builder_rd_lock_counter == 8'd255);
assign builder_rd_lock_empty = (builder_rd_lock_counter == 1'd0);
assign builder_rd_lock_stall = ((builder_ar_valid & builder_ar_ready) & builder_rd_lock_full);
always @(*) begin
    builder_slave_sel_dec0 <= 4'd0;
    builder_slave_sel_dec0[0] <= (builder_slice_proxy0[29:15] == 1'd0);
    builder_slave_sel_dec0[1] <= (builder_slice_proxy2[29:11] == 16'd32768);
    builder_slave_sel_dec0[2] <= (builder_slice_proxy4[29:23] == 6'd32);
    builder_slave_sel_dec0[3] <= (builder_slice_proxy6[29:14] == 16'd61440);
end
always @(*) begin
    builder_slave_sel_dec1 <= 4'd0;
    builder_slave_sel_dec1[0] <= (builder_slice_proxy1[29:15] == 1'd0);
    builder_slave_sel_dec1[1] <= (builder_slice_proxy3[29:11] == 16'd32768);
    builder_slave_sel_dec1[2] <= (builder_slice_proxy5[29:23] == 6'd32);
    builder_slave_sel_dec1[3] <= (builder_slice_proxy7[29:14] == 16'd61440);
end
always @(*) begin
    builder_slave_sel0 <= 4'd0;
    if (builder_axirequestcounter0_empty) begin
        builder_slave_sel0 <= builder_slave_sel_dec0;
    end else begin
        builder_slave_sel0 <= builder_slave_sel_reg0;
    end
end
always @(*) begin
    builder_slave_sel1 <= 4'd0;
    if (builder_axirequestcounter1_empty) begin
        builder_slave_sel1 <= builder_slave_sel_dec1;
    end else begin
        builder_slave_sel1 <= builder_slave_sel_reg1;
    end
end
assign main_basesoc_basesoc_socbushandler_aw_valid = (builder_aw_valid & builder_slave_sel0[0]);
assign main_basesoc_basesoc_socbushandler_aw_first = builder_aw_first;
assign main_basesoc_basesoc_socbushandler_aw_last = builder_aw_last;
assign main_basesoc_basesoc_socbushandler_aw_payload_addr = builder_aw_payload_addr;
assign main_basesoc_basesoc_socbushandler_aw_payload_burst = builder_aw_payload_burst;
assign main_basesoc_basesoc_socbushandler_aw_payload_len = builder_aw_payload_len;
assign main_basesoc_basesoc_socbushandler_aw_payload_size = builder_aw_payload_size;
assign main_basesoc_basesoc_socbushandler_aw_payload_lock = builder_aw_payload_lock;
assign main_basesoc_basesoc_socbushandler_aw_payload_prot = builder_aw_payload_prot;
assign main_basesoc_basesoc_socbushandler_aw_payload_cache = builder_aw_payload_cache;
assign main_basesoc_basesoc_socbushandler_aw_payload_qos = builder_aw_payload_qos;
assign main_basesoc_basesoc_socbushandler_aw_payload_region = builder_aw_payload_region;
assign main_basesoc_basesoc_socbushandler_aw_param_id = builder_aw_param_id;
assign main_basesoc_basesoc_socbushandler_aw_param_dest = builder_aw_param_dest;
assign main_basesoc_basesoc_socbushandler_aw_param_user = builder_aw_param_user;
assign main_basesoc_basesoc_socbushandler_w_valid = (builder_w_valid & builder_slave_sel0[0]);
assign main_basesoc_basesoc_socbushandler_w_first = builder_w_first;
assign main_basesoc_basesoc_socbushandler_w_last = builder_w_last;
assign main_basesoc_basesoc_socbushandler_w_payload_data = builder_w_payload_data;
assign main_basesoc_basesoc_socbushandler_w_payload_strb = builder_w_payload_strb;
assign main_basesoc_basesoc_socbushandler_w_param_id = builder_w_param_id;
assign main_basesoc_basesoc_socbushandler_w_param_dest = builder_w_param_dest;
assign main_basesoc_basesoc_socbushandler_w_param_user = builder_w_param_user;
assign main_basesoc_basesoc_socbushandler_b_ready = (builder_b_ready & builder_slave_sel0[0]);
assign main_basesoc_basesoc_socbushandler_ar_valid = (builder_ar_valid & builder_slave_sel1[0]);
assign main_basesoc_basesoc_socbushandler_ar_first = builder_ar_first;
assign main_basesoc_basesoc_socbushandler_ar_last = builder_ar_last;
assign main_basesoc_basesoc_socbushandler_ar_payload_addr = builder_ar_payload_addr;
assign main_basesoc_basesoc_socbushandler_ar_payload_burst = builder_ar_payload_burst;
assign main_basesoc_basesoc_socbushandler_ar_payload_len = builder_ar_payload_len;
assign main_basesoc_basesoc_socbushandler_ar_payload_size = builder_ar_payload_size;
assign main_basesoc_basesoc_socbushandler_ar_payload_lock = builder_ar_payload_lock;
assign main_basesoc_basesoc_socbushandler_ar_payload_prot = builder_ar_payload_prot;
assign main_basesoc_basesoc_socbushandler_ar_payload_cache = builder_ar_payload_cache;
assign main_basesoc_basesoc_socbushandler_ar_payload_qos = builder_ar_payload_qos;
assign main_basesoc_basesoc_socbushandler_ar_payload_region = builder_ar_payload_region;
assign main_basesoc_basesoc_socbushandler_ar_param_id = builder_ar_param_id;
assign main_basesoc_basesoc_socbushandler_ar_param_dest = builder_ar_param_dest;
assign main_basesoc_basesoc_socbushandler_ar_param_user = builder_ar_param_user;
assign main_basesoc_basesoc_socbushandler_r_ready = (builder_r_ready & builder_slave_sel1[0]);
assign main_basesoc_socbushandler_aw_valid = (builder_aw_valid & builder_slave_sel0[1]);
assign main_basesoc_socbushandler_aw_first = builder_aw_first;
assign main_basesoc_socbushandler_aw_last = builder_aw_last;
assign main_basesoc_socbushandler_aw_payload_addr = builder_aw_payload_addr;
assign main_basesoc_socbushandler_aw_payload_burst = builder_aw_payload_burst;
assign main_basesoc_socbushandler_aw_payload_len = builder_aw_payload_len;
assign main_basesoc_socbushandler_aw_payload_size = builder_aw_payload_size;
assign main_basesoc_socbushandler_aw_payload_lock = builder_aw_payload_lock;
assign main_basesoc_socbushandler_aw_payload_prot = builder_aw_payload_prot;
assign main_basesoc_socbushandler_aw_payload_cache = builder_aw_payload_cache;
assign main_basesoc_socbushandler_aw_payload_qos = builder_aw_payload_qos;
assign main_basesoc_socbushandler_aw_payload_region = builder_aw_payload_region;
assign main_basesoc_socbushandler_aw_param_id = builder_aw_param_id;
assign main_basesoc_socbushandler_aw_param_dest = builder_aw_param_dest;
assign main_basesoc_socbushandler_aw_param_user = builder_aw_param_user;
assign main_basesoc_socbushandler_w_valid = (builder_w_valid & builder_slave_sel0[1]);
assign main_basesoc_socbushandler_w_first = builder_w_first;
assign main_basesoc_socbushandler_w_last = builder_w_last;
assign main_basesoc_socbushandler_w_payload_data = builder_w_payload_data;
assign main_basesoc_socbushandler_w_payload_strb = builder_w_payload_strb;
assign main_basesoc_socbushandler_w_param_id = builder_w_param_id;
assign main_basesoc_socbushandler_w_param_dest = builder_w_param_dest;
assign main_basesoc_socbushandler_w_param_user = builder_w_param_user;
assign main_basesoc_socbushandler_b_ready = (builder_b_ready & builder_slave_sel0[1]);
assign main_basesoc_socbushandler_ar_valid = (builder_ar_valid & builder_slave_sel1[1]);
assign main_basesoc_socbushandler_ar_first = builder_ar_first;
assign main_basesoc_socbushandler_ar_last = builder_ar_last;
assign main_basesoc_socbushandler_ar_payload_addr = builder_ar_payload_addr;
assign main_basesoc_socbushandler_ar_payload_burst = builder_ar_payload_burst;
assign main_basesoc_socbushandler_ar_payload_len = builder_ar_payload_len;
assign main_basesoc_socbushandler_ar_payload_size = builder_ar_payload_size;
assign main_basesoc_socbushandler_ar_payload_lock = builder_ar_payload_lock;
assign main_basesoc_socbushandler_ar_payload_prot = builder_ar_payload_prot;
assign main_basesoc_socbushandler_ar_payload_cache = builder_ar_payload_cache;
assign main_basesoc_socbushandler_ar_payload_qos = builder_ar_payload_qos;
assign main_basesoc_socbushandler_ar_payload_region = builder_ar_payload_region;
assign main_basesoc_socbushandler_ar_param_id = builder_ar_param_id;
assign main_basesoc_socbushandler_ar_param_dest = builder_ar_param_dest;
assign main_basesoc_socbushandler_ar_param_user = builder_ar_param_user;
assign main_basesoc_socbushandler_r_ready = (builder_r_ready & builder_slave_sel1[1]);
assign main_adapted_interface_aw_valid = (builder_aw_valid & builder_slave_sel0[2]);
assign main_adapted_interface_aw_first = builder_aw_first;
assign main_adapted_interface_aw_last = builder_aw_last;
assign main_adapted_interface_aw_payload_addr = builder_aw_payload_addr;
assign main_adapted_interface_aw_payload_burst = builder_aw_payload_burst;
assign main_adapted_interface_aw_payload_len = builder_aw_payload_len;
assign main_adapted_interface_aw_payload_size = builder_aw_payload_size;
assign main_adapted_interface_aw_payload_lock = builder_aw_payload_lock;
assign main_adapted_interface_aw_payload_prot = builder_aw_payload_prot;
assign main_adapted_interface_aw_payload_cache = builder_aw_payload_cache;
assign main_adapted_interface_aw_payload_qos = builder_aw_payload_qos;
assign main_adapted_interface_aw_payload_region = builder_aw_payload_region;
assign main_adapted_interface_aw_param_id = builder_aw_param_id;
assign main_adapted_interface_aw_param_dest = builder_aw_param_dest;
assign main_adapted_interface_aw_param_user = builder_aw_param_user;
assign main_adapted_interface_w_valid = (builder_w_valid & builder_slave_sel0[2]);
assign main_adapted_interface_w_first = builder_w_first;
assign main_adapted_interface_w_last = builder_w_last;
assign main_adapted_interface_w_payload_data = builder_w_payload_data;
assign main_adapted_interface_w_payload_strb = builder_w_payload_strb;
assign main_adapted_interface_w_param_id = builder_w_param_id;
assign main_adapted_interface_w_param_dest = builder_w_param_dest;
assign main_adapted_interface_w_param_user = builder_w_param_user;
assign main_adapted_interface_b_ready = (builder_b_ready & builder_slave_sel0[2]);
assign main_adapted_interface_ar_valid = (builder_ar_valid & builder_slave_sel1[2]);
assign main_adapted_interface_ar_first = builder_ar_first;
assign main_adapted_interface_ar_last = builder_ar_last;
assign main_adapted_interface_ar_payload_addr = builder_ar_payload_addr;
assign main_adapted_interface_ar_payload_burst = builder_ar_payload_burst;
assign main_adapted_interface_ar_payload_len = builder_ar_payload_len;
assign main_adapted_interface_ar_payload_size = builder_ar_payload_size;
assign main_adapted_interface_ar_payload_lock = builder_ar_payload_lock;
assign main_adapted_interface_ar_payload_prot = builder_ar_payload_prot;
assign main_adapted_interface_ar_payload_cache = builder_ar_payload_cache;
assign main_adapted_interface_ar_payload_qos = builder_ar_payload_qos;
assign main_adapted_interface_ar_payload_region = builder_ar_payload_region;
assign main_adapted_interface_ar_param_id = builder_ar_param_id;
assign main_adapted_interface_ar_param_dest = builder_ar_param_dest;
assign main_adapted_interface_ar_param_user = builder_ar_param_user;
assign main_adapted_interface_r_ready = (builder_r_ready & builder_slave_sel1[2]);
assign builder_basesoc_socbushandler_aw_valid = (builder_aw_valid & builder_slave_sel0[3]);
assign builder_basesoc_socbushandler_aw_first = builder_aw_first;
assign builder_basesoc_socbushandler_aw_last = builder_aw_last;
assign builder_basesoc_socbushandler_aw_payload_addr = builder_aw_payload_addr;
assign builder_basesoc_socbushandler_aw_payload_burst = builder_aw_payload_burst;
assign builder_basesoc_socbushandler_aw_payload_len = builder_aw_payload_len;
assign builder_basesoc_socbushandler_aw_payload_size = builder_aw_payload_size;
assign builder_basesoc_socbushandler_aw_payload_lock = builder_aw_payload_lock;
assign builder_basesoc_socbushandler_aw_payload_prot = builder_aw_payload_prot;
assign builder_basesoc_socbushandler_aw_payload_cache = builder_aw_payload_cache;
assign builder_basesoc_socbushandler_aw_payload_qos = builder_aw_payload_qos;
assign builder_basesoc_socbushandler_aw_payload_region = builder_aw_payload_region;
assign builder_basesoc_socbushandler_aw_param_id = builder_aw_param_id;
assign builder_basesoc_socbushandler_aw_param_dest = builder_aw_param_dest;
assign builder_basesoc_socbushandler_aw_param_user = builder_aw_param_user;
assign builder_basesoc_socbushandler_w_valid = (builder_w_valid & builder_slave_sel0[3]);
assign builder_basesoc_socbushandler_w_first = builder_w_first;
assign builder_basesoc_socbushandler_w_last = builder_w_last;
assign builder_basesoc_socbushandler_w_payload_data = builder_w_payload_data;
assign builder_basesoc_socbushandler_w_payload_strb = builder_w_payload_strb;
assign builder_basesoc_socbushandler_w_param_id = builder_w_param_id;
assign builder_basesoc_socbushandler_w_param_dest = builder_w_param_dest;
assign builder_basesoc_socbushandler_w_param_user = builder_w_param_user;
assign builder_basesoc_socbushandler_b_ready = (builder_b_ready & builder_slave_sel0[3]);
assign builder_basesoc_socbushandler_ar_valid = (builder_ar_valid & builder_slave_sel1[3]);
assign builder_basesoc_socbushandler_ar_first = builder_ar_first;
assign builder_basesoc_socbushandler_ar_last = builder_ar_last;
assign builder_basesoc_socbushandler_ar_payload_addr = builder_ar_payload_addr;
assign builder_basesoc_socbushandler_ar_payload_burst = builder_ar_payload_burst;
assign builder_basesoc_socbushandler_ar_payload_len = builder_ar_payload_len;
assign builder_basesoc_socbushandler_ar_payload_size = builder_ar_payload_size;
assign builder_basesoc_socbushandler_ar_payload_lock = builder_ar_payload_lock;
assign builder_basesoc_socbushandler_ar_payload_prot = builder_ar_payload_prot;
assign builder_basesoc_socbushandler_ar_payload_cache = builder_ar_payload_cache;
assign builder_basesoc_socbushandler_ar_payload_qos = builder_ar_payload_qos;
assign builder_basesoc_socbushandler_ar_payload_region = builder_ar_payload_region;
assign builder_basesoc_socbushandler_ar_param_id = builder_ar_param_id;
assign builder_basesoc_socbushandler_ar_param_dest = builder_ar_param_dest;
assign builder_basesoc_socbushandler_ar_param_user = builder_ar_param_user;
assign builder_basesoc_socbushandler_r_ready = (builder_r_ready & builder_slave_sel1[3]);
assign builder_b_first = ((((main_basesoc_basesoc_socbushandler_b_first & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_first & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_b_first & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_first & {1{builder_slave_sel0[3]}}));
assign builder_b_last = ((((main_basesoc_basesoc_socbushandler_b_last & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_last & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_b_last & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_last & {1{builder_slave_sel0[3]}}));
assign builder_b_param_id = ((((main_basesoc_basesoc_socbushandler_b_param_id & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_param_id & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_b_param_id & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_param_id & {1{builder_slave_sel0[3]}}));
assign builder_b_param_dest = ((((main_basesoc_basesoc_socbushandler_b_param_dest & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_param_dest & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_b_param_dest & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_param_dest & {1{builder_slave_sel0[3]}}));
assign builder_b_param_user = ((((main_basesoc_basesoc_socbushandler_b_param_user & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_param_user & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_b_param_user & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_param_user & {1{builder_slave_sel0[3]}}));
assign builder_r_first = ((((main_basesoc_basesoc_socbushandler_r_first & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_first & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_r_first & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_first & {1{builder_slave_sel1[3]}}));
assign builder_r_param_id = ((((main_basesoc_basesoc_socbushandler_r_param_id & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_param_id & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_r_param_id & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_param_id & {1{builder_slave_sel1[3]}}));
assign builder_r_param_dest = ((((main_basesoc_basesoc_socbushandler_r_param_dest & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_param_dest & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_r_param_dest & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_param_dest & {1{builder_slave_sel1[3]}}));
assign builder_r_param_user = ((((main_basesoc_basesoc_socbushandler_r_param_user & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_param_user & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_r_param_user & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_param_user & {1{builder_slave_sel1[3]}}));
assign builder_axirequestcounter0_full = (builder_axirequestcounter0_counter == 8'd255);
assign builder_axirequestcounter0_empty = (builder_axirequestcounter0_counter == 1'd0);
assign builder_axirequestcounter0_stall = ((builder_aw_valid & builder_aw_ready) & builder_axirequestcounter0_full);
assign builder_axirequestcounter1_full = (builder_axirequestcounter1_counter == 8'd255);
assign builder_axirequestcounter1_empty = (builder_axirequestcounter1_counter == 1'd0);
assign builder_axirequestcounter1_stall = ((builder_ar_valid & builder_ar_ready) & builder_axirequestcounter1_full);
assign builder_error = (builder_wr_error | builder_rd_error);
assign builder_wr_timer_done = (builder_wr_timer_count == 1'd0);
assign builder_rd_timer_done = (builder_rd_timer_count == 1'd0);
always @(*) begin
    builder_aw_ready <= 1'd0;
    builder_b_payload_resp <= 2'd0;
    builder_b_valid <= 1'd0;
    builder_fsm0_next_state <= 1'd0;
    builder_w_ready <= 1'd0;
    builder_wr_error <= 1'd0;
    builder_wr_timer_wait <= 1'd0;
    builder_aw_ready <= ((((main_basesoc_basesoc_socbushandler_aw_ready & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_aw_ready & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_aw_ready & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_aw_ready & {1{builder_slave_sel0[3]}}));
    builder_w_ready <= ((((main_basesoc_basesoc_socbushandler_w_ready & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_w_ready & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_w_ready & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_w_ready & {1{builder_slave_sel0[3]}}));
    builder_b_valid <= ((((main_basesoc_basesoc_socbushandler_b_valid & {1{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_valid & {1{builder_slave_sel0[1]}})) | (main_adapted_interface_b_valid & {1{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_valid & {1{builder_slave_sel0[3]}}));
    builder_b_payload_resp <= ((((main_basesoc_basesoc_socbushandler_b_payload_resp & {2{builder_slave_sel0[0]}}) | (main_basesoc_socbushandler_b_payload_resp & {2{builder_slave_sel0[1]}})) | (main_adapted_interface_b_payload_resp & {2{builder_slave_sel0[2]}})) | (builder_basesoc_socbushandler_b_payload_resp & {2{builder_slave_sel0[3]}}));
    builder_fsm0_next_state <= builder_fsm0_state;
    case (builder_fsm0_state)
        1'd1: begin
            builder_aw_ready <= builder_aw_valid;
            builder_w_ready <= builder_w_valid;
            builder_b_valid <= ((~builder_aw_valid) & (~builder_w_valid));
            builder_b_payload_resp <= 2'd2;
            if ((builder_b_valid & builder_b_ready)) begin
                builder_fsm0_next_state <= 1'd0;
            end
        end
        default: begin
            builder_wr_timer_wait <= ((builder_aw_valid & (~builder_aw_ready)) | (builder_w_valid & (~builder_w_ready)));
            if ((builder_wr_timer_done & builder_wr_timer_wait)) begin
                builder_wr_error <= 1'd1;
                builder_fsm0_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_ar_ready <= 1'd0;
    builder_fsm1_next_state <= 1'd0;
    builder_r_last <= 1'd0;
    builder_r_payload_data <= 32'd0;
    builder_r_payload_resp <= 2'd0;
    builder_r_valid <= 1'd0;
    builder_rd_error <= 1'd0;
    builder_rd_timer_wait <= 1'd0;
    builder_ar_ready <= ((((main_basesoc_basesoc_socbushandler_ar_ready & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_ar_ready & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_ar_ready & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_ar_ready & {1{builder_slave_sel1[3]}}));
    builder_r_valid <= ((((main_basesoc_basesoc_socbushandler_r_valid & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_valid & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_r_valid & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_valid & {1{builder_slave_sel1[3]}}));
    builder_r_last <= ((((main_basesoc_basesoc_socbushandler_r_last & {1{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_last & {1{builder_slave_sel1[1]}})) | (main_adapted_interface_r_last & {1{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_last & {1{builder_slave_sel1[3]}}));
    builder_r_payload_resp <= ((((main_basesoc_basesoc_socbushandler_r_payload_resp & {2{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_payload_resp & {2{builder_slave_sel1[1]}})) | (main_adapted_interface_r_payload_resp & {2{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_payload_resp & {2{builder_slave_sel1[3]}}));
    builder_r_payload_data <= ((((main_basesoc_basesoc_socbushandler_r_payload_data & {32{builder_slave_sel1[0]}}) | (main_basesoc_socbushandler_r_payload_data & {32{builder_slave_sel1[1]}})) | (main_adapted_interface_r_payload_data & {32{builder_slave_sel1[2]}})) | (builder_basesoc_socbushandler_r_payload_data & {32{builder_slave_sel1[3]}}));
    builder_fsm1_next_state <= builder_fsm1_state;
    case (builder_fsm1_state)
        1'd1: begin
            builder_ar_ready <= builder_ar_valid;
            builder_r_valid <= (~builder_ar_valid);
            builder_r_last <= 1'd1;
            builder_r_payload_resp <= 2'd2;
            builder_r_payload_data <= 32'd4294967295;
            if ((builder_r_valid & builder_r_ready)) begin
                builder_fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            builder_rd_timer_wait <= (builder_ar_valid & (~builder_ar_ready));
            if ((builder_rd_timer_done & builder_rd_timer_wait)) begin
                builder_rd_error <= 1'd1;
                builder_fsm1_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_bus_errors_status = main_basesoc_bus_errors;
always @(*) begin
    builder_basesoc_axilitesram0_next_state <= 3'd0;
    main_basesoc_basesoc_adr <= 15'd0;
    main_basesoc_basesoc_do_read <= 1'd0;
    main_basesoc_basesoc_do_write <= 1'd0;
    main_basesoc_basesoc_last_was_read_axilitesram0_next_value2 <= 1'd0;
    main_basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2 <= 1'd0;
    main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value0 <= 15'd0;
    main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value_ce0 <= 1'd0;
    main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value1 <= 32'd0;
    main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce1 <= 1'd0;
    main_basesoc_basesoc_ram_bus_ar_ready <= 1'd0;
    main_basesoc_basesoc_ram_bus_aw_ready <= 1'd0;
    main_basesoc_basesoc_ram_bus_b_payload_resp <= 2'd0;
    main_basesoc_basesoc_ram_bus_b_valid <= 1'd0;
    main_basesoc_basesoc_ram_bus_r_payload_data <= 32'd0;
    main_basesoc_basesoc_ram_bus_r_payload_resp <= 2'd0;
    main_basesoc_basesoc_ram_bus_r_valid <= 1'd0;
    main_basesoc_basesoc_ram_bus_w_ready <= 1'd0;
    builder_basesoc_axilitesram0_next_state <= builder_basesoc_axilitesram0_state;
    case (builder_basesoc_axilitesram0_state)
        1'd1: begin
            main_basesoc_basesoc_adr <= main_basesoc_basesoc_port_adr_reg;
            if (main_basesoc_basesoc_ram_bus_w_valid) begin
                main_basesoc_basesoc_ram_bus_w_ready <= 1'd1;
                builder_basesoc_axilitesram0_next_state <= 3'd4;
            end
        end
        2'd2: begin
            main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value1 <= main_basesoc_basesoc_dat_r;
            main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce1 <= 1'd1;
            builder_basesoc_axilitesram0_next_state <= 2'd3;
        end
        2'd3: begin
            main_basesoc_basesoc_last_was_read_axilitesram0_next_value2 <= 1'd1;
            main_basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2 <= 1'd1;
            main_basesoc_basesoc_ram_bus_r_payload_data <= main_basesoc_basesoc_port_dat_r_latched;
            main_basesoc_basesoc_ram_bus_r_payload_resp <= 1'd0;
            main_basesoc_basesoc_ram_bus_r_valid <= 1'd1;
            if (main_basesoc_basesoc_ram_bus_r_ready) begin
                builder_basesoc_axilitesram0_next_state <= 1'd0;
            end
        end
        3'd4: begin
            main_basesoc_basesoc_last_was_read_axilitesram0_next_value2 <= 1'd0;
            main_basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2 <= 1'd1;
            main_basesoc_basesoc_ram_bus_b_valid <= 1'd1;
            main_basesoc_basesoc_ram_bus_b_payload_resp <= 1'd0;
            if (main_basesoc_basesoc_ram_bus_b_ready) begin
                builder_basesoc_axilitesram0_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_basesoc_basesoc_ram_bus_aw_valid & main_basesoc_basesoc_ram_bus_ar_valid)) begin
                main_basesoc_basesoc_do_write <= main_basesoc_basesoc_last_was_read;
                main_basesoc_basesoc_do_read <= (~main_basesoc_basesoc_last_was_read);
            end else begin
                main_basesoc_basesoc_do_write <= main_basesoc_basesoc_ram_bus_aw_valid;
                main_basesoc_basesoc_do_read <= main_basesoc_basesoc_ram_bus_ar_valid;
            end
            main_basesoc_basesoc_ram_bus_aw_ready <= (main_basesoc_basesoc_last_was_read | (~main_basesoc_basesoc_ram_bus_ar_valid));
            main_basesoc_basesoc_ram_bus_ar_ready <= ((~main_basesoc_basesoc_last_was_read) | (~main_basesoc_basesoc_ram_bus_aw_valid));
            if (main_basesoc_basesoc_do_write) begin
                main_basesoc_basesoc_adr <= main_basesoc_basesoc_ram_bus_aw_payload_addr[31:2];
                if (main_basesoc_basesoc_ram_bus_w_valid) begin
                    main_basesoc_basesoc_ram_bus_w_ready <= 1'd1;
                    builder_basesoc_axilitesram0_next_state <= 3'd4;
                end else begin
                    main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value0 <= main_basesoc_basesoc_adr;
                    main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value_ce0 <= 1'd1;
                    builder_basesoc_axilitesram0_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_basesoc_do_read) begin
                    main_basesoc_basesoc_adr <= main_basesoc_basesoc_ram_bus_ar_payload_addr[31:2];
                    builder_basesoc_axilitesram0_next_state <= 2'd2;
                end
            end
        end
    endcase
end
always @(*) begin
    main_basesoc_ram_dat_w <= 32'd0;
    main_basesoc_ram_dat_w <= main_basesoc_ram_bus_w_payload_data;
    main_basesoc_ram_dat_w <= main_basesoc_ram_bus_w_payload_data;
end
always @(*) begin
    main_basesoc_ram_we <= 4'd0;
    main_basesoc_ram_we[0] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[0]);
    main_basesoc_ram_we[1] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[1]);
    main_basesoc_ram_we[2] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[2]);
    main_basesoc_ram_we[3] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[3]);
    main_basesoc_ram_we[0] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[0]);
    main_basesoc_ram_we[1] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[1]);
    main_basesoc_ram_we[2] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[2]);
    main_basesoc_ram_we[3] <= ((main_basesoc_ram_bus_w_valid & main_basesoc_ram_bus_w_ready) & main_basesoc_ram_bus_w_payload_strb[3]);
end
always @(*) begin
    builder_basesoc_axilitesram1_next_state <= 3'd0;
    main_basesoc_ram_adr <= 11'd0;
    main_basesoc_ram_bus_ar_ready <= 1'd0;
    main_basesoc_ram_bus_aw_ready <= 1'd0;
    main_basesoc_ram_bus_b_payload_resp <= 2'd0;
    main_basesoc_ram_bus_b_valid <= 1'd0;
    main_basesoc_ram_bus_r_payload_data <= 32'd0;
    main_basesoc_ram_bus_r_payload_resp <= 2'd0;
    main_basesoc_ram_bus_r_valid <= 1'd0;
    main_basesoc_ram_bus_w_ready <= 1'd0;
    main_basesoc_ram_do_read <= 1'd0;
    main_basesoc_ram_do_write <= 1'd0;
    main_basesoc_ram_last_was_read_axilitesram1_next_value2 <= 1'd0;
    main_basesoc_ram_last_was_read_axilitesram1_next_value_ce2 <= 1'd0;
    main_basesoc_ram_port_adr_reg_axilitesram1_next_value0 <= 11'd0;
    main_basesoc_ram_port_adr_reg_axilitesram1_next_value_ce0 <= 1'd0;
    main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value1 <= 32'd0;
    main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce1 <= 1'd0;
    builder_basesoc_axilitesram1_next_state <= builder_basesoc_axilitesram1_state;
    case (builder_basesoc_axilitesram1_state)
        1'd1: begin
            main_basesoc_ram_adr <= main_basesoc_ram_port_adr_reg;
            if (main_basesoc_ram_bus_w_valid) begin
                main_basesoc_ram_bus_w_ready <= 1'd1;
                builder_basesoc_axilitesram1_next_state <= 3'd4;
            end
        end
        2'd2: begin
            main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value1 <= main_basesoc_ram_dat_r;
            main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce1 <= 1'd1;
            builder_basesoc_axilitesram1_next_state <= 2'd3;
        end
        2'd3: begin
            main_basesoc_ram_last_was_read_axilitesram1_next_value2 <= 1'd1;
            main_basesoc_ram_last_was_read_axilitesram1_next_value_ce2 <= 1'd1;
            main_basesoc_ram_bus_r_payload_data <= main_basesoc_ram_port_dat_r_latched;
            main_basesoc_ram_bus_r_payload_resp <= 1'd0;
            main_basesoc_ram_bus_r_valid <= 1'd1;
            if (main_basesoc_ram_bus_r_ready) begin
                builder_basesoc_axilitesram1_next_state <= 1'd0;
            end
        end
        3'd4: begin
            main_basesoc_ram_last_was_read_axilitesram1_next_value2 <= 1'd0;
            main_basesoc_ram_last_was_read_axilitesram1_next_value_ce2 <= 1'd1;
            main_basesoc_ram_bus_b_valid <= 1'd1;
            main_basesoc_ram_bus_b_payload_resp <= 1'd0;
            if (main_basesoc_ram_bus_b_ready) begin
                builder_basesoc_axilitesram1_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_basesoc_ram_bus_aw_valid & main_basesoc_ram_bus_ar_valid)) begin
                main_basesoc_ram_do_write <= main_basesoc_ram_last_was_read;
                main_basesoc_ram_do_read <= (~main_basesoc_ram_last_was_read);
            end else begin
                main_basesoc_ram_do_write <= main_basesoc_ram_bus_aw_valid;
                main_basesoc_ram_do_read <= main_basesoc_ram_bus_ar_valid;
            end
            main_basesoc_ram_bus_aw_ready <= (main_basesoc_ram_last_was_read | (~main_basesoc_ram_bus_ar_valid));
            main_basesoc_ram_bus_ar_ready <= ((~main_basesoc_ram_last_was_read) | (~main_basesoc_ram_bus_aw_valid));
            if (main_basesoc_ram_do_write) begin
                main_basesoc_ram_adr <= main_basesoc_ram_bus_aw_payload_addr[31:2];
                if (main_basesoc_ram_bus_w_valid) begin
                    main_basesoc_ram_bus_w_ready <= 1'd1;
                    builder_basesoc_axilitesram1_next_state <= 3'd4;
                end else begin
                    main_basesoc_ram_port_adr_reg_axilitesram1_next_value0 <= main_basesoc_ram_adr;
                    main_basesoc_ram_port_adr_reg_axilitesram1_next_value_ce0 <= 1'd1;
                    builder_basesoc_axilitesram1_next_state <= 1'd1;
                end
            end else begin
                if (main_basesoc_ram_do_read) begin
                    main_basesoc_ram_adr <= main_basesoc_ram_bus_ar_payload_addr[31:2];
                    builder_basesoc_axilitesram1_next_state <= 2'd2;
                end
            end
        end
    endcase
end
always @(*) begin
    builder_basesoc_rs232phytx_next_state <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    main_basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_basesoc_tx_enable <= 1'd0;
    main_basesoc_tx_sink_ready <= 1'd0;
    builder_basesoc_rs232phytx_next_state <= builder_basesoc_rs232phytx_state;
    case (builder_basesoc_rs232phytx_state)
        1'd1: begin
            main_basesoc_tx_enable <= 1'd1;
            if (main_basesoc_tx_tick) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= main_basesoc_tx_data;
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_count_rs232phytx_next_value0 <= (main_basesoc_tx_count + 1'd1);
                main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_basesoc_tx_data[7:1]};
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_basesoc_tx_count == 4'd9)) begin
                    main_basesoc_tx_sink_ready <= 1'd1;
                    builder_basesoc_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_basesoc_tx_sink_valid) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= main_basesoc_tx_sink_payload_data;
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_basesoc_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_basesoc_rs232phyrx_next_state <= 1'd0;
    main_basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_basesoc_rx_enable <= 1'd0;
    main_basesoc_rx_source_payload_data <= 8'd0;
    main_basesoc_rx_source_valid <= 1'd0;
    builder_basesoc_rs232phyrx_next_state <= builder_basesoc_rs232phyrx_state;
    case (builder_basesoc_rs232phyrx_state)
        1'd1: begin
            main_basesoc_rx_enable <= 1'd1;
            if (main_basesoc_rx_tick) begin
                main_basesoc_rx_count_rs232phyrx_next_value0 <= (main_basesoc_rx_count + 1'd1);
                main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_basesoc_rx_data_rs232phyrx_next_value1 <= {main_basesoc_rx_rx, main_basesoc_rx_data[7:1]};
                main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_basesoc_rx_count == 4'd9)) begin
                    main_basesoc_rx_source_valid <= (main_basesoc_rx_rx == 1'd1);
                    main_basesoc_rx_source_payload_data <= main_basesoc_rx_data;
                    builder_basesoc_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_basesoc_rx_rx == 1'd0) & (main_basesoc_rx_rx_d == 1'd1))) begin
                builder_basesoc_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_uart_uart_sink_valid = main_basesoc_rx_source_valid;
assign main_basesoc_rx_source_ready = main_basesoc_uart_uart_sink_ready;
assign main_basesoc_uart_uart_sink_first = main_basesoc_rx_source_first;
assign main_basesoc_uart_uart_sink_last = main_basesoc_rx_source_last;
assign main_basesoc_uart_uart_sink_payload_data = main_basesoc_rx_source_payload_data;
assign main_basesoc_tx_sink_valid = main_basesoc_uart_uart_source_valid;
assign main_basesoc_uart_uart_source_ready = main_basesoc_tx_sink_ready;
assign main_basesoc_tx_sink_first = main_basesoc_uart_uart_source_first;
assign main_basesoc_tx_sink_last = main_basesoc_uart_uart_source_last;
assign main_basesoc_tx_sink_payload_data = main_basesoc_uart_uart_source_payload_data;
assign main_basesoc_uart_tx_fifo_sink_valid = main_basesoc_uart_rxtx_re;
assign main_basesoc_uart_tx_fifo_sink_payload_data = main_basesoc_uart_rxtx_r;
assign main_basesoc_uart_uart_source_valid = main_basesoc_uart_tx_fifo_source_valid;
assign main_basesoc_uart_tx_fifo_source_ready = main_basesoc_uart_uart_source_ready;
assign main_basesoc_uart_uart_source_first = main_basesoc_uart_tx_fifo_source_first;
assign main_basesoc_uart_uart_source_last = main_basesoc_uart_tx_fifo_source_last;
assign main_basesoc_uart_uart_source_payload_data = main_basesoc_uart_tx_fifo_source_payload_data;
assign main_basesoc_uart_txfull_status = (~main_basesoc_uart_tx_fifo_sink_ready);
assign main_basesoc_uart_txempty_status = (~main_basesoc_uart_tx_fifo_source_valid);
assign main_basesoc_uart_tx_trigger = main_basesoc_uart_tx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_valid = main_basesoc_uart_uart_sink_valid;
assign main_basesoc_uart_uart_sink_ready = main_basesoc_uart_rx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_first = main_basesoc_uart_uart_sink_first;
assign main_basesoc_uart_rx_fifo_sink_last = main_basesoc_uart_uart_sink_last;
assign main_basesoc_uart_rx_fifo_sink_payload_data = main_basesoc_uart_uart_sink_payload_data;
assign main_basesoc_uart_rxtx_w = main_basesoc_uart_rx_fifo_source_payload_data;
assign main_basesoc_uart_rx_fifo_source_ready = (main_basesoc_uart_rx_clear | (1'd0 & main_basesoc_uart_rxtx_we));
assign main_basesoc_uart_rxempty_status = (~main_basesoc_uart_rx_fifo_source_valid);
assign main_basesoc_uart_rxfull_status = (~main_basesoc_uart_rx_fifo_sink_ready);
assign main_basesoc_uart_rx_trigger = main_basesoc_uart_rx_fifo_source_valid;
assign main_basesoc_uart_tx0 = main_basesoc_uart_tx_status;
assign main_basesoc_uart_tx1 = main_basesoc_uart_tx_pending;
always @(*) begin
    main_basesoc_uart_tx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[0])) begin
        main_basesoc_uart_tx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_rx0 = main_basesoc_uart_rx_status;
assign main_basesoc_uart_rx1 = main_basesoc_uart_rx_pending;
always @(*) begin
    main_basesoc_uart_rx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[1])) begin
        main_basesoc_uart_rx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_irq = ((main_basesoc_uart_pending_status[0] & main_basesoc_uart_enable_storage[0]) | (main_basesoc_uart_pending_status[1] & main_basesoc_uart_enable_storage[1]));
assign main_basesoc_uart_tx_status = main_basesoc_uart_tx_trigger;
assign main_basesoc_uart_rx_status = main_basesoc_uart_rx_trigger;
assign main_basesoc_uart_tx_fifo_syncfifo_din = {main_basesoc_uart_tx_fifo_fifo_in_last, main_basesoc_uart_tx_fifo_fifo_in_first, main_basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_tx_fifo_fifo_out_last, main_basesoc_uart_tx_fifo_fifo_out_first, main_basesoc_uart_tx_fifo_fifo_out_payload_data} = main_basesoc_uart_tx_fifo_syncfifo_dout;
assign main_basesoc_uart_tx_fifo_sink_ready = main_basesoc_uart_tx_fifo_syncfifo_writable;
assign main_basesoc_uart_tx_fifo_syncfifo_we = main_basesoc_uart_tx_fifo_sink_valid;
assign main_basesoc_uart_tx_fifo_fifo_in_first = main_basesoc_uart_tx_fifo_sink_first;
assign main_basesoc_uart_tx_fifo_fifo_in_last = main_basesoc_uart_tx_fifo_sink_last;
assign main_basesoc_uart_tx_fifo_fifo_in_payload_data = main_basesoc_uart_tx_fifo_sink_payload_data;
assign main_basesoc_uart_tx_fifo_source_valid = main_basesoc_uart_tx_fifo_readable;
assign main_basesoc_uart_tx_fifo_source_first = main_basesoc_uart_tx_fifo_fifo_out_first;
assign main_basesoc_uart_tx_fifo_source_last = main_basesoc_uart_tx_fifo_fifo_out_last;
assign main_basesoc_uart_tx_fifo_source_payload_data = main_basesoc_uart_tx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_tx_fifo_re = main_basesoc_uart_tx_fifo_source_ready;
assign main_basesoc_uart_tx_fifo_syncfifo_re = (main_basesoc_uart_tx_fifo_syncfifo_readable & ((~main_basesoc_uart_tx_fifo_readable) | main_basesoc_uart_tx_fifo_re));
assign main_basesoc_uart_tx_fifo_level1 = (main_basesoc_uart_tx_fifo_level0 + main_basesoc_uart_tx_fifo_readable);
always @(*) begin
    main_basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_tx_fifo_replace) begin
        main_basesoc_uart_tx_fifo_wrport_adr <= (main_basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_tx_fifo_wrport_adr <= main_basesoc_uart_tx_fifo_produce;
    end
end
assign main_basesoc_uart_tx_fifo_wrport_dat_w = main_basesoc_uart_tx_fifo_syncfifo_din;
assign main_basesoc_uart_tx_fifo_wrport_we = (main_basesoc_uart_tx_fifo_syncfifo_we & (main_basesoc_uart_tx_fifo_syncfifo_writable | main_basesoc_uart_tx_fifo_replace));
assign main_basesoc_uart_tx_fifo_do_read = (main_basesoc_uart_tx_fifo_syncfifo_readable & main_basesoc_uart_tx_fifo_syncfifo_re);
assign main_basesoc_uart_tx_fifo_rdport_adr = main_basesoc_uart_tx_fifo_consume;
assign main_basesoc_uart_tx_fifo_syncfifo_dout = main_basesoc_uart_tx_fifo_rdport_dat_r;
assign main_basesoc_uart_tx_fifo_rdport_re = main_basesoc_uart_tx_fifo_do_read;
assign main_basesoc_uart_tx_fifo_syncfifo_writable = (main_basesoc_uart_tx_fifo_level0 != 5'd16);
assign main_basesoc_uart_tx_fifo_syncfifo_readable = (main_basesoc_uart_tx_fifo_level0 != 1'd0);
assign main_basesoc_uart_rx_fifo_syncfifo_din = {main_basesoc_uart_rx_fifo_fifo_in_last, main_basesoc_uart_rx_fifo_fifo_in_first, main_basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_rx_fifo_fifo_out_last, main_basesoc_uart_rx_fifo_fifo_out_first, main_basesoc_uart_rx_fifo_fifo_out_payload_data} = main_basesoc_uart_rx_fifo_syncfifo_dout;
assign main_basesoc_uart_rx_fifo_sink_ready = main_basesoc_uart_rx_fifo_syncfifo_writable;
assign main_basesoc_uart_rx_fifo_syncfifo_we = main_basesoc_uart_rx_fifo_sink_valid;
assign main_basesoc_uart_rx_fifo_fifo_in_first = main_basesoc_uart_rx_fifo_sink_first;
assign main_basesoc_uart_rx_fifo_fifo_in_last = main_basesoc_uart_rx_fifo_sink_last;
assign main_basesoc_uart_rx_fifo_fifo_in_payload_data = main_basesoc_uart_rx_fifo_sink_payload_data;
assign main_basesoc_uart_rx_fifo_source_valid = main_basesoc_uart_rx_fifo_readable;
assign main_basesoc_uart_rx_fifo_source_first = main_basesoc_uart_rx_fifo_fifo_out_first;
assign main_basesoc_uart_rx_fifo_source_last = main_basesoc_uart_rx_fifo_fifo_out_last;
assign main_basesoc_uart_rx_fifo_source_payload_data = main_basesoc_uart_rx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_rx_fifo_re = main_basesoc_uart_rx_fifo_source_ready;
assign main_basesoc_uart_rx_fifo_syncfifo_re = (main_basesoc_uart_rx_fifo_syncfifo_readable & ((~main_basesoc_uart_rx_fifo_readable) | main_basesoc_uart_rx_fifo_re));
assign main_basesoc_uart_rx_fifo_level1 = (main_basesoc_uart_rx_fifo_level0 + main_basesoc_uart_rx_fifo_readable);
always @(*) begin
    main_basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_rx_fifo_replace) begin
        main_basesoc_uart_rx_fifo_wrport_adr <= (main_basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_rx_fifo_wrport_adr <= main_basesoc_uart_rx_fifo_produce;
    end
end
assign main_basesoc_uart_rx_fifo_wrport_dat_w = main_basesoc_uart_rx_fifo_syncfifo_din;
assign main_basesoc_uart_rx_fifo_wrport_we = (main_basesoc_uart_rx_fifo_syncfifo_we & (main_basesoc_uart_rx_fifo_syncfifo_writable | main_basesoc_uart_rx_fifo_replace));
assign main_basesoc_uart_rx_fifo_do_read = (main_basesoc_uart_rx_fifo_syncfifo_readable & main_basesoc_uart_rx_fifo_syncfifo_re);
assign main_basesoc_uart_rx_fifo_rdport_adr = main_basesoc_uart_rx_fifo_consume;
assign main_basesoc_uart_rx_fifo_syncfifo_dout = main_basesoc_uart_rx_fifo_rdport_dat_r;
assign main_basesoc_uart_rx_fifo_rdport_re = main_basesoc_uart_rx_fifo_do_read;
assign main_basesoc_uart_rx_fifo_syncfifo_writable = (main_basesoc_uart_rx_fifo_level0 != 5'd16);
assign main_basesoc_uart_rx_fifo_syncfifo_readable = (main_basesoc_uart_rx_fifo_level0 != 1'd0);
assign main_basesoc_timer_zero_trigger = (main_basesoc_timer_value == 1'd0);
assign main_basesoc_timer_zero0 = main_basesoc_timer_zero_status;
assign main_basesoc_timer_zero1 = main_basesoc_timer_zero_pending;
always @(*) begin
    main_basesoc_timer_zero_clear <= 1'd0;
    if ((main_basesoc_timer_pending_re & main_basesoc_timer_pending_r)) begin
        main_basesoc_timer_zero_clear <= 1'd1;
    end
end
assign main_basesoc_timer_irq = (main_basesoc_timer_pending_status & main_basesoc_timer_enable_storage);
assign main_basesoc_timer_zero_status = main_basesoc_timer_zero_trigger;
assign main_leds_wait = (~main_leds_done);
always @(*) begin
    main_leds_leds <= 6'd0;
    if ((main_leds_mode == 1'd1)) begin
        main_leds_leds <= main_leds_storage;
    end else begin
        main_leds_leds <= main_leds_chaser;
    end
end
assign {led_n5, led_n4, led_n3, led_n2, led_n1, led_n0} = (main_leds_leds ^ 1'd0);
assign main_leds_done = (main_leds_count == 1'd0);
always @(*) begin
    main_full_rate_phy_dfi_p0_act_n <= 1'd1;
    main_full_rate_phy_dfi_p0_address <= 13'd0;
    main_full_rate_phy_dfi_p0_bank <= 2'd0;
    main_full_rate_phy_dfi_p0_cas_n <= 1'd1;
    main_full_rate_phy_dfi_p0_cke <= 1'd0;
    main_full_rate_phy_dfi_p0_cs_n <= 1'd1;
    main_full_rate_phy_dfi_p0_odt <= 1'd0;
    main_full_rate_phy_dfi_p0_ras_n <= 1'd1;
    main_full_rate_phy_dfi_p0_rddata_en <= 1'd0;
    main_full_rate_phy_dfi_p0_reset_n <= 1'd0;
    main_full_rate_phy_dfi_p0_we_n <= 1'd1;
    main_full_rate_phy_dfi_p0_wrdata <= 16'd0;
    main_full_rate_phy_dfi_p0_wrdata_mask <= 2'd0;
    case (main_phase_sel)
        1'd0: begin
            main_full_rate_phy_dfi_p0_address <= main_dfi_dfi_p0_address;
            main_full_rate_phy_dfi_p0_bank <= main_dfi_dfi_p0_bank;
            main_full_rate_phy_dfi_p0_cas_n <= main_dfi_dfi_p0_cas_n;
            main_full_rate_phy_dfi_p0_cs_n <= main_dfi_dfi_p0_cs_n;
            main_full_rate_phy_dfi_p0_ras_n <= main_dfi_dfi_p0_ras_n;
            main_full_rate_phy_dfi_p0_we_n <= main_dfi_dfi_p0_we_n;
            main_full_rate_phy_dfi_p0_cke <= main_dfi_dfi_p0_cke;
            main_full_rate_phy_dfi_p0_odt <= main_dfi_dfi_p0_odt;
            main_full_rate_phy_dfi_p0_reset_n <= main_dfi_dfi_p0_reset_n;
            main_full_rate_phy_dfi_p0_act_n <= main_dfi_dfi_p0_act_n;
            main_full_rate_phy_dfi_p0_wrdata <= main_dfi_dfi_p0_wrdata;
            main_full_rate_phy_dfi_p0_wrdata_mask <= main_dfi_dfi_p0_wrdata_mask;
            main_full_rate_phy_dfi_p0_rddata_en <= main_dfi_dfi_p0_rddata_en;
        end
        1'd1: begin
            main_full_rate_phy_dfi_p0_address <= main_dfi_dfi_p1_address;
            main_full_rate_phy_dfi_p0_bank <= main_dfi_dfi_p1_bank;
            main_full_rate_phy_dfi_p0_cas_n <= main_dfi_dfi_p1_cas_n;
            main_full_rate_phy_dfi_p0_cs_n <= main_dfi_dfi_p1_cs_n;
            main_full_rate_phy_dfi_p0_ras_n <= main_dfi_dfi_p1_ras_n;
            main_full_rate_phy_dfi_p0_we_n <= main_dfi_dfi_p1_we_n;
            main_full_rate_phy_dfi_p0_cke <= main_dfi_dfi_p1_cke;
            main_full_rate_phy_dfi_p0_odt <= main_dfi_dfi_p1_odt;
            main_full_rate_phy_dfi_p0_reset_n <= main_dfi_dfi_p1_reset_n;
            main_full_rate_phy_dfi_p0_act_n <= main_dfi_dfi_p1_act_n;
            main_full_rate_phy_dfi_p0_wrdata <= main_dfi_dfi_p1_wrdata;
            main_full_rate_phy_dfi_p0_wrdata_mask <= main_dfi_dfi_p1_wrdata_mask;
            main_full_rate_phy_dfi_p0_rddata_en <= main_dfi_dfi_p1_rddata_en;
        end
    endcase
end
assign main_full_rate_phy_dfi_p0_wrdata_en = ((main_dfi_dfi_p0_wrdata_en & (main_phase_sel == 1'd0)) | main_wr_data_en_d);
assign main_dfi_dfi_p0_rddata = main_rddata_d;
assign main_dfi_dfi_p0_rddata_valid = main_full_rate_phy_dfi_p0_rddata_valid;
assign main_dfi_dfi_p1_rddata = main_full_rate_phy_dfi_p0_rddata;
assign main_dfi_dfi_p1_rddata_valid = main_full_rate_phy_dfi_p0_rddata_valid;
assign main_dfi_dfi_p0_address = main_sdram_master_p0_address;
assign main_dfi_dfi_p0_bank = main_sdram_master_p0_bank;
assign main_dfi_dfi_p0_cas_n = main_sdram_master_p0_cas_n;
assign main_dfi_dfi_p0_cs_n = main_sdram_master_p0_cs_n;
assign main_dfi_dfi_p0_ras_n = main_sdram_master_p0_ras_n;
assign main_dfi_dfi_p0_we_n = main_sdram_master_p0_we_n;
assign main_dfi_dfi_p0_cke = main_sdram_master_p0_cke;
assign main_dfi_dfi_p0_odt = main_sdram_master_p0_odt;
assign main_dfi_dfi_p0_reset_n = main_sdram_master_p0_reset_n;
assign main_dfi_dfi_p0_act_n = main_sdram_master_p0_act_n;
assign main_dfi_dfi_p0_wrdata = main_sdram_master_p0_wrdata;
assign main_dfi_dfi_p0_wrdata_en = main_sdram_master_p0_wrdata_en;
assign main_dfi_dfi_p0_wrdata_mask = main_sdram_master_p0_wrdata_mask;
assign main_dfi_dfi_p0_rddata_en = main_sdram_master_p0_rddata_en;
assign main_sdram_master_p0_rddata = main_dfi_dfi_p0_rddata;
assign main_sdram_master_p0_rddata_valid = main_dfi_dfi_p0_rddata_valid;
assign main_dfi_dfi_p1_address = main_sdram_master_p1_address;
assign main_dfi_dfi_p1_bank = main_sdram_master_p1_bank;
assign main_dfi_dfi_p1_cas_n = main_sdram_master_p1_cas_n;
assign main_dfi_dfi_p1_cs_n = main_sdram_master_p1_cs_n;
assign main_dfi_dfi_p1_ras_n = main_sdram_master_p1_ras_n;
assign main_dfi_dfi_p1_we_n = main_sdram_master_p1_we_n;
assign main_dfi_dfi_p1_cke = main_sdram_master_p1_cke;
assign main_dfi_dfi_p1_odt = main_sdram_master_p1_odt;
assign main_dfi_dfi_p1_reset_n = main_sdram_master_p1_reset_n;
assign main_dfi_dfi_p1_act_n = main_sdram_master_p1_act_n;
assign main_dfi_dfi_p1_wrdata = main_sdram_master_p1_wrdata;
assign main_dfi_dfi_p1_wrdata_en = main_sdram_master_p1_wrdata_en;
assign main_dfi_dfi_p1_wrdata_mask = main_sdram_master_p1_wrdata_mask;
assign main_dfi_dfi_p1_rddata_en = main_sdram_master_p1_rddata_en;
assign main_sdram_master_p1_rddata = main_dfi_dfi_p1_rddata;
assign main_sdram_master_p1_rddata_valid = main_dfi_dfi_p1_rddata_valid;
assign main_sdram_slave_p0_address = main_sdram_dfi_p0_address;
assign main_sdram_slave_p0_bank = main_sdram_dfi_p0_bank;
assign main_sdram_slave_p0_cas_n = main_sdram_dfi_p0_cas_n;
assign main_sdram_slave_p0_cs_n = main_sdram_dfi_p0_cs_n;
assign main_sdram_slave_p0_ras_n = main_sdram_dfi_p0_ras_n;
assign main_sdram_slave_p0_we_n = main_sdram_dfi_p0_we_n;
assign main_sdram_slave_p0_cke = main_sdram_dfi_p0_cke;
assign main_sdram_slave_p0_odt = main_sdram_dfi_p0_odt;
assign main_sdram_slave_p0_reset_n = main_sdram_dfi_p0_reset_n;
assign main_sdram_slave_p0_act_n = main_sdram_dfi_p0_act_n;
assign main_sdram_slave_p0_wrdata = main_sdram_dfi_p0_wrdata;
assign main_sdram_slave_p0_wrdata_en = main_sdram_dfi_p0_wrdata_en;
assign main_sdram_slave_p0_wrdata_mask = main_sdram_dfi_p0_wrdata_mask;
assign main_sdram_slave_p0_rddata_en = main_sdram_dfi_p0_rddata_en;
assign main_sdram_dfi_p0_rddata = main_sdram_slave_p0_rddata;
assign main_sdram_dfi_p0_rddata_valid = main_sdram_slave_p0_rddata_valid;
assign main_sdram_slave_p1_address = main_sdram_dfi_p1_address;
assign main_sdram_slave_p1_bank = main_sdram_dfi_p1_bank;
assign main_sdram_slave_p1_cas_n = main_sdram_dfi_p1_cas_n;
assign main_sdram_slave_p1_cs_n = main_sdram_dfi_p1_cs_n;
assign main_sdram_slave_p1_ras_n = main_sdram_dfi_p1_ras_n;
assign main_sdram_slave_p1_we_n = main_sdram_dfi_p1_we_n;
assign main_sdram_slave_p1_cke = main_sdram_dfi_p1_cke;
assign main_sdram_slave_p1_odt = main_sdram_dfi_p1_odt;
assign main_sdram_slave_p1_reset_n = main_sdram_dfi_p1_reset_n;
assign main_sdram_slave_p1_act_n = main_sdram_dfi_p1_act_n;
assign main_sdram_slave_p1_wrdata = main_sdram_dfi_p1_wrdata;
assign main_sdram_slave_p1_wrdata_en = main_sdram_dfi_p1_wrdata_en;
assign main_sdram_slave_p1_wrdata_mask = main_sdram_dfi_p1_wrdata_mask;
assign main_sdram_slave_p1_rddata_en = main_sdram_dfi_p1_rddata_en;
assign main_sdram_dfi_p1_rddata = main_sdram_slave_p1_rddata;
assign main_sdram_dfi_p1_rddata_valid = main_sdram_slave_p1_rddata_valid;
always @(*) begin
    main_sdram_csr_dfi_p0_rddata <= 16'd0;
    main_sdram_csr_dfi_p0_rddata_valid <= 1'd0;
    main_sdram_csr_dfi_p1_rddata <= 16'd0;
    main_sdram_csr_dfi_p1_rddata_valid <= 1'd0;
    main_sdram_ext_dfi_p0_rddata <= 16'd0;
    main_sdram_ext_dfi_p0_rddata_valid <= 1'd0;
    main_sdram_ext_dfi_p1_rddata <= 16'd0;
    main_sdram_ext_dfi_p1_rddata_valid <= 1'd0;
    main_sdram_master_p0_act_n <= 1'd1;
    main_sdram_master_p0_address <= 13'd0;
    main_sdram_master_p0_bank <= 2'd0;
    main_sdram_master_p0_cas_n <= 1'd1;
    main_sdram_master_p0_cke <= 1'd0;
    main_sdram_master_p0_cs_n <= 1'd1;
    main_sdram_master_p0_odt <= 1'd0;
    main_sdram_master_p0_ras_n <= 1'd1;
    main_sdram_master_p0_rddata_en <= 1'd0;
    main_sdram_master_p0_reset_n <= 1'd0;
    main_sdram_master_p0_we_n <= 1'd1;
    main_sdram_master_p0_wrdata <= 16'd0;
    main_sdram_master_p0_wrdata_en <= 1'd0;
    main_sdram_master_p0_wrdata_mask <= 2'd0;
    main_sdram_master_p1_act_n <= 1'd1;
    main_sdram_master_p1_address <= 13'd0;
    main_sdram_master_p1_bank <= 2'd0;
    main_sdram_master_p1_cas_n <= 1'd1;
    main_sdram_master_p1_cke <= 1'd0;
    main_sdram_master_p1_cs_n <= 1'd1;
    main_sdram_master_p1_odt <= 1'd0;
    main_sdram_master_p1_ras_n <= 1'd1;
    main_sdram_master_p1_rddata_en <= 1'd0;
    main_sdram_master_p1_reset_n <= 1'd0;
    main_sdram_master_p1_we_n <= 1'd1;
    main_sdram_master_p1_wrdata <= 16'd0;
    main_sdram_master_p1_wrdata_en <= 1'd0;
    main_sdram_master_p1_wrdata_mask <= 2'd0;
    main_sdram_slave_p0_rddata <= 16'd0;
    main_sdram_slave_p0_rddata_valid <= 1'd0;
    main_sdram_slave_p1_rddata <= 16'd0;
    main_sdram_slave_p1_rddata_valid <= 1'd0;
    if (main_sdram_sel) begin
        if (main_sdram_ext_dfi_sel) begin
            main_sdram_master_p0_address <= main_sdram_ext_dfi_p0_address;
            main_sdram_master_p0_bank <= main_sdram_ext_dfi_p0_bank;
            main_sdram_master_p0_cas_n <= main_sdram_ext_dfi_p0_cas_n;
            main_sdram_master_p0_cs_n <= main_sdram_ext_dfi_p0_cs_n;
            main_sdram_master_p0_ras_n <= main_sdram_ext_dfi_p0_ras_n;
            main_sdram_master_p0_we_n <= main_sdram_ext_dfi_p0_we_n;
            main_sdram_master_p0_cke <= main_sdram_ext_dfi_p0_cke;
            main_sdram_master_p0_odt <= main_sdram_ext_dfi_p0_odt;
            main_sdram_master_p0_reset_n <= main_sdram_ext_dfi_p0_reset_n;
            main_sdram_master_p0_act_n <= main_sdram_ext_dfi_p0_act_n;
            main_sdram_master_p0_wrdata <= main_sdram_ext_dfi_p0_wrdata;
            main_sdram_master_p0_wrdata_en <= main_sdram_ext_dfi_p0_wrdata_en;
            main_sdram_master_p0_wrdata_mask <= main_sdram_ext_dfi_p0_wrdata_mask;
            main_sdram_master_p0_rddata_en <= main_sdram_ext_dfi_p0_rddata_en;
            main_sdram_ext_dfi_p0_rddata <= main_sdram_master_p0_rddata;
            main_sdram_ext_dfi_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
            main_sdram_master_p1_address <= main_sdram_ext_dfi_p1_address;
            main_sdram_master_p1_bank <= main_sdram_ext_dfi_p1_bank;
            main_sdram_master_p1_cas_n <= main_sdram_ext_dfi_p1_cas_n;
            main_sdram_master_p1_cs_n <= main_sdram_ext_dfi_p1_cs_n;
            main_sdram_master_p1_ras_n <= main_sdram_ext_dfi_p1_ras_n;
            main_sdram_master_p1_we_n <= main_sdram_ext_dfi_p1_we_n;
            main_sdram_master_p1_cke <= main_sdram_ext_dfi_p1_cke;
            main_sdram_master_p1_odt <= main_sdram_ext_dfi_p1_odt;
            main_sdram_master_p1_reset_n <= main_sdram_ext_dfi_p1_reset_n;
            main_sdram_master_p1_act_n <= main_sdram_ext_dfi_p1_act_n;
            main_sdram_master_p1_wrdata <= main_sdram_ext_dfi_p1_wrdata;
            main_sdram_master_p1_wrdata_en <= main_sdram_ext_dfi_p1_wrdata_en;
            main_sdram_master_p1_wrdata_mask <= main_sdram_ext_dfi_p1_wrdata_mask;
            main_sdram_master_p1_rddata_en <= main_sdram_ext_dfi_p1_rddata_en;
            main_sdram_ext_dfi_p1_rddata <= main_sdram_master_p1_rddata;
            main_sdram_ext_dfi_p1_rddata_valid <= main_sdram_master_p1_rddata_valid;
        end else begin
            main_sdram_master_p0_address <= main_sdram_slave_p0_address;
            main_sdram_master_p0_bank <= main_sdram_slave_p0_bank;
            main_sdram_master_p0_cas_n <= main_sdram_slave_p0_cas_n;
            main_sdram_master_p0_cs_n <= main_sdram_slave_p0_cs_n;
            main_sdram_master_p0_ras_n <= main_sdram_slave_p0_ras_n;
            main_sdram_master_p0_we_n <= main_sdram_slave_p0_we_n;
            main_sdram_master_p0_cke <= main_sdram_slave_p0_cke;
            main_sdram_master_p0_odt <= main_sdram_slave_p0_odt;
            main_sdram_master_p0_reset_n <= main_sdram_slave_p0_reset_n;
            main_sdram_master_p0_act_n <= main_sdram_slave_p0_act_n;
            main_sdram_master_p0_wrdata <= main_sdram_slave_p0_wrdata;
            main_sdram_master_p0_wrdata_en <= main_sdram_slave_p0_wrdata_en;
            main_sdram_master_p0_wrdata_mask <= main_sdram_slave_p0_wrdata_mask;
            main_sdram_master_p0_rddata_en <= main_sdram_slave_p0_rddata_en;
            main_sdram_slave_p0_rddata <= main_sdram_master_p0_rddata;
            main_sdram_slave_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
            main_sdram_master_p1_address <= main_sdram_slave_p1_address;
            main_sdram_master_p1_bank <= main_sdram_slave_p1_bank;
            main_sdram_master_p1_cas_n <= main_sdram_slave_p1_cas_n;
            main_sdram_master_p1_cs_n <= main_sdram_slave_p1_cs_n;
            main_sdram_master_p1_ras_n <= main_sdram_slave_p1_ras_n;
            main_sdram_master_p1_we_n <= main_sdram_slave_p1_we_n;
            main_sdram_master_p1_cke <= main_sdram_slave_p1_cke;
            main_sdram_master_p1_odt <= main_sdram_slave_p1_odt;
            main_sdram_master_p1_reset_n <= main_sdram_slave_p1_reset_n;
            main_sdram_master_p1_act_n <= main_sdram_slave_p1_act_n;
            main_sdram_master_p1_wrdata <= main_sdram_slave_p1_wrdata;
            main_sdram_master_p1_wrdata_en <= main_sdram_slave_p1_wrdata_en;
            main_sdram_master_p1_wrdata_mask <= main_sdram_slave_p1_wrdata_mask;
            main_sdram_master_p1_rddata_en <= main_sdram_slave_p1_rddata_en;
            main_sdram_slave_p1_rddata <= main_sdram_master_p1_rddata;
            main_sdram_slave_p1_rddata_valid <= main_sdram_master_p1_rddata_valid;
            if (1'd0) begin
                main_sdram_master_p0_cs_n <= {2{main_sdram_slave_p0_cs_n}};
                main_sdram_master_p1_cs_n <= {2{main_sdram_slave_p1_cs_n}};
            end
        end
    end else begin
        main_sdram_master_p0_address <= main_sdram_csr_dfi_p0_address;
        main_sdram_master_p0_bank <= main_sdram_csr_dfi_p0_bank;
        main_sdram_master_p0_cas_n <= main_sdram_csr_dfi_p0_cas_n;
        main_sdram_master_p0_cs_n <= main_sdram_csr_dfi_p0_cs_n;
        main_sdram_master_p0_ras_n <= main_sdram_csr_dfi_p0_ras_n;
        main_sdram_master_p0_we_n <= main_sdram_csr_dfi_p0_we_n;
        main_sdram_master_p0_cke <= main_sdram_csr_dfi_p0_cke;
        main_sdram_master_p0_odt <= main_sdram_csr_dfi_p0_odt;
        main_sdram_master_p0_reset_n <= main_sdram_csr_dfi_p0_reset_n;
        main_sdram_master_p0_act_n <= main_sdram_csr_dfi_p0_act_n;
        main_sdram_master_p0_wrdata <= main_sdram_csr_dfi_p0_wrdata;
        main_sdram_master_p0_wrdata_en <= main_sdram_csr_dfi_p0_wrdata_en;
        main_sdram_master_p0_wrdata_mask <= main_sdram_csr_dfi_p0_wrdata_mask;
        main_sdram_master_p0_rddata_en <= main_sdram_csr_dfi_p0_rddata_en;
        main_sdram_csr_dfi_p0_rddata <= main_sdram_master_p0_rddata;
        main_sdram_csr_dfi_p0_rddata_valid <= main_sdram_master_p0_rddata_valid;
        main_sdram_master_p1_address <= main_sdram_csr_dfi_p1_address;
        main_sdram_master_p1_bank <= main_sdram_csr_dfi_p1_bank;
        main_sdram_master_p1_cas_n <= main_sdram_csr_dfi_p1_cas_n;
        main_sdram_master_p1_cs_n <= main_sdram_csr_dfi_p1_cs_n;
        main_sdram_master_p1_ras_n <= main_sdram_csr_dfi_p1_ras_n;
        main_sdram_master_p1_we_n <= main_sdram_csr_dfi_p1_we_n;
        main_sdram_master_p1_cke <= main_sdram_csr_dfi_p1_cke;
        main_sdram_master_p1_odt <= main_sdram_csr_dfi_p1_odt;
        main_sdram_master_p1_reset_n <= main_sdram_csr_dfi_p1_reset_n;
        main_sdram_master_p1_act_n <= main_sdram_csr_dfi_p1_act_n;
        main_sdram_master_p1_wrdata <= main_sdram_csr_dfi_p1_wrdata;
        main_sdram_master_p1_wrdata_en <= main_sdram_csr_dfi_p1_wrdata_en;
        main_sdram_master_p1_wrdata_mask <= main_sdram_csr_dfi_p1_wrdata_mask;
        main_sdram_master_p1_rddata_en <= main_sdram_csr_dfi_p1_rddata_en;
        main_sdram_csr_dfi_p1_rddata <= main_sdram_master_p1_rddata;
        main_sdram_csr_dfi_p1_rddata_valid <= main_sdram_master_p1_rddata_valid;
    end
end
always @(*) begin
    main_sdram_csr_dfi_p0_cke <= 1'd0;
    main_sdram_csr_dfi_p0_cke <= main_sdram_cke;
end
always @(*) begin
    main_sdram_csr_dfi_p1_cke <= 1'd0;
    main_sdram_csr_dfi_p1_cke <= main_sdram_cke;
end
always @(*) begin
    main_sdram_csr_dfi_p0_odt <= 1'd0;
    main_sdram_csr_dfi_p0_odt <= main_sdram_odt;
end
always @(*) begin
    main_sdram_csr_dfi_p1_odt <= 1'd0;
    main_sdram_csr_dfi_p1_odt <= main_sdram_odt;
end
assign main_sdram_csr_dfi_p0_reset_n = main_sdram_reset_n;
assign main_sdram_csr_dfi_p1_reset_n = main_sdram_reset_n;
always @(*) begin
    main_sdram_csr_dfi_p0_cas_n <= 1'd1;
    main_sdram_csr_dfi_p0_cs_n <= 1'd1;
    main_sdram_csr_dfi_p0_ras_n <= 1'd1;
    main_sdram_csr_dfi_p0_we_n <= 1'd1;
    if (main_sdram_phaseinjector0_command_issue_re) begin
        if (main_sdram_phaseinjector0_csrfield_cs_top) begin
            main_sdram_csr_dfi_p0_cs_n <= 2'd2;
        end else begin
            if (main_sdram_phaseinjector0_csrfield_cs_bottom) begin
                main_sdram_csr_dfi_p0_cs_n <= 1'd1;
            end else begin
                main_sdram_csr_dfi_p0_cs_n <= {1{(~main_sdram_phaseinjector0_csrfield_cs)}};
            end
        end
        main_sdram_csr_dfi_p0_we_n <= (~main_sdram_phaseinjector0_csrfield_we);
        main_sdram_csr_dfi_p0_cas_n <= (~main_sdram_phaseinjector0_csrfield_cas);
        main_sdram_csr_dfi_p0_ras_n <= (~main_sdram_phaseinjector0_csrfield_ras);
    end else begin
        main_sdram_csr_dfi_p0_cs_n <= {1{1'd1}};
        main_sdram_csr_dfi_p0_we_n <= 1'd1;
        main_sdram_csr_dfi_p0_cas_n <= 1'd1;
        main_sdram_csr_dfi_p0_ras_n <= 1'd1;
    end
end
assign main_sdram_csr_dfi_p0_address = main_sdram_phaseinjector0_address_storage;
assign main_sdram_csr_dfi_p0_bank = main_sdram_phaseinjector0_baddress_storage;
assign main_sdram_csr_dfi_p0_wrdata_en = (main_sdram_phaseinjector0_command_issue_re & main_sdram_phaseinjector0_csrfield_wren);
assign main_sdram_csr_dfi_p0_rddata_en = (main_sdram_phaseinjector0_command_issue_re & main_sdram_phaseinjector0_csrfield_rden);
assign main_sdram_csr_dfi_p0_wrdata = main_sdram_phaseinjector0_wrdata_storage;
assign main_sdram_csr_dfi_p0_wrdata_mask = 1'd0;
always @(*) begin
    main_sdram_csr_dfi_p1_cas_n <= 1'd1;
    main_sdram_csr_dfi_p1_cs_n <= 1'd1;
    main_sdram_csr_dfi_p1_ras_n <= 1'd1;
    main_sdram_csr_dfi_p1_we_n <= 1'd1;
    if (main_sdram_phaseinjector1_command_issue_re) begin
        if (main_sdram_phaseinjector1_csrfield_cs_top) begin
            main_sdram_csr_dfi_p1_cs_n <= 2'd2;
        end else begin
            if (main_sdram_phaseinjector1_csrfield_cs_bottom) begin
                main_sdram_csr_dfi_p1_cs_n <= 1'd1;
            end else begin
                main_sdram_csr_dfi_p1_cs_n <= {1{(~main_sdram_phaseinjector1_csrfield_cs)}};
            end
        end
        main_sdram_csr_dfi_p1_we_n <= (~main_sdram_phaseinjector1_csrfield_we);
        main_sdram_csr_dfi_p1_cas_n <= (~main_sdram_phaseinjector1_csrfield_cas);
        main_sdram_csr_dfi_p1_ras_n <= (~main_sdram_phaseinjector1_csrfield_ras);
    end else begin
        main_sdram_csr_dfi_p1_cs_n <= {1{1'd1}};
        main_sdram_csr_dfi_p1_we_n <= 1'd1;
        main_sdram_csr_dfi_p1_cas_n <= 1'd1;
        main_sdram_csr_dfi_p1_ras_n <= 1'd1;
    end
end
assign main_sdram_csr_dfi_p1_address = main_sdram_phaseinjector1_address_storage;
assign main_sdram_csr_dfi_p1_bank = main_sdram_phaseinjector1_baddress_storage;
assign main_sdram_csr_dfi_p1_wrdata_en = (main_sdram_phaseinjector1_command_issue_re & main_sdram_phaseinjector1_csrfield_wren);
assign main_sdram_csr_dfi_p1_rddata_en = (main_sdram_phaseinjector1_command_issue_re & main_sdram_phaseinjector1_csrfield_rden);
assign main_sdram_csr_dfi_p1_wrdata = main_sdram_phaseinjector1_wrdata_storage;
assign main_sdram_csr_dfi_p1_wrdata_mask = 1'd0;
assign main_sdram_bankmachine0_req_valid = main_sdram_interface_bank0_valid;
assign main_sdram_interface_bank0_ready = main_sdram_bankmachine0_req_ready;
assign main_sdram_bankmachine0_req_we = main_sdram_interface_bank0_we;
assign main_sdram_bankmachine0_req_addr = main_sdram_interface_bank0_addr;
assign main_sdram_interface_bank0_lock = main_sdram_bankmachine0_req_lock;
assign main_sdram_interface_bank0_wdata_ready = main_sdram_bankmachine0_req_wdata_ready;
assign main_sdram_interface_bank0_rdata_valid = main_sdram_bankmachine0_req_rdata_valid;
assign main_sdram_bankmachine1_req_valid = main_sdram_interface_bank1_valid;
assign main_sdram_interface_bank1_ready = main_sdram_bankmachine1_req_ready;
assign main_sdram_bankmachine1_req_we = main_sdram_interface_bank1_we;
assign main_sdram_bankmachine1_req_addr = main_sdram_interface_bank1_addr;
assign main_sdram_interface_bank1_lock = main_sdram_bankmachine1_req_lock;
assign main_sdram_interface_bank1_wdata_ready = main_sdram_bankmachine1_req_wdata_ready;
assign main_sdram_interface_bank1_rdata_valid = main_sdram_bankmachine1_req_rdata_valid;
assign main_sdram_bankmachine2_req_valid = main_sdram_interface_bank2_valid;
assign main_sdram_interface_bank2_ready = main_sdram_bankmachine2_req_ready;
assign main_sdram_bankmachine2_req_we = main_sdram_interface_bank2_we;
assign main_sdram_bankmachine2_req_addr = main_sdram_interface_bank2_addr;
assign main_sdram_interface_bank2_lock = main_sdram_bankmachine2_req_lock;
assign main_sdram_interface_bank2_wdata_ready = main_sdram_bankmachine2_req_wdata_ready;
assign main_sdram_interface_bank2_rdata_valid = main_sdram_bankmachine2_req_rdata_valid;
assign main_sdram_bankmachine3_req_valid = main_sdram_interface_bank3_valid;
assign main_sdram_interface_bank3_ready = main_sdram_bankmachine3_req_ready;
assign main_sdram_bankmachine3_req_we = main_sdram_interface_bank3_we;
assign main_sdram_bankmachine3_req_addr = main_sdram_interface_bank3_addr;
assign main_sdram_interface_bank3_lock = main_sdram_bankmachine3_req_lock;
assign main_sdram_interface_bank3_wdata_ready = main_sdram_bankmachine3_req_wdata_ready;
assign main_sdram_interface_bank3_rdata_valid = main_sdram_bankmachine3_req_rdata_valid;
assign main_sdram_timer_wait = (~main_sdram_timer_done0);
assign main_sdram_postponer_req_i = main_sdram_timer_done0;
assign main_sdram_wants_refresh = main_sdram_postponer_req_o;
assign main_sdram_timer_done1 = (main_sdram_timer_count1 == 1'd0);
assign main_sdram_timer_done0 = main_sdram_timer_done1;
assign main_sdram_timer_count0 = main_sdram_timer_count1;
assign main_sdram_sequencer_start1 = (main_sdram_sequencer_start0 | (main_sdram_sequencer_count != 1'd0));
assign main_sdram_sequencer_done0 = (main_sdram_sequencer_done1 & (main_sdram_sequencer_count == 1'd0));
always @(*) begin
    builder_basesoc_refresher_next_state <= 2'd0;
    main_sdram_cmd_last <= 1'd0;
    main_sdram_cmd_valid <= 1'd0;
    main_sdram_sequencer_start0 <= 1'd0;
    builder_basesoc_refresher_next_state <= builder_basesoc_refresher_state;
    case (builder_basesoc_refresher_state)
        1'd1: begin
            main_sdram_cmd_valid <= 1'd1;
            if (main_sdram_cmd_ready) begin
                main_sdram_sequencer_start0 <= 1'd1;
                builder_basesoc_refresher_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_sdram_cmd_valid <= 1'd1;
            if (main_sdram_sequencer_done0) begin
                main_sdram_cmd_valid <= 1'd0;
                main_sdram_cmd_last <= 1'd1;
                builder_basesoc_refresher_next_state <= 1'd0;
            end
        end
        default: begin
            if (1'd1) begin
                if (main_sdram_wants_refresh) begin
                    builder_basesoc_refresher_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine0_sink_valid = main_sdram_bankmachine0_req_valid;
assign main_sdram_bankmachine0_req_ready = main_sdram_bankmachine0_sink_ready;
assign main_sdram_bankmachine0_sink_payload_we = main_sdram_bankmachine0_req_we;
assign main_sdram_bankmachine0_sink_payload_addr = main_sdram_bankmachine0_req_addr;
assign main_sdram_bankmachine0_sink_sink_valid = main_sdram_bankmachine0_source_valid;
assign main_sdram_bankmachine0_source_ready = main_sdram_bankmachine0_sink_sink_ready;
assign main_sdram_bankmachine0_sink_sink_first = main_sdram_bankmachine0_source_first;
assign main_sdram_bankmachine0_sink_sink_last = main_sdram_bankmachine0_source_last;
assign main_sdram_bankmachine0_sink_sink_payload_we = main_sdram_bankmachine0_source_payload_we;
assign main_sdram_bankmachine0_sink_sink_payload_addr = main_sdram_bankmachine0_source_payload_addr;
assign main_sdram_bankmachine0_source_source_ready = (main_sdram_bankmachine0_req_wdata_ready | main_sdram_bankmachine0_req_rdata_valid);
assign main_sdram_bankmachine0_req_lock = (main_sdram_bankmachine0_source_valid | main_sdram_bankmachine0_source_source_valid);
assign main_sdram_bankmachine0_row_hit = (main_sdram_bankmachine0_row == main_sdram_bankmachine0_source_source_payload_addr[20:8]);
assign main_sdram_bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
    main_sdram_bankmachine0_cmd_payload_a <= 13'd0;
    if (main_sdram_bankmachine0_row_col_n_addr_sel) begin
        main_sdram_bankmachine0_cmd_payload_a <= main_sdram_bankmachine0_source_source_payload_addr[20:8];
    end else begin
        main_sdram_bankmachine0_cmd_payload_a <= ((main_sdram_bankmachine0_auto_precharge <<< 4'd10) | {main_sdram_bankmachine0_source_source_payload_addr[7:0], {1{1'd0}}});
    end
end
assign main_sdram_bankmachine0_twtpcon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_cmd_payload_is_write);
assign main_sdram_bankmachine0_trccon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_row_open);
assign main_sdram_bankmachine0_trascon_valid = ((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_ready) & main_sdram_bankmachine0_row_open);
always @(*) begin
    main_sdram_bankmachine0_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine0_source_valid & main_sdram_bankmachine0_source_source_valid)) begin
        if ((main_sdram_bankmachine0_source_payload_addr[20:8] != main_sdram_bankmachine0_source_source_payload_addr[20:8])) begin
            main_sdram_bankmachine0_auto_precharge <= (main_sdram_bankmachine0_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine0_syncfifo0_din = {main_sdram_bankmachine0_fifo_in_last, main_sdram_bankmachine0_fifo_in_first, main_sdram_bankmachine0_fifo_in_payload_addr, main_sdram_bankmachine0_fifo_in_payload_we};
assign {main_sdram_bankmachine0_fifo_out_last, main_sdram_bankmachine0_fifo_out_first, main_sdram_bankmachine0_fifo_out_payload_addr, main_sdram_bankmachine0_fifo_out_payload_we} = main_sdram_bankmachine0_syncfifo0_dout;
assign main_sdram_bankmachine0_sink_ready = main_sdram_bankmachine0_syncfifo0_writable;
assign main_sdram_bankmachine0_syncfifo0_we = main_sdram_bankmachine0_sink_valid;
assign main_sdram_bankmachine0_fifo_in_first = main_sdram_bankmachine0_sink_first;
assign main_sdram_bankmachine0_fifo_in_last = main_sdram_bankmachine0_sink_last;
assign main_sdram_bankmachine0_fifo_in_payload_we = main_sdram_bankmachine0_sink_payload_we;
assign main_sdram_bankmachine0_fifo_in_payload_addr = main_sdram_bankmachine0_sink_payload_addr;
assign main_sdram_bankmachine0_source_valid = main_sdram_bankmachine0_syncfifo0_readable;
assign main_sdram_bankmachine0_source_first = main_sdram_bankmachine0_fifo_out_first;
assign main_sdram_bankmachine0_source_last = main_sdram_bankmachine0_fifo_out_last;
assign main_sdram_bankmachine0_source_payload_we = main_sdram_bankmachine0_fifo_out_payload_we;
assign main_sdram_bankmachine0_source_payload_addr = main_sdram_bankmachine0_fifo_out_payload_addr;
assign main_sdram_bankmachine0_syncfifo0_re = main_sdram_bankmachine0_source_ready;
always @(*) begin
    main_sdram_bankmachine0_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine0_replace) begin
        main_sdram_bankmachine0_wrport_adr <= (main_sdram_bankmachine0_produce - 1'd1);
    end else begin
        main_sdram_bankmachine0_wrport_adr <= main_sdram_bankmachine0_produce;
    end
end
assign main_sdram_bankmachine0_wrport_dat_w = main_sdram_bankmachine0_syncfifo0_din;
assign main_sdram_bankmachine0_wrport_we = (main_sdram_bankmachine0_syncfifo0_we & (main_sdram_bankmachine0_syncfifo0_writable | main_sdram_bankmachine0_replace));
assign main_sdram_bankmachine0_do_read = (main_sdram_bankmachine0_syncfifo0_readable & main_sdram_bankmachine0_syncfifo0_re);
assign main_sdram_bankmachine0_rdport_adr = main_sdram_bankmachine0_consume;
assign main_sdram_bankmachine0_syncfifo0_dout = main_sdram_bankmachine0_rdport_dat_r;
assign main_sdram_bankmachine0_syncfifo0_writable = (main_sdram_bankmachine0_level != 4'd8);
assign main_sdram_bankmachine0_syncfifo0_readable = (main_sdram_bankmachine0_level != 1'd0);
assign main_sdram_bankmachine0_pipe_valid_sink_ready = ((~main_sdram_bankmachine0_pipe_valid_source_valid) | main_sdram_bankmachine0_pipe_valid_source_ready);
assign main_sdram_bankmachine0_pipe_valid_sink_valid = main_sdram_bankmachine0_sink_sink_valid;
assign main_sdram_bankmachine0_sink_sink_ready = main_sdram_bankmachine0_pipe_valid_sink_ready;
assign main_sdram_bankmachine0_pipe_valid_sink_first = main_sdram_bankmachine0_sink_sink_first;
assign main_sdram_bankmachine0_pipe_valid_sink_last = main_sdram_bankmachine0_sink_sink_last;
assign main_sdram_bankmachine0_pipe_valid_sink_payload_we = main_sdram_bankmachine0_sink_sink_payload_we;
assign main_sdram_bankmachine0_pipe_valid_sink_payload_addr = main_sdram_bankmachine0_sink_sink_payload_addr;
assign main_sdram_bankmachine0_source_source_valid = main_sdram_bankmachine0_pipe_valid_source_valid;
assign main_sdram_bankmachine0_pipe_valid_source_ready = main_sdram_bankmachine0_source_source_ready;
assign main_sdram_bankmachine0_source_source_first = main_sdram_bankmachine0_pipe_valid_source_first;
assign main_sdram_bankmachine0_source_source_last = main_sdram_bankmachine0_pipe_valid_source_last;
assign main_sdram_bankmachine0_source_source_payload_we = main_sdram_bankmachine0_pipe_valid_source_payload_we;
assign main_sdram_bankmachine0_source_source_payload_addr = main_sdram_bankmachine0_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_bankmachine0_next_state <= 3'd0;
    main_sdram_bankmachine0_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine0_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine0_cmd_valid <= 1'd0;
    main_sdram_bankmachine0_refresh_gnt <= 1'd0;
    main_sdram_bankmachine0_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine0_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine0_row_close <= 1'd0;
    main_sdram_bankmachine0_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine0_row_open <= 1'd0;
    builder_basesoc_bankmachine0_next_state <= builder_basesoc_bankmachine0_state;
    case (builder_basesoc_bankmachine0_state)
        1'd1: begin
            if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
                main_sdram_bankmachine0_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine0_cmd_ready) begin
                    builder_basesoc_bankmachine0_next_state <= 3'd5;
                end
                main_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine0_twtpcon_ready & main_sdram_bankmachine0_trascon_ready)) begin
                builder_basesoc_bankmachine0_next_state <= 3'd5;
            end
            main_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine0_trccon_ready) begin
                main_sdram_bankmachine0_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine0_row_open <= 1'd1;
                main_sdram_bankmachine0_cmd_valid <= 1'd1;
                main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine0_cmd_ready) begin
                    builder_basesoc_bankmachine0_next_state <= 3'd6;
                end
                main_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine0_twtpcon_ready) begin
                main_sdram_bankmachine0_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine0_row_close <= 1'd1;
            main_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine0_refresh_req)) begin
                builder_basesoc_bankmachine0_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_basesoc_bankmachine0_next_state <= 2'd3;
        end
        3'd6: begin
            builder_basesoc_bankmachine0_next_state <= 1'd0;
        end
        default: begin
            if (main_sdram_bankmachine0_refresh_req) begin
                builder_basesoc_bankmachine0_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine0_source_source_valid) begin
                    if (main_sdram_bankmachine0_row_opened) begin
                        if (main_sdram_bankmachine0_row_hit) begin
                            main_sdram_bankmachine0_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine0_source_source_payload_we) begin
                                main_sdram_bankmachine0_req_wdata_ready <= main_sdram_bankmachine0_cmd_ready;
                                main_sdram_bankmachine0_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine0_req_rdata_valid <= main_sdram_bankmachine0_cmd_ready;
                                main_sdram_bankmachine0_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine0_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine0_cmd_ready & main_sdram_bankmachine0_auto_precharge)) begin
                                builder_basesoc_bankmachine0_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_bankmachine0_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_bankmachine0_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine1_sink_valid = main_sdram_bankmachine1_req_valid;
assign main_sdram_bankmachine1_req_ready = main_sdram_bankmachine1_sink_ready;
assign main_sdram_bankmachine1_sink_payload_we = main_sdram_bankmachine1_req_we;
assign main_sdram_bankmachine1_sink_payload_addr = main_sdram_bankmachine1_req_addr;
assign main_sdram_bankmachine1_sink_sink_valid = main_sdram_bankmachine1_source_valid;
assign main_sdram_bankmachine1_source_ready = main_sdram_bankmachine1_sink_sink_ready;
assign main_sdram_bankmachine1_sink_sink_first = main_sdram_bankmachine1_source_first;
assign main_sdram_bankmachine1_sink_sink_last = main_sdram_bankmachine1_source_last;
assign main_sdram_bankmachine1_sink_sink_payload_we = main_sdram_bankmachine1_source_payload_we;
assign main_sdram_bankmachine1_sink_sink_payload_addr = main_sdram_bankmachine1_source_payload_addr;
assign main_sdram_bankmachine1_source_source_ready = (main_sdram_bankmachine1_req_wdata_ready | main_sdram_bankmachine1_req_rdata_valid);
assign main_sdram_bankmachine1_req_lock = (main_sdram_bankmachine1_source_valid | main_sdram_bankmachine1_source_source_valid);
assign main_sdram_bankmachine1_row_hit = (main_sdram_bankmachine1_row == main_sdram_bankmachine1_source_source_payload_addr[20:8]);
assign main_sdram_bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
    main_sdram_bankmachine1_cmd_payload_a <= 13'd0;
    if (main_sdram_bankmachine1_row_col_n_addr_sel) begin
        main_sdram_bankmachine1_cmd_payload_a <= main_sdram_bankmachine1_source_source_payload_addr[20:8];
    end else begin
        main_sdram_bankmachine1_cmd_payload_a <= ((main_sdram_bankmachine1_auto_precharge <<< 4'd10) | {main_sdram_bankmachine1_source_source_payload_addr[7:0], {1{1'd0}}});
    end
end
assign main_sdram_bankmachine1_twtpcon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_cmd_payload_is_write);
assign main_sdram_bankmachine1_trccon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_row_open);
assign main_sdram_bankmachine1_trascon_valid = ((main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_ready) & main_sdram_bankmachine1_row_open);
always @(*) begin
    main_sdram_bankmachine1_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine1_source_valid & main_sdram_bankmachine1_source_source_valid)) begin
        if ((main_sdram_bankmachine1_source_payload_addr[20:8] != main_sdram_bankmachine1_source_source_payload_addr[20:8])) begin
            main_sdram_bankmachine1_auto_precharge <= (main_sdram_bankmachine1_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine1_syncfifo1_din = {main_sdram_bankmachine1_fifo_in_last, main_sdram_bankmachine1_fifo_in_first, main_sdram_bankmachine1_fifo_in_payload_addr, main_sdram_bankmachine1_fifo_in_payload_we};
assign {main_sdram_bankmachine1_fifo_out_last, main_sdram_bankmachine1_fifo_out_first, main_sdram_bankmachine1_fifo_out_payload_addr, main_sdram_bankmachine1_fifo_out_payload_we} = main_sdram_bankmachine1_syncfifo1_dout;
assign main_sdram_bankmachine1_sink_ready = main_sdram_bankmachine1_syncfifo1_writable;
assign main_sdram_bankmachine1_syncfifo1_we = main_sdram_bankmachine1_sink_valid;
assign main_sdram_bankmachine1_fifo_in_first = main_sdram_bankmachine1_sink_first;
assign main_sdram_bankmachine1_fifo_in_last = main_sdram_bankmachine1_sink_last;
assign main_sdram_bankmachine1_fifo_in_payload_we = main_sdram_bankmachine1_sink_payload_we;
assign main_sdram_bankmachine1_fifo_in_payload_addr = main_sdram_bankmachine1_sink_payload_addr;
assign main_sdram_bankmachine1_source_valid = main_sdram_bankmachine1_syncfifo1_readable;
assign main_sdram_bankmachine1_source_first = main_sdram_bankmachine1_fifo_out_first;
assign main_sdram_bankmachine1_source_last = main_sdram_bankmachine1_fifo_out_last;
assign main_sdram_bankmachine1_source_payload_we = main_sdram_bankmachine1_fifo_out_payload_we;
assign main_sdram_bankmachine1_source_payload_addr = main_sdram_bankmachine1_fifo_out_payload_addr;
assign main_sdram_bankmachine1_syncfifo1_re = main_sdram_bankmachine1_source_ready;
always @(*) begin
    main_sdram_bankmachine1_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine1_replace) begin
        main_sdram_bankmachine1_wrport_adr <= (main_sdram_bankmachine1_produce - 1'd1);
    end else begin
        main_sdram_bankmachine1_wrport_adr <= main_sdram_bankmachine1_produce;
    end
end
assign main_sdram_bankmachine1_wrport_dat_w = main_sdram_bankmachine1_syncfifo1_din;
assign main_sdram_bankmachine1_wrport_we = (main_sdram_bankmachine1_syncfifo1_we & (main_sdram_bankmachine1_syncfifo1_writable | main_sdram_bankmachine1_replace));
assign main_sdram_bankmachine1_do_read = (main_sdram_bankmachine1_syncfifo1_readable & main_sdram_bankmachine1_syncfifo1_re);
assign main_sdram_bankmachine1_rdport_adr = main_sdram_bankmachine1_consume;
assign main_sdram_bankmachine1_syncfifo1_dout = main_sdram_bankmachine1_rdport_dat_r;
assign main_sdram_bankmachine1_syncfifo1_writable = (main_sdram_bankmachine1_level != 4'd8);
assign main_sdram_bankmachine1_syncfifo1_readable = (main_sdram_bankmachine1_level != 1'd0);
assign main_sdram_bankmachine1_pipe_valid_sink_ready = ((~main_sdram_bankmachine1_pipe_valid_source_valid) | main_sdram_bankmachine1_pipe_valid_source_ready);
assign main_sdram_bankmachine1_pipe_valid_sink_valid = main_sdram_bankmachine1_sink_sink_valid;
assign main_sdram_bankmachine1_sink_sink_ready = main_sdram_bankmachine1_pipe_valid_sink_ready;
assign main_sdram_bankmachine1_pipe_valid_sink_first = main_sdram_bankmachine1_sink_sink_first;
assign main_sdram_bankmachine1_pipe_valid_sink_last = main_sdram_bankmachine1_sink_sink_last;
assign main_sdram_bankmachine1_pipe_valid_sink_payload_we = main_sdram_bankmachine1_sink_sink_payload_we;
assign main_sdram_bankmachine1_pipe_valid_sink_payload_addr = main_sdram_bankmachine1_sink_sink_payload_addr;
assign main_sdram_bankmachine1_source_source_valid = main_sdram_bankmachine1_pipe_valid_source_valid;
assign main_sdram_bankmachine1_pipe_valid_source_ready = main_sdram_bankmachine1_source_source_ready;
assign main_sdram_bankmachine1_source_source_first = main_sdram_bankmachine1_pipe_valid_source_first;
assign main_sdram_bankmachine1_source_source_last = main_sdram_bankmachine1_pipe_valid_source_last;
assign main_sdram_bankmachine1_source_source_payload_we = main_sdram_bankmachine1_pipe_valid_source_payload_we;
assign main_sdram_bankmachine1_source_source_payload_addr = main_sdram_bankmachine1_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_bankmachine1_next_state <= 3'd0;
    main_sdram_bankmachine1_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine1_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine1_cmd_valid <= 1'd0;
    main_sdram_bankmachine1_refresh_gnt <= 1'd0;
    main_sdram_bankmachine1_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine1_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine1_row_close <= 1'd0;
    main_sdram_bankmachine1_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine1_row_open <= 1'd0;
    builder_basesoc_bankmachine1_next_state <= builder_basesoc_bankmachine1_state;
    case (builder_basesoc_bankmachine1_state)
        1'd1: begin
            if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
                main_sdram_bankmachine1_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine1_cmd_ready) begin
                    builder_basesoc_bankmachine1_next_state <= 3'd5;
                end
                main_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine1_twtpcon_ready & main_sdram_bankmachine1_trascon_ready)) begin
                builder_basesoc_bankmachine1_next_state <= 3'd5;
            end
            main_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine1_trccon_ready) begin
                main_sdram_bankmachine1_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine1_row_open <= 1'd1;
                main_sdram_bankmachine1_cmd_valid <= 1'd1;
                main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine1_cmd_ready) begin
                    builder_basesoc_bankmachine1_next_state <= 3'd6;
                end
                main_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine1_twtpcon_ready) begin
                main_sdram_bankmachine1_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine1_row_close <= 1'd1;
            main_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine1_refresh_req)) begin
                builder_basesoc_bankmachine1_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_basesoc_bankmachine1_next_state <= 2'd3;
        end
        3'd6: begin
            builder_basesoc_bankmachine1_next_state <= 1'd0;
        end
        default: begin
            if (main_sdram_bankmachine1_refresh_req) begin
                builder_basesoc_bankmachine1_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine1_source_source_valid) begin
                    if (main_sdram_bankmachine1_row_opened) begin
                        if (main_sdram_bankmachine1_row_hit) begin
                            main_sdram_bankmachine1_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine1_source_source_payload_we) begin
                                main_sdram_bankmachine1_req_wdata_ready <= main_sdram_bankmachine1_cmd_ready;
                                main_sdram_bankmachine1_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine1_req_rdata_valid <= main_sdram_bankmachine1_cmd_ready;
                                main_sdram_bankmachine1_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine1_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine1_cmd_ready & main_sdram_bankmachine1_auto_precharge)) begin
                                builder_basesoc_bankmachine1_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_bankmachine1_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_bankmachine1_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine2_sink_valid = main_sdram_bankmachine2_req_valid;
assign main_sdram_bankmachine2_req_ready = main_sdram_bankmachine2_sink_ready;
assign main_sdram_bankmachine2_sink_payload_we = main_sdram_bankmachine2_req_we;
assign main_sdram_bankmachine2_sink_payload_addr = main_sdram_bankmachine2_req_addr;
assign main_sdram_bankmachine2_sink_sink_valid = main_sdram_bankmachine2_source_valid;
assign main_sdram_bankmachine2_source_ready = main_sdram_bankmachine2_sink_sink_ready;
assign main_sdram_bankmachine2_sink_sink_first = main_sdram_bankmachine2_source_first;
assign main_sdram_bankmachine2_sink_sink_last = main_sdram_bankmachine2_source_last;
assign main_sdram_bankmachine2_sink_sink_payload_we = main_sdram_bankmachine2_source_payload_we;
assign main_sdram_bankmachine2_sink_sink_payload_addr = main_sdram_bankmachine2_source_payload_addr;
assign main_sdram_bankmachine2_source_source_ready = (main_sdram_bankmachine2_req_wdata_ready | main_sdram_bankmachine2_req_rdata_valid);
assign main_sdram_bankmachine2_req_lock = (main_sdram_bankmachine2_source_valid | main_sdram_bankmachine2_source_source_valid);
assign main_sdram_bankmachine2_row_hit = (main_sdram_bankmachine2_row == main_sdram_bankmachine2_source_source_payload_addr[20:8]);
assign main_sdram_bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
    main_sdram_bankmachine2_cmd_payload_a <= 13'd0;
    if (main_sdram_bankmachine2_row_col_n_addr_sel) begin
        main_sdram_bankmachine2_cmd_payload_a <= main_sdram_bankmachine2_source_source_payload_addr[20:8];
    end else begin
        main_sdram_bankmachine2_cmd_payload_a <= ((main_sdram_bankmachine2_auto_precharge <<< 4'd10) | {main_sdram_bankmachine2_source_source_payload_addr[7:0], {1{1'd0}}});
    end
end
assign main_sdram_bankmachine2_twtpcon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_cmd_payload_is_write);
assign main_sdram_bankmachine2_trccon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_row_open);
assign main_sdram_bankmachine2_trascon_valid = ((main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_ready) & main_sdram_bankmachine2_row_open);
always @(*) begin
    main_sdram_bankmachine2_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine2_source_valid & main_sdram_bankmachine2_source_source_valid)) begin
        if ((main_sdram_bankmachine2_source_payload_addr[20:8] != main_sdram_bankmachine2_source_source_payload_addr[20:8])) begin
            main_sdram_bankmachine2_auto_precharge <= (main_sdram_bankmachine2_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine2_syncfifo2_din = {main_sdram_bankmachine2_fifo_in_last, main_sdram_bankmachine2_fifo_in_first, main_sdram_bankmachine2_fifo_in_payload_addr, main_sdram_bankmachine2_fifo_in_payload_we};
assign {main_sdram_bankmachine2_fifo_out_last, main_sdram_bankmachine2_fifo_out_first, main_sdram_bankmachine2_fifo_out_payload_addr, main_sdram_bankmachine2_fifo_out_payload_we} = main_sdram_bankmachine2_syncfifo2_dout;
assign main_sdram_bankmachine2_sink_ready = main_sdram_bankmachine2_syncfifo2_writable;
assign main_sdram_bankmachine2_syncfifo2_we = main_sdram_bankmachine2_sink_valid;
assign main_sdram_bankmachine2_fifo_in_first = main_sdram_bankmachine2_sink_first;
assign main_sdram_bankmachine2_fifo_in_last = main_sdram_bankmachine2_sink_last;
assign main_sdram_bankmachine2_fifo_in_payload_we = main_sdram_bankmachine2_sink_payload_we;
assign main_sdram_bankmachine2_fifo_in_payload_addr = main_sdram_bankmachine2_sink_payload_addr;
assign main_sdram_bankmachine2_source_valid = main_sdram_bankmachine2_syncfifo2_readable;
assign main_sdram_bankmachine2_source_first = main_sdram_bankmachine2_fifo_out_first;
assign main_sdram_bankmachine2_source_last = main_sdram_bankmachine2_fifo_out_last;
assign main_sdram_bankmachine2_source_payload_we = main_sdram_bankmachine2_fifo_out_payload_we;
assign main_sdram_bankmachine2_source_payload_addr = main_sdram_bankmachine2_fifo_out_payload_addr;
assign main_sdram_bankmachine2_syncfifo2_re = main_sdram_bankmachine2_source_ready;
always @(*) begin
    main_sdram_bankmachine2_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine2_replace) begin
        main_sdram_bankmachine2_wrport_adr <= (main_sdram_bankmachine2_produce - 1'd1);
    end else begin
        main_sdram_bankmachine2_wrport_adr <= main_sdram_bankmachine2_produce;
    end
end
assign main_sdram_bankmachine2_wrport_dat_w = main_sdram_bankmachine2_syncfifo2_din;
assign main_sdram_bankmachine2_wrport_we = (main_sdram_bankmachine2_syncfifo2_we & (main_sdram_bankmachine2_syncfifo2_writable | main_sdram_bankmachine2_replace));
assign main_sdram_bankmachine2_do_read = (main_sdram_bankmachine2_syncfifo2_readable & main_sdram_bankmachine2_syncfifo2_re);
assign main_sdram_bankmachine2_rdport_adr = main_sdram_bankmachine2_consume;
assign main_sdram_bankmachine2_syncfifo2_dout = main_sdram_bankmachine2_rdport_dat_r;
assign main_sdram_bankmachine2_syncfifo2_writable = (main_sdram_bankmachine2_level != 4'd8);
assign main_sdram_bankmachine2_syncfifo2_readable = (main_sdram_bankmachine2_level != 1'd0);
assign main_sdram_bankmachine2_pipe_valid_sink_ready = ((~main_sdram_bankmachine2_pipe_valid_source_valid) | main_sdram_bankmachine2_pipe_valid_source_ready);
assign main_sdram_bankmachine2_pipe_valid_sink_valid = main_sdram_bankmachine2_sink_sink_valid;
assign main_sdram_bankmachine2_sink_sink_ready = main_sdram_bankmachine2_pipe_valid_sink_ready;
assign main_sdram_bankmachine2_pipe_valid_sink_first = main_sdram_bankmachine2_sink_sink_first;
assign main_sdram_bankmachine2_pipe_valid_sink_last = main_sdram_bankmachine2_sink_sink_last;
assign main_sdram_bankmachine2_pipe_valid_sink_payload_we = main_sdram_bankmachine2_sink_sink_payload_we;
assign main_sdram_bankmachine2_pipe_valid_sink_payload_addr = main_sdram_bankmachine2_sink_sink_payload_addr;
assign main_sdram_bankmachine2_source_source_valid = main_sdram_bankmachine2_pipe_valid_source_valid;
assign main_sdram_bankmachine2_pipe_valid_source_ready = main_sdram_bankmachine2_source_source_ready;
assign main_sdram_bankmachine2_source_source_first = main_sdram_bankmachine2_pipe_valid_source_first;
assign main_sdram_bankmachine2_source_source_last = main_sdram_bankmachine2_pipe_valid_source_last;
assign main_sdram_bankmachine2_source_source_payload_we = main_sdram_bankmachine2_pipe_valid_source_payload_we;
assign main_sdram_bankmachine2_source_source_payload_addr = main_sdram_bankmachine2_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_bankmachine2_next_state <= 3'd0;
    main_sdram_bankmachine2_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine2_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine2_cmd_valid <= 1'd0;
    main_sdram_bankmachine2_refresh_gnt <= 1'd0;
    main_sdram_bankmachine2_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine2_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine2_row_close <= 1'd0;
    main_sdram_bankmachine2_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine2_row_open <= 1'd0;
    builder_basesoc_bankmachine2_next_state <= builder_basesoc_bankmachine2_state;
    case (builder_basesoc_bankmachine2_state)
        1'd1: begin
            if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
                main_sdram_bankmachine2_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine2_cmd_ready) begin
                    builder_basesoc_bankmachine2_next_state <= 3'd5;
                end
                main_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine2_twtpcon_ready & main_sdram_bankmachine2_trascon_ready)) begin
                builder_basesoc_bankmachine2_next_state <= 3'd5;
            end
            main_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine2_trccon_ready) begin
                main_sdram_bankmachine2_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine2_row_open <= 1'd1;
                main_sdram_bankmachine2_cmd_valid <= 1'd1;
                main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine2_cmd_ready) begin
                    builder_basesoc_bankmachine2_next_state <= 3'd6;
                end
                main_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine2_twtpcon_ready) begin
                main_sdram_bankmachine2_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine2_row_close <= 1'd1;
            main_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine2_refresh_req)) begin
                builder_basesoc_bankmachine2_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_basesoc_bankmachine2_next_state <= 2'd3;
        end
        3'd6: begin
            builder_basesoc_bankmachine2_next_state <= 1'd0;
        end
        default: begin
            if (main_sdram_bankmachine2_refresh_req) begin
                builder_basesoc_bankmachine2_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine2_source_source_valid) begin
                    if (main_sdram_bankmachine2_row_opened) begin
                        if (main_sdram_bankmachine2_row_hit) begin
                            main_sdram_bankmachine2_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine2_source_source_payload_we) begin
                                main_sdram_bankmachine2_req_wdata_ready <= main_sdram_bankmachine2_cmd_ready;
                                main_sdram_bankmachine2_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine2_req_rdata_valid <= main_sdram_bankmachine2_cmd_ready;
                                main_sdram_bankmachine2_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine2_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine2_cmd_ready & main_sdram_bankmachine2_auto_precharge)) begin
                                builder_basesoc_bankmachine2_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_bankmachine2_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_bankmachine2_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_bankmachine3_sink_valid = main_sdram_bankmachine3_req_valid;
assign main_sdram_bankmachine3_req_ready = main_sdram_bankmachine3_sink_ready;
assign main_sdram_bankmachine3_sink_payload_we = main_sdram_bankmachine3_req_we;
assign main_sdram_bankmachine3_sink_payload_addr = main_sdram_bankmachine3_req_addr;
assign main_sdram_bankmachine3_sink_sink_valid = main_sdram_bankmachine3_source_valid;
assign main_sdram_bankmachine3_source_ready = main_sdram_bankmachine3_sink_sink_ready;
assign main_sdram_bankmachine3_sink_sink_first = main_sdram_bankmachine3_source_first;
assign main_sdram_bankmachine3_sink_sink_last = main_sdram_bankmachine3_source_last;
assign main_sdram_bankmachine3_sink_sink_payload_we = main_sdram_bankmachine3_source_payload_we;
assign main_sdram_bankmachine3_sink_sink_payload_addr = main_sdram_bankmachine3_source_payload_addr;
assign main_sdram_bankmachine3_source_source_ready = (main_sdram_bankmachine3_req_wdata_ready | main_sdram_bankmachine3_req_rdata_valid);
assign main_sdram_bankmachine3_req_lock = (main_sdram_bankmachine3_source_valid | main_sdram_bankmachine3_source_source_valid);
assign main_sdram_bankmachine3_row_hit = (main_sdram_bankmachine3_row == main_sdram_bankmachine3_source_source_payload_addr[20:8]);
assign main_sdram_bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
    main_sdram_bankmachine3_cmd_payload_a <= 13'd0;
    if (main_sdram_bankmachine3_row_col_n_addr_sel) begin
        main_sdram_bankmachine3_cmd_payload_a <= main_sdram_bankmachine3_source_source_payload_addr[20:8];
    end else begin
        main_sdram_bankmachine3_cmd_payload_a <= ((main_sdram_bankmachine3_auto_precharge <<< 4'd10) | {main_sdram_bankmachine3_source_source_payload_addr[7:0], {1{1'd0}}});
    end
end
assign main_sdram_bankmachine3_twtpcon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_cmd_payload_is_write);
assign main_sdram_bankmachine3_trccon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_row_open);
assign main_sdram_bankmachine3_trascon_valid = ((main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_ready) & main_sdram_bankmachine3_row_open);
always @(*) begin
    main_sdram_bankmachine3_auto_precharge <= 1'd0;
    if ((main_sdram_bankmachine3_source_valid & main_sdram_bankmachine3_source_source_valid)) begin
        if ((main_sdram_bankmachine3_source_payload_addr[20:8] != main_sdram_bankmachine3_source_source_payload_addr[20:8])) begin
            main_sdram_bankmachine3_auto_precharge <= (main_sdram_bankmachine3_row_close == 1'd0);
        end
    end
end
assign main_sdram_bankmachine3_syncfifo3_din = {main_sdram_bankmachine3_fifo_in_last, main_sdram_bankmachine3_fifo_in_first, main_sdram_bankmachine3_fifo_in_payload_addr, main_sdram_bankmachine3_fifo_in_payload_we};
assign {main_sdram_bankmachine3_fifo_out_last, main_sdram_bankmachine3_fifo_out_first, main_sdram_bankmachine3_fifo_out_payload_addr, main_sdram_bankmachine3_fifo_out_payload_we} = main_sdram_bankmachine3_syncfifo3_dout;
assign main_sdram_bankmachine3_sink_ready = main_sdram_bankmachine3_syncfifo3_writable;
assign main_sdram_bankmachine3_syncfifo3_we = main_sdram_bankmachine3_sink_valid;
assign main_sdram_bankmachine3_fifo_in_first = main_sdram_bankmachine3_sink_first;
assign main_sdram_bankmachine3_fifo_in_last = main_sdram_bankmachine3_sink_last;
assign main_sdram_bankmachine3_fifo_in_payload_we = main_sdram_bankmachine3_sink_payload_we;
assign main_sdram_bankmachine3_fifo_in_payload_addr = main_sdram_bankmachine3_sink_payload_addr;
assign main_sdram_bankmachine3_source_valid = main_sdram_bankmachine3_syncfifo3_readable;
assign main_sdram_bankmachine3_source_first = main_sdram_bankmachine3_fifo_out_first;
assign main_sdram_bankmachine3_source_last = main_sdram_bankmachine3_fifo_out_last;
assign main_sdram_bankmachine3_source_payload_we = main_sdram_bankmachine3_fifo_out_payload_we;
assign main_sdram_bankmachine3_source_payload_addr = main_sdram_bankmachine3_fifo_out_payload_addr;
assign main_sdram_bankmachine3_syncfifo3_re = main_sdram_bankmachine3_source_ready;
always @(*) begin
    main_sdram_bankmachine3_wrport_adr <= 3'd0;
    if (main_sdram_bankmachine3_replace) begin
        main_sdram_bankmachine3_wrport_adr <= (main_sdram_bankmachine3_produce - 1'd1);
    end else begin
        main_sdram_bankmachine3_wrport_adr <= main_sdram_bankmachine3_produce;
    end
end
assign main_sdram_bankmachine3_wrport_dat_w = main_sdram_bankmachine3_syncfifo3_din;
assign main_sdram_bankmachine3_wrport_we = (main_sdram_bankmachine3_syncfifo3_we & (main_sdram_bankmachine3_syncfifo3_writable | main_sdram_bankmachine3_replace));
assign main_sdram_bankmachine3_do_read = (main_sdram_bankmachine3_syncfifo3_readable & main_sdram_bankmachine3_syncfifo3_re);
assign main_sdram_bankmachine3_rdport_adr = main_sdram_bankmachine3_consume;
assign main_sdram_bankmachine3_syncfifo3_dout = main_sdram_bankmachine3_rdport_dat_r;
assign main_sdram_bankmachine3_syncfifo3_writable = (main_sdram_bankmachine3_level != 4'd8);
assign main_sdram_bankmachine3_syncfifo3_readable = (main_sdram_bankmachine3_level != 1'd0);
assign main_sdram_bankmachine3_pipe_valid_sink_ready = ((~main_sdram_bankmachine3_pipe_valid_source_valid) | main_sdram_bankmachine3_pipe_valid_source_ready);
assign main_sdram_bankmachine3_pipe_valid_sink_valid = main_sdram_bankmachine3_sink_sink_valid;
assign main_sdram_bankmachine3_sink_sink_ready = main_sdram_bankmachine3_pipe_valid_sink_ready;
assign main_sdram_bankmachine3_pipe_valid_sink_first = main_sdram_bankmachine3_sink_sink_first;
assign main_sdram_bankmachine3_pipe_valid_sink_last = main_sdram_bankmachine3_sink_sink_last;
assign main_sdram_bankmachine3_pipe_valid_sink_payload_we = main_sdram_bankmachine3_sink_sink_payload_we;
assign main_sdram_bankmachine3_pipe_valid_sink_payload_addr = main_sdram_bankmachine3_sink_sink_payload_addr;
assign main_sdram_bankmachine3_source_source_valid = main_sdram_bankmachine3_pipe_valid_source_valid;
assign main_sdram_bankmachine3_pipe_valid_source_ready = main_sdram_bankmachine3_source_source_ready;
assign main_sdram_bankmachine3_source_source_first = main_sdram_bankmachine3_pipe_valid_source_first;
assign main_sdram_bankmachine3_source_source_last = main_sdram_bankmachine3_pipe_valid_source_last;
assign main_sdram_bankmachine3_source_source_payload_we = main_sdram_bankmachine3_pipe_valid_source_payload_we;
assign main_sdram_bankmachine3_source_source_payload_addr = main_sdram_bankmachine3_pipe_valid_source_payload_addr;
always @(*) begin
    builder_basesoc_bankmachine3_next_state <= 3'd0;
    main_sdram_bankmachine3_cmd_payload_cas <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_is_read <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_is_write <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_ras <= 1'd0;
    main_sdram_bankmachine3_cmd_payload_we <= 1'd0;
    main_sdram_bankmachine3_cmd_valid <= 1'd0;
    main_sdram_bankmachine3_refresh_gnt <= 1'd0;
    main_sdram_bankmachine3_req_rdata_valid <= 1'd0;
    main_sdram_bankmachine3_req_wdata_ready <= 1'd0;
    main_sdram_bankmachine3_row_close <= 1'd0;
    main_sdram_bankmachine3_row_col_n_addr_sel <= 1'd0;
    main_sdram_bankmachine3_row_open <= 1'd0;
    builder_basesoc_bankmachine3_next_state <= builder_basesoc_bankmachine3_state;
    case (builder_basesoc_bankmachine3_state)
        1'd1: begin
            if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
                main_sdram_bankmachine3_cmd_valid <= 1'd1;
                if (main_sdram_bankmachine3_cmd_ready) begin
                    builder_basesoc_bankmachine3_next_state <= 3'd5;
                end
                main_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
                main_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
            main_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd2: begin
            if ((main_sdram_bankmachine3_twtpcon_ready & main_sdram_bankmachine3_trascon_ready)) begin
                builder_basesoc_bankmachine3_next_state <= 3'd5;
            end
            main_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd3: begin
            if (main_sdram_bankmachine3_trccon_ready) begin
                main_sdram_bankmachine3_row_col_n_addr_sel <= 1'd1;
                main_sdram_bankmachine3_row_open <= 1'd1;
                main_sdram_bankmachine3_cmd_valid <= 1'd1;
                main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
                if (main_sdram_bankmachine3_cmd_ready) begin
                    builder_basesoc_bankmachine3_next_state <= 3'd6;
                end
                main_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (main_sdram_bankmachine3_twtpcon_ready) begin
                main_sdram_bankmachine3_refresh_gnt <= 1'd1;
            end
            main_sdram_bankmachine3_row_close <= 1'd1;
            main_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            if ((~main_sdram_bankmachine3_refresh_req)) begin
                builder_basesoc_bankmachine3_next_state <= 1'd0;
            end
        end
        3'd5: begin
            builder_basesoc_bankmachine3_next_state <= 2'd3;
        end
        3'd6: begin
            builder_basesoc_bankmachine3_next_state <= 1'd0;
        end
        default: begin
            if (main_sdram_bankmachine3_refresh_req) begin
                builder_basesoc_bankmachine3_next_state <= 3'd4;
            end else begin
                if (main_sdram_bankmachine3_source_source_valid) begin
                    if (main_sdram_bankmachine3_row_opened) begin
                        if (main_sdram_bankmachine3_row_hit) begin
                            main_sdram_bankmachine3_cmd_valid <= 1'd1;
                            if (main_sdram_bankmachine3_source_source_payload_we) begin
                                main_sdram_bankmachine3_req_wdata_ready <= main_sdram_bankmachine3_cmd_ready;
                                main_sdram_bankmachine3_cmd_payload_is_write <= 1'd1;
                                main_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                            end else begin
                                main_sdram_bankmachine3_req_rdata_valid <= main_sdram_bankmachine3_cmd_ready;
                                main_sdram_bankmachine3_cmd_payload_is_read <= 1'd1;
                            end
                            main_sdram_bankmachine3_cmd_payload_cas <= 1'd1;
                            if ((main_sdram_bankmachine3_cmd_ready & main_sdram_bankmachine3_auto_precharge)) begin
                                builder_basesoc_bankmachine3_next_state <= 2'd2;
                            end
                        end else begin
                            builder_basesoc_bankmachine3_next_state <= 1'd1;
                        end
                    end else begin
                        builder_basesoc_bankmachine3_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign main_sdram_trrdcon_valid = ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & ((main_sdram_choose_cmd_cmd_payload_ras & (~main_sdram_choose_cmd_cmd_payload_cas)) & (~main_sdram_choose_cmd_cmd_payload_we)));
assign main_sdram_tfawcon_valid = ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & ((main_sdram_choose_cmd_cmd_payload_ras & (~main_sdram_choose_cmd_cmd_payload_cas)) & (~main_sdram_choose_cmd_cmd_payload_we)));
assign main_sdram_ras_allowed = (main_sdram_trrdcon_ready & main_sdram_tfawcon_ready);
assign main_sdram_tccdcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_cmd_payload_is_write | main_sdram_choose_req_cmd_payload_is_read));
assign main_sdram_cas_allowed = main_sdram_tccdcon_ready;
assign main_sdram_twtrcon_valid = ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
assign main_sdram_read_available = ((((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_payload_is_read) | (main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_payload_is_read)) | (main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_payload_is_read)) | (main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_payload_is_read));
assign main_sdram_write_available = ((((main_sdram_bankmachine0_cmd_valid & main_sdram_bankmachine0_cmd_payload_is_write) | (main_sdram_bankmachine1_cmd_valid & main_sdram_bankmachine1_cmd_payload_is_write)) | (main_sdram_bankmachine2_cmd_valid & main_sdram_bankmachine2_cmd_payload_is_write)) | (main_sdram_bankmachine3_cmd_valid & main_sdram_bankmachine3_cmd_payload_is_write));
assign main_sdram_max_time0 = (main_sdram_time0 == 1'd0);
assign main_sdram_max_time1 = (main_sdram_time1 == 1'd0);
assign main_sdram_bankmachine0_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine1_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine2_refresh_req = main_sdram_cmd_valid;
assign main_sdram_bankmachine3_refresh_req = main_sdram_cmd_valid;
assign main_sdram_go_to_refresh = (((main_sdram_bankmachine0_refresh_gnt & main_sdram_bankmachine1_refresh_gnt) & main_sdram_bankmachine2_refresh_gnt) & main_sdram_bankmachine3_refresh_gnt);
assign main_sdram_interface_rdata = {main_sdram_dfi_p1_rddata, main_sdram_dfi_p0_rddata};
assign {main_sdram_dfi_p1_wrdata, main_sdram_dfi_p0_wrdata} = main_sdram_interface_wdata;
assign {main_sdram_dfi_p1_wrdata_mask, main_sdram_dfi_p0_wrdata_mask} = (~main_sdram_interface_wdata_we);
always @(*) begin
    main_sdram_choose_cmd_requests <= 4'd0;
    main_sdram_choose_cmd_requests[0] <= (main_sdram_bankmachine0_cmd_valid & (((main_sdram_bankmachine0_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine0_cmd_payload_ras & (~main_sdram_bankmachine0_cmd_payload_cas)) & (~main_sdram_bankmachine0_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine0_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine0_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_requests[1] <= (main_sdram_bankmachine1_cmd_valid & (((main_sdram_bankmachine1_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine1_cmd_payload_ras & (~main_sdram_bankmachine1_cmd_payload_cas)) & (~main_sdram_bankmachine1_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine1_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine1_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_requests[2] <= (main_sdram_bankmachine2_cmd_valid & (((main_sdram_bankmachine2_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine2_cmd_payload_ras & (~main_sdram_bankmachine2_cmd_payload_cas)) & (~main_sdram_bankmachine2_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine2_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine2_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
    main_sdram_choose_cmd_requests[3] <= (main_sdram_bankmachine3_cmd_valid & (((main_sdram_bankmachine3_cmd_payload_is_cmd & main_sdram_choose_cmd_want_cmds) & ((~((main_sdram_bankmachine3_cmd_payload_ras & (~main_sdram_bankmachine3_cmd_payload_cas)) & (~main_sdram_bankmachine3_cmd_payload_we))) | main_sdram_choose_cmd_want_activates)) | ((main_sdram_bankmachine3_cmd_payload_is_read == main_sdram_choose_cmd_want_reads) & (main_sdram_bankmachine3_cmd_payload_is_write == main_sdram_choose_cmd_want_writes))));
end
assign main_sdram_choose_cmd_request = main_sdram_choose_cmd_requests;
assign main_sdram_choose_cmd_cmd_valid = builder_comb_rhs_self40;
assign main_sdram_choose_cmd_cmd_payload_a = builder_comb_rhs_self41;
assign main_sdram_choose_cmd_cmd_payload_ba = builder_comb_rhs_self42;
assign main_sdram_choose_cmd_cmd_payload_is_read = builder_comb_rhs_self43;
assign main_sdram_choose_cmd_cmd_payload_is_write = builder_comb_rhs_self44;
assign main_sdram_choose_cmd_cmd_payload_is_cmd = builder_comb_rhs_self45;
always @(*) begin
    main_sdram_choose_cmd_cmd_payload_cas <= 1'd0;
    if (main_sdram_choose_cmd_cmd_valid) begin
        main_sdram_choose_cmd_cmd_payload_cas <= builder_comb_t_self0;
    end
end
always @(*) begin
    main_sdram_choose_cmd_cmd_payload_ras <= 1'd0;
    if (main_sdram_choose_cmd_cmd_valid) begin
        main_sdram_choose_cmd_cmd_payload_ras <= builder_comb_t_self1;
    end
end
always @(*) begin
    main_sdram_choose_cmd_cmd_payload_we <= 1'd0;
    if (main_sdram_choose_cmd_cmd_valid) begin
        main_sdram_choose_cmd_cmd_payload_we <= builder_comb_t_self2;
    end
end
assign main_sdram_choose_cmd_ce = (main_sdram_choose_cmd_cmd_ready | (~main_sdram_choose_cmd_cmd_valid));
always @(*) begin
    main_sdram_choose_req_requests <= 4'd0;
    main_sdram_choose_req_requests[0] <= (main_sdram_bankmachine0_cmd_valid & (((main_sdram_bankmachine0_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine0_cmd_payload_ras & (~main_sdram_bankmachine0_cmd_payload_cas)) & (~main_sdram_bankmachine0_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine0_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine0_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_requests[1] <= (main_sdram_bankmachine1_cmd_valid & (((main_sdram_bankmachine1_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine1_cmd_payload_ras & (~main_sdram_bankmachine1_cmd_payload_cas)) & (~main_sdram_bankmachine1_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine1_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine1_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_requests[2] <= (main_sdram_bankmachine2_cmd_valid & (((main_sdram_bankmachine2_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine2_cmd_payload_ras & (~main_sdram_bankmachine2_cmd_payload_cas)) & (~main_sdram_bankmachine2_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine2_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine2_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
    main_sdram_choose_req_requests[3] <= (main_sdram_bankmachine3_cmd_valid & (((main_sdram_bankmachine3_cmd_payload_is_cmd & main_sdram_choose_req_want_cmds) & ((~((main_sdram_bankmachine3_cmd_payload_ras & (~main_sdram_bankmachine3_cmd_payload_cas)) & (~main_sdram_bankmachine3_cmd_payload_we))) | main_sdram_choose_req_want_activates)) | ((main_sdram_bankmachine3_cmd_payload_is_read == main_sdram_choose_req_want_reads) & (main_sdram_bankmachine3_cmd_payload_is_write == main_sdram_choose_req_want_writes))));
end
assign main_sdram_choose_req_request = main_sdram_choose_req_requests;
assign main_sdram_choose_req_cmd_valid = builder_comb_rhs_self46;
assign main_sdram_choose_req_cmd_payload_a = builder_comb_rhs_self47;
assign main_sdram_choose_req_cmd_payload_ba = builder_comb_rhs_self48;
assign main_sdram_choose_req_cmd_payload_is_read = builder_comb_rhs_self49;
assign main_sdram_choose_req_cmd_payload_is_write = builder_comb_rhs_self50;
assign main_sdram_choose_req_cmd_payload_is_cmd = builder_comb_rhs_self51;
always @(*) begin
    main_sdram_choose_req_cmd_payload_cas <= 1'd0;
    if (main_sdram_choose_req_cmd_valid) begin
        main_sdram_choose_req_cmd_payload_cas <= builder_comb_t_self3;
    end
end
always @(*) begin
    main_sdram_choose_req_cmd_payload_ras <= 1'd0;
    if (main_sdram_choose_req_cmd_valid) begin
        main_sdram_choose_req_cmd_payload_ras <= builder_comb_t_self4;
    end
end
always @(*) begin
    main_sdram_choose_req_cmd_payload_we <= 1'd0;
    if (main_sdram_choose_req_cmd_valid) begin
        main_sdram_choose_req_cmd_payload_we <= builder_comb_t_self5;
    end
end
always @(*) begin
    main_sdram_bankmachine0_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 1'd0))) begin
        main_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 1'd0))) begin
        main_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine1_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 1'd1))) begin
        main_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 1'd1))) begin
        main_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine2_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 2'd2))) begin
        main_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 2'd2))) begin
        main_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    main_sdram_bankmachine3_cmd_ready <= 1'd0;
    if (((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & (main_sdram_choose_cmd_grant == 2'd3))) begin
        main_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
    if (((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & (main_sdram_choose_req_grant == 2'd3))) begin
        main_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
end
assign main_sdram_choose_req_ce = (main_sdram_choose_req_cmd_ready | (~main_sdram_choose_req_cmd_valid));
assign main_sdram_dfi_p0_reset_n = 1'd1;
assign main_sdram_dfi_p0_cke = {1{main_sdram_steerer0}};
assign main_sdram_dfi_p0_odt = {1{main_sdram_steerer1}};
assign main_sdram_dfi_p1_reset_n = 1'd1;
assign main_sdram_dfi_p1_cke = {1{main_sdram_steerer2}};
assign main_sdram_dfi_p1_odt = {1{main_sdram_steerer3}};
always @(*) begin
    builder_basesoc_multiplexer_next_state <= 3'd0;
    main_sdram_choose_cmd_cmd_ready <= 1'd0;
    main_sdram_choose_cmd_want_activates <= 1'd0;
    main_sdram_choose_req_cmd_ready <= 1'd0;
    main_sdram_choose_req_want_reads <= 1'd0;
    main_sdram_choose_req_want_writes <= 1'd0;
    main_sdram_cmd_ready <= 1'd0;
    main_sdram_en0 <= 1'd0;
    main_sdram_en1 <= 1'd0;
    main_sdram_steerer_sel0 <= 2'd0;
    main_sdram_steerer_sel1 <= 2'd0;
    builder_basesoc_multiplexer_next_state <= builder_basesoc_multiplexer_state;
    case (builder_basesoc_multiplexer_state)
        1'd1: begin
            main_sdram_en1 <= 1'd1;
            main_sdram_choose_req_want_writes <= 1'd1;
            if (1'd0) begin
                main_sdram_choose_req_cmd_ready <= (main_sdram_cas_allowed & ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed));
            end else begin
                main_sdram_choose_cmd_want_activates <= main_sdram_ras_allowed;
                main_sdram_choose_cmd_cmd_ready <= ((~((main_sdram_choose_cmd_cmd_payload_ras & (~main_sdram_choose_cmd_cmd_payload_cas)) & (~main_sdram_choose_cmd_cmd_payload_we))) | main_sdram_ras_allowed);
                main_sdram_choose_req_cmd_ready <= main_sdram_cas_allowed;
            end
            main_sdram_steerer_sel0 <= 1'd0;
            if (1'd1) begin
                main_sdram_steerer_sel0 <= 2'd2;
            end
            if (1'd0) begin
                main_sdram_steerer_sel0 <= 1'd1;
            end
            main_sdram_steerer_sel1 <= 1'd0;
            if (1'd0) begin
                main_sdram_steerer_sel1 <= 2'd2;
            end
            if (1'd1) begin
                main_sdram_steerer_sel1 <= 1'd1;
            end
            if (main_sdram_read_available) begin
                if (((~main_sdram_write_available) | main_sdram_max_time1)) begin
                    builder_basesoc_multiplexer_next_state <= 2'd3;
                end
            end
            if (main_sdram_go_to_refresh) begin
                builder_basesoc_multiplexer_next_state <= 2'd2;
            end
        end
        2'd2: begin
            main_sdram_steerer_sel0 <= 2'd3;
            main_sdram_cmd_ready <= 1'd1;
            if (main_sdram_cmd_last) begin
                builder_basesoc_multiplexer_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if (main_sdram_twtrcon_ready) begin
                builder_basesoc_multiplexer_next_state <= 1'd0;
            end
        end
        3'd4: begin
            builder_basesoc_multiplexer_next_state <= 1'd1;
        end
        default: begin
            main_sdram_en0 <= 1'd1;
            main_sdram_choose_req_want_reads <= 1'd1;
            if (1'd0) begin
                main_sdram_choose_req_cmd_ready <= (main_sdram_cas_allowed & ((~((main_sdram_choose_req_cmd_payload_ras & (~main_sdram_choose_req_cmd_payload_cas)) & (~main_sdram_choose_req_cmd_payload_we))) | main_sdram_ras_allowed));
            end else begin
                main_sdram_choose_cmd_want_activates <= main_sdram_ras_allowed;
                main_sdram_choose_cmd_cmd_ready <= ((~((main_sdram_choose_cmd_cmd_payload_ras & (~main_sdram_choose_cmd_cmd_payload_cas)) & (~main_sdram_choose_cmd_cmd_payload_we))) | main_sdram_ras_allowed);
                main_sdram_choose_req_cmd_ready <= main_sdram_cas_allowed;
            end
            main_sdram_steerer_sel0 <= 1'd0;
            if (1'd1) begin
                main_sdram_steerer_sel0 <= 2'd2;
            end
            if (1'd0) begin
                main_sdram_steerer_sel0 <= 1'd1;
            end
            main_sdram_steerer_sel1 <= 1'd0;
            if (1'd0) begin
                main_sdram_steerer_sel1 <= 2'd2;
            end
            if (1'd1) begin
                main_sdram_steerer_sel1 <= 1'd1;
            end
            if (main_sdram_write_available) begin
                if (((~main_sdram_read_available) | main_sdram_max_time0)) begin
                    builder_basesoc_multiplexer_next_state <= 3'd4;
                end
            end
            if (main_sdram_go_to_refresh) begin
                builder_basesoc_multiplexer_next_state <= 2'd2;
            end
        end
    endcase
end
assign builder_basesoc_roundrobin0_request = {(((main_litedramcrossbar_cmd_payload_addr[9:8] == 1'd0) & (~(((builder_basesoc_locked1 | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid), (((main_port_cmd_payload_addr[9:8] == 1'd0) & (~(((builder_basesoc_locked0 | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_roundrobin0_ce = ((~main_sdram_interface_bank0_valid) & (~main_sdram_interface_bank0_lock));
assign main_sdram_interface_bank0_addr = builder_comb_rhs_self52;
assign main_sdram_interface_bank0_we = builder_comb_rhs_self53;
assign main_sdram_interface_bank0_valid = builder_comb_rhs_self54;
assign builder_basesoc_roundrobin1_request = {(((main_litedramcrossbar_cmd_payload_addr[9:8] == 1'd1) & (~(((builder_basesoc_locked3 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid), (((main_port_cmd_payload_addr[9:8] == 1'd1) & (~(((builder_basesoc_locked2 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_roundrobin1_ce = ((~main_sdram_interface_bank1_valid) & (~main_sdram_interface_bank1_lock));
assign main_sdram_interface_bank1_addr = builder_comb_rhs_self55;
assign main_sdram_interface_bank1_we = builder_comb_rhs_self56;
assign main_sdram_interface_bank1_valid = builder_comb_rhs_self57;
assign builder_basesoc_roundrobin2_request = {(((main_litedramcrossbar_cmd_payload_addr[9:8] == 2'd2) & (~(((builder_basesoc_locked5 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid), (((main_port_cmd_payload_addr[9:8] == 2'd2) & (~(((builder_basesoc_locked4 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_roundrobin2_ce = ((~main_sdram_interface_bank2_valid) & (~main_sdram_interface_bank2_lock));
assign main_sdram_interface_bank2_addr = builder_comb_rhs_self58;
assign main_sdram_interface_bank2_we = builder_comb_rhs_self59;
assign main_sdram_interface_bank2_valid = builder_comb_rhs_self60;
assign builder_basesoc_roundrobin3_request = {(((main_litedramcrossbar_cmd_payload_addr[9:8] == 2'd3) & (~(((builder_basesoc_locked7 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid), (((main_port_cmd_payload_addr[9:8] == 2'd3) & (~(((builder_basesoc_locked6 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_basesoc_roundrobin3_ce = ((~main_sdram_interface_bank3_valid) & (~main_sdram_interface_bank3_lock));
assign main_sdram_interface_bank3_addr = builder_comb_rhs_self61;
assign main_sdram_interface_bank3_we = builder_comb_rhs_self62;
assign main_sdram_interface_bank3_valid = builder_comb_rhs_self63;
assign main_port_cmd_ready = ((((1'd0 | (((builder_basesoc_roundrobin0_grant == 1'd0) & ((main_port_cmd_payload_addr[9:8] == 1'd0) & (~(((builder_basesoc_locked0 | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0)))))) & main_sdram_interface_bank0_ready)) | (((builder_basesoc_roundrobin1_grant == 1'd0) & ((main_port_cmd_payload_addr[9:8] == 1'd1) & (~(((builder_basesoc_locked2 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0)))))) & main_sdram_interface_bank1_ready)) | (((builder_basesoc_roundrobin2_grant == 1'd0) & ((main_port_cmd_payload_addr[9:8] == 2'd2) & (~(((builder_basesoc_locked4 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0)))))) & main_sdram_interface_bank2_ready)) | (((builder_basesoc_roundrobin3_grant == 1'd0) & ((main_port_cmd_payload_addr[9:8] == 2'd3) & (~(((builder_basesoc_locked6 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0)))))) & main_sdram_interface_bank3_ready));
assign main_litedramcrossbar_cmd_ready = ((((1'd0 | (((builder_basesoc_roundrobin0_grant == 1'd1) & ((main_litedramcrossbar_cmd_payload_addr[9:8] == 1'd0) & (~(((builder_basesoc_locked1 | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd1)))))) & main_sdram_interface_bank0_ready)) | (((builder_basesoc_roundrobin1_grant == 1'd1) & ((main_litedramcrossbar_cmd_payload_addr[9:8] == 1'd1) & (~(((builder_basesoc_locked3 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd1)))))) & main_sdram_interface_bank1_ready)) | (((builder_basesoc_roundrobin2_grant == 1'd1) & ((main_litedramcrossbar_cmd_payload_addr[9:8] == 2'd2) & (~(((builder_basesoc_locked5 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd1)))))) & main_sdram_interface_bank2_ready)) | (((builder_basesoc_roundrobin3_grant == 1'd1) & ((main_litedramcrossbar_cmd_payload_addr[9:8] == 2'd3) & (~(((builder_basesoc_locked7 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd1)))))) & main_sdram_interface_bank3_ready));
assign main_port_wdata_ready = builder_basesoc_new_master_wdata_ready0;
assign main_litedramcrossbar_wdata_ready = builder_basesoc_new_master_wdata_ready1;
assign main_port_rdata_valid = builder_basesoc_new_master_rdata_valid2;
assign main_litedramcrossbar_rdata_valid = builder_basesoc_new_master_rdata_valid5;
always @(*) begin
    main_sdram_interface_wdata <= 32'd0;
    main_sdram_interface_wdata_we <= 4'd0;
    case ({builder_basesoc_new_master_wdata_ready1, builder_basesoc_new_master_wdata_ready0})
        1'd1: begin
            main_sdram_interface_wdata <= main_port_wdata_payload_data;
            main_sdram_interface_wdata_we <= main_port_wdata_payload_we;
        end
        2'd2: begin
            main_sdram_interface_wdata <= main_litedramcrossbar_wdata_payload_data;
            main_sdram_interface_wdata_we <= main_litedramcrossbar_wdata_payload_we;
        end
        default: begin
            main_sdram_interface_wdata <= 1'd0;
            main_sdram_interface_wdata_we <= 1'd0;
        end
    endcase
end
assign main_port_rdata_payload_data = main_sdram_interface_rdata;
assign main_litedramcrossbar_rdata_payload_data = main_sdram_interface_rdata;
assign main_data_port_adr = main_wb_sdram_adr[10:2];
always @(*) begin
    main_data_port_dat_w <= 128'd0;
    main_data_port_we <= 16'd0;
    if (main_write_from_slave) begin
        main_data_port_dat_w <= main_interface_dat_r;
        main_data_port_we <= {16{1'd1}};
    end else begin
        main_data_port_dat_w <= {4{main_wb_sdram_dat_w}};
        if ((((main_wb_sdram_cyc & main_wb_sdram_stb) & main_wb_sdram_we) & main_wb_sdram_ack)) begin
            main_data_port_we <= {({4{(main_wb_sdram_adr[1:0] == 2'd3)}} & main_wb_sdram_sel), ({4{(main_wb_sdram_adr[1:0] == 2'd2)}} & main_wb_sdram_sel), ({4{(main_wb_sdram_adr[1:0] == 1'd1)}} & main_wb_sdram_sel), ({4{(main_wb_sdram_adr[1:0] == 1'd0)}} & main_wb_sdram_sel)};
        end
    end
end
assign main_interface_dat_w = main_data_port_dat_r;
assign main_interface_sel = 16'd65535;
always @(*) begin
    main_wb_sdram_dat_r <= 32'd0;
    case (main_adr_offset_r)
        1'd0: begin
            main_wb_sdram_dat_r <= main_data_port_dat_r[31:0];
        end
        1'd1: begin
            main_wb_sdram_dat_r <= main_data_port_dat_r[63:32];
        end
        2'd2: begin
            main_wb_sdram_dat_r <= main_data_port_dat_r[95:64];
        end
        default: begin
            main_wb_sdram_dat_r <= main_data_port_dat_r[127:96];
        end
    endcase
end
assign {main_tag_do_dirty, main_tag_do_tag} = main_tag_port_dat_r;
assign main_tag_port_dat_w = {main_tag_di_dirty, main_tag_di_tag};
assign main_tag_port_adr = main_wb_sdram_adr[10:2];
assign main_tag_di_tag = main_wb_sdram_adr[29:11];
assign main_interface_adr = {main_tag_do_tag, main_wb_sdram_adr[10:2]};
always @(*) begin
    builder_basesoc_fullmemorywe_next_state <= 2'd0;
    main_interface_cyc <= 1'd0;
    main_interface_stb <= 1'd0;
    main_interface_we <= 1'd0;
    main_tag_di_dirty <= 1'd0;
    main_tag_port_we <= 1'd0;
    main_wb_sdram_ack <= 1'd0;
    main_word_clr <= 1'd0;
    main_word_inc <= 1'd0;
    main_write_from_slave <= 1'd0;
    builder_basesoc_fullmemorywe_next_state <= builder_basesoc_fullmemorywe_state;
    case (builder_basesoc_fullmemorywe_state)
        1'd1: begin
            main_word_clr <= 1'd1;
            if ((main_tag_do_tag == main_wb_sdram_adr[29:11])) begin
                main_wb_sdram_ack <= 1'd1;
                if (main_wb_sdram_we) begin
                    main_tag_di_dirty <= 1'd1;
                    main_tag_port_we <= 1'd1;
                end
                builder_basesoc_fullmemorywe_next_state <= 1'd0;
            end else begin
                if (main_tag_do_dirty) begin
                    builder_basesoc_fullmemorywe_next_state <= 2'd2;
                end else begin
                    main_tag_port_we <= 1'd1;
                    main_word_clr <= 1'd1;
                    builder_basesoc_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            main_interface_stb <= 1'd1;
            main_interface_cyc <= 1'd1;
            main_interface_we <= 1'd1;
            if (main_interface_ack) begin
                main_word_inc <= 1'd1;
                if (1'd1) begin
                    main_tag_port_we <= 1'd1;
                    main_word_clr <= 1'd1;
                    builder_basesoc_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            main_interface_stb <= 1'd1;
            main_interface_cyc <= 1'd1;
            main_interface_we <= 1'd0;
            if (main_interface_ack) begin
                main_write_from_slave <= 1'd1;
                main_word_inc <= 1'd1;
                if (1'd1) begin
                    builder_basesoc_fullmemorywe_next_state <= 1'd1;
                end else begin
                    builder_basesoc_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        default: begin
            if ((main_wb_sdram_cyc & main_wb_sdram_stb)) begin
                builder_basesoc_fullmemorywe_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_wishbone_bridge_cmd_payload_addr = (main_interface_adr - 27'd67108864);
assign main_wishbone_bridge_cmd_payload_we = main_interface_we;
assign main_wishbone_bridge_cmd_last = (~main_interface_we);
assign main_wishbone_bridge_flush = (~main_interface_cyc);
always @(*) begin
    main_wishbone_bridge_wdata_valid <= 1'd0;
    main_wishbone_bridge_wdata_valid <= (main_interface_stb & main_interface_we);
    if (1'd0) begin
        if ((~main_wishbone_bridge_is_ongoing)) begin
            main_wishbone_bridge_wdata_valid <= 1'd0;
        end
    end
end
assign main_wishbone_bridge_wdata_payload_data = main_interface_dat_w;
assign main_wishbone_bridge_wdata_payload_we = main_interface_sel;
assign main_wishbone_bridge_rdata_ready = 1'd1;
always @(*) begin
    builder_basesoc_litedramnativeportconverter_next_state <= 1'd0;
    main_port_cmd_payload_addr <= 23'd0;
    main_port_cmd_payload_we <= 1'd0;
    main_port_cmd_valid <= 1'd0;
    main_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value1 <= 21'd0;
    main_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value_ce1 <= 1'd0;
    main_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0 <= 2'd0;
    main_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0 <= 1'd0;
    main_wishbone_bridge_cmd_ready <= 1'd0;
    main_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value2 <= 1'd0;
    main_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value_ce2 <= 1'd0;
    builder_basesoc_litedramnativeportconverter_next_state <= builder_basesoc_litedramnativeportconverter_state;
    case (builder_basesoc_litedramnativeportconverter_state)
        1'd1: begin
            main_port_cmd_valid <= 1'd1;
            main_port_cmd_payload_we <= main_wishbone_bridge_cmd_we;
            main_port_cmd_payload_addr <= ((main_wishbone_bridge_cmd_addr * 3'd4) + main_wishbone_bridge_cmd_count);
            if (main_port_cmd_ready) begin
                main_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0 <= (main_wishbone_bridge_cmd_count + 1'd1);
                main_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0 <= 1'd1;
                if ((main_wishbone_bridge_cmd_count == 2'd3)) begin
                    builder_basesoc_litedramnativeportconverter_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_wishbone_bridge_cmd_ready <= 1'd1;
            if (main_wishbone_bridge_cmd_valid) begin
                main_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0 <= 1'd0;
                main_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0 <= 1'd1;
                main_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value1 <= main_wishbone_bridge_cmd_payload_addr;
                main_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value_ce1 <= 1'd1;
                main_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value2 <= main_wishbone_bridge_cmd_payload_we;
                main_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value_ce2 <= 1'd1;
                builder_basesoc_litedramnativeportconverter_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_wishbone_bridge_wdata_converter_converter_sink_valid = main_wishbone_bridge_wdata_converter_sink_valid;
assign main_wishbone_bridge_wdata_converter_converter_sink_first = main_wishbone_bridge_wdata_converter_sink_first;
assign main_wishbone_bridge_wdata_converter_converter_sink_last = main_wishbone_bridge_wdata_converter_sink_last;
assign main_wishbone_bridge_wdata_converter_sink_ready = main_wishbone_bridge_wdata_converter_converter_sink_ready;
always @(*) begin
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data <= 144'd0;
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[31:0] <= main_wishbone_bridge_wdata_converter_sink_payload_data[31:0];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[35:32] <= main_wishbone_bridge_wdata_converter_sink_payload_we[3:0];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[67:36] <= main_wishbone_bridge_wdata_converter_sink_payload_data[63:32];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[71:68] <= main_wishbone_bridge_wdata_converter_sink_payload_we[7:4];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[103:72] <= main_wishbone_bridge_wdata_converter_sink_payload_data[95:64];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[107:104] <= main_wishbone_bridge_wdata_converter_sink_payload_we[11:8];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[139:108] <= main_wishbone_bridge_wdata_converter_sink_payload_data[127:96];
    main_wishbone_bridge_wdata_converter_converter_sink_payload_data[143:140] <= main_wishbone_bridge_wdata_converter_sink_payload_we[15:12];
end
assign main_wishbone_bridge_wdata_converter_source_valid = main_wishbone_bridge_wdata_converter_source_source_valid;
assign main_wishbone_bridge_wdata_converter_source_first = main_wishbone_bridge_wdata_converter_source_source_first;
assign main_wishbone_bridge_wdata_converter_source_last = main_wishbone_bridge_wdata_converter_source_source_last;
assign main_wishbone_bridge_wdata_converter_source_source_ready = main_wishbone_bridge_wdata_converter_source_ready;
assign {main_wishbone_bridge_wdata_converter_source_payload_we, main_wishbone_bridge_wdata_converter_source_payload_data} = main_wishbone_bridge_wdata_converter_source_source_payload_data;
assign main_wishbone_bridge_wdata_converter_source_source_valid = main_wishbone_bridge_wdata_converter_converter_source_valid;
assign main_wishbone_bridge_wdata_converter_converter_source_ready = main_wishbone_bridge_wdata_converter_source_source_ready;
assign main_wishbone_bridge_wdata_converter_source_source_first = main_wishbone_bridge_wdata_converter_converter_source_first;
assign main_wishbone_bridge_wdata_converter_source_source_last = main_wishbone_bridge_wdata_converter_converter_source_last;
assign main_wishbone_bridge_wdata_converter_source_source_payload_data = main_wishbone_bridge_wdata_converter_converter_source_payload_data;
assign main_wishbone_bridge_wdata_converter_converter_first = (main_wishbone_bridge_wdata_converter_converter_mux == 1'd0);
assign main_wishbone_bridge_wdata_converter_converter_last = (main_wishbone_bridge_wdata_converter_converter_mux == 2'd3);
assign main_wishbone_bridge_wdata_converter_converter_source_valid = main_wishbone_bridge_wdata_converter_converter_sink_valid;
assign main_wishbone_bridge_wdata_converter_converter_source_first = (main_wishbone_bridge_wdata_converter_converter_sink_first & main_wishbone_bridge_wdata_converter_converter_first);
assign main_wishbone_bridge_wdata_converter_converter_source_last = (main_wishbone_bridge_wdata_converter_converter_sink_last & main_wishbone_bridge_wdata_converter_converter_last);
assign main_wishbone_bridge_wdata_converter_converter_sink_ready = (main_wishbone_bridge_wdata_converter_converter_last & main_wishbone_bridge_wdata_converter_converter_source_ready);
always @(*) begin
    main_wishbone_bridge_wdata_converter_converter_source_payload_data <= 36'd0;
    case (main_wishbone_bridge_wdata_converter_converter_mux)
        1'd0: begin
            main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[35:0];
        end
        1'd1: begin
            main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[71:36];
        end
        2'd2: begin
            main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[107:72];
        end
        default: begin
            main_wishbone_bridge_wdata_converter_converter_source_payload_data <= main_wishbone_bridge_wdata_converter_converter_sink_payload_data[143:108];
        end
    endcase
end
assign main_wishbone_bridge_wdata_converter_converter_source_payload_valid_token_count = main_wishbone_bridge_wdata_converter_converter_last;
assign main_wishbone_bridge_wdata_converter_sink_valid = main_wishbone_bridge_wdata_valid;
assign main_wishbone_bridge_wdata_ready = main_wishbone_bridge_wdata_converter_sink_ready;
assign main_wishbone_bridge_wdata_converter_sink_first = main_wishbone_bridge_wdata_first;
assign main_wishbone_bridge_wdata_converter_sink_last = main_wishbone_bridge_wdata_last;
assign main_wishbone_bridge_wdata_converter_sink_payload_data = main_wishbone_bridge_wdata_payload_data;
assign main_wishbone_bridge_wdata_converter_sink_payload_we = main_wishbone_bridge_wdata_payload_we;
assign main_port_wdata_valid = main_wishbone_bridge_wdata_converter_source_valid;
assign main_wishbone_bridge_wdata_converter_source_ready = main_port_wdata_ready;
assign main_port_wdata_first = main_wishbone_bridge_wdata_converter_source_first;
assign main_port_wdata_last = main_wishbone_bridge_wdata_converter_source_last;
assign main_port_wdata_payload_data = main_wishbone_bridge_wdata_converter_source_payload_data;
assign main_port_wdata_payload_we = main_wishbone_bridge_wdata_converter_source_payload_we;
assign main_wishbone_bridge_rdata_converter_converter_sink_valid = main_wishbone_bridge_rdata_converter_sink_valid;
assign main_wishbone_bridge_rdata_converter_converter_sink_first = main_wishbone_bridge_rdata_converter_sink_first;
assign main_wishbone_bridge_rdata_converter_converter_sink_last = main_wishbone_bridge_rdata_converter_sink_last;
assign main_wishbone_bridge_rdata_converter_sink_ready = main_wishbone_bridge_rdata_converter_converter_sink_ready;
assign main_wishbone_bridge_rdata_converter_converter_sink_payload_data = {main_wishbone_bridge_rdata_converter_sink_payload_data};
assign main_wishbone_bridge_rdata_converter_source_valid = main_wishbone_bridge_rdata_converter_source_source_valid;
assign main_wishbone_bridge_rdata_converter_source_first = main_wishbone_bridge_rdata_converter_source_source_first;
assign main_wishbone_bridge_rdata_converter_source_last = main_wishbone_bridge_rdata_converter_source_source_last;
assign main_wishbone_bridge_rdata_converter_source_source_ready = main_wishbone_bridge_rdata_converter_source_ready;
always @(*) begin
    main_wishbone_bridge_rdata_converter_source_payload_data <= 128'd0;
    main_wishbone_bridge_rdata_converter_source_payload_data[31:0] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[31:0];
    main_wishbone_bridge_rdata_converter_source_payload_data[63:32] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[63:32];
    main_wishbone_bridge_rdata_converter_source_payload_data[95:64] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[95:64];
    main_wishbone_bridge_rdata_converter_source_payload_data[127:96] <= main_wishbone_bridge_rdata_converter_source_source_payload_data[127:96];
end
assign main_wishbone_bridge_rdata_converter_source_source_valid = main_wishbone_bridge_rdata_converter_converter_source_valid;
assign main_wishbone_bridge_rdata_converter_converter_source_ready = main_wishbone_bridge_rdata_converter_source_source_ready;
assign main_wishbone_bridge_rdata_converter_source_source_first = main_wishbone_bridge_rdata_converter_converter_source_first;
assign main_wishbone_bridge_rdata_converter_source_source_last = main_wishbone_bridge_rdata_converter_converter_source_last;
assign main_wishbone_bridge_rdata_converter_source_source_payload_data = main_wishbone_bridge_rdata_converter_converter_source_payload_data;
assign main_wishbone_bridge_rdata_converter_converter_sink_ready = ((~main_wishbone_bridge_rdata_converter_converter_strobe_all) | main_wishbone_bridge_rdata_converter_converter_source_ready);
assign main_wishbone_bridge_rdata_converter_converter_source_valid = main_wishbone_bridge_rdata_converter_converter_strobe_all;
assign main_wishbone_bridge_rdata_converter_converter_load_part = (main_wishbone_bridge_rdata_converter_converter_sink_valid & main_wishbone_bridge_rdata_converter_converter_sink_ready);
assign main_wishbone_bridge_rdata_converter_sink_valid = main_port_rdata_valid;
assign main_port_rdata_ready = main_wishbone_bridge_rdata_converter_sink_ready;
assign main_wishbone_bridge_rdata_converter_sink_first = main_port_rdata_first;
assign main_wishbone_bridge_rdata_converter_sink_last = main_port_rdata_last;
assign main_wishbone_bridge_rdata_converter_sink_payload_data = main_port_rdata_payload_data;
assign main_wishbone_bridge_rdata_valid = main_wishbone_bridge_rdata_converter_source_valid;
assign main_wishbone_bridge_rdata_converter_source_ready = main_wishbone_bridge_rdata_ready;
assign main_wishbone_bridge_rdata_first = main_wishbone_bridge_rdata_converter_source_first;
assign main_wishbone_bridge_rdata_last = main_wishbone_bridge_rdata_converter_source_last;
assign main_wishbone_bridge_rdata_payload_data = main_wishbone_bridge_rdata_converter_source_payload_data;
always @(*) begin
    builder_basesoc_fsm_next_state <= 2'd0;
    main_interface_ack <= 1'd0;
    main_interface_dat_r <= 128'd0;
    main_wishbone_bridge_aborted_fsm_next_value <= 1'd0;
    main_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd0;
    main_wishbone_bridge_cmd_valid <= 1'd0;
    main_wishbone_bridge_is_ongoing <= 1'd0;
    builder_basesoc_fsm_next_state <= builder_basesoc_fsm_state;
    case (builder_basesoc_fsm_state)
        1'd1: begin
            main_wishbone_bridge_is_ongoing <= 1'd1;
            main_wishbone_bridge_aborted_fsm_next_value <= ((~main_interface_cyc) | main_wishbone_bridge_aborted);
            main_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
            if ((main_wishbone_bridge_wdata_valid & main_wishbone_bridge_wdata_ready)) begin
                main_interface_ack <= (main_interface_cyc & (~main_wishbone_bridge_aborted));
                builder_basesoc_fsm_next_state <= 1'd0;
            end
        end
        2'd2: begin
            main_wishbone_bridge_aborted_fsm_next_value <= ((~main_interface_cyc) | main_wishbone_bridge_aborted);
            main_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
            if (main_wishbone_bridge_rdata_valid) begin
                main_interface_ack <= (main_interface_cyc & (~main_wishbone_bridge_aborted));
                main_interface_dat_r <= main_wishbone_bridge_rdata_payload_data;
                builder_basesoc_fsm_next_state <= 1'd0;
            end
        end
        default: begin
            main_wishbone_bridge_cmd_valid <= (main_interface_cyc & main_interface_stb);
            if (((main_wishbone_bridge_cmd_valid & main_wishbone_bridge_cmd_ready) & main_interface_we)) begin
                builder_basesoc_fsm_next_state <= 1'd1;
            end
            if (((main_wishbone_bridge_cmd_valid & main_wishbone_bridge_cmd_ready) & (~main_interface_we))) begin
                builder_basesoc_fsm_next_state <= 2'd2;
            end
            main_wishbone_bridge_aborted_fsm_next_value <= 1'd0;
            main_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
        end
    endcase
end
assign main_sink_ready = 1'd1;
assign main_vtg_reset = (~main_vtg_enable);
assign main_vtg_source_payload_de = (main_vtg_hactive & main_vtg_vactive);
always @(*) begin
    builder_basesoc_clockdomainsrenamer_next_state <= 1'd0;
    main_vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd0;
    main_vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd0;
    main_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= 12'd0;
    main_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd0;
    main_vtg_source_payload_hres_clockdomainsrenamer_next_value2 <= 12'd0;
    main_vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2 <= 1'd0;
    main_vtg_source_payload_hsync_clockdomainsrenamer_next_value6 <= 1'd0;
    main_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 <= 1'd0;
    main_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= 12'd0;
    main_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd0;
    main_vtg_source_payload_vres_clockdomainsrenamer_next_value3 <= 12'd0;
    main_vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3 <= 1'd0;
    main_vtg_source_payload_vsync_clockdomainsrenamer_next_value7 <= 1'd0;
    main_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 <= 1'd0;
    main_vtg_source_valid <= 1'd0;
    main_vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd0;
    main_vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd0;
    builder_basesoc_clockdomainsrenamer_next_state <= builder_basesoc_clockdomainsrenamer_state;
    case (builder_basesoc_clockdomainsrenamer_state)
        1'd1: begin
            main_vtg_source_valid <= 1'd1;
            if (main_vtg_source_ready) begin
                main_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= (main_vtg_source_payload_hcount + 1'd1);
                main_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd1;
                if ((main_vtg_source_payload_hcount == 1'd0)) begin
                    main_vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd1;
                    main_vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd1;
                end
                if ((main_vtg_source_payload_hcount == main_vtg_hres)) begin
                    main_vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd0;
                    main_vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd1;
                end
                if ((main_vtg_source_payload_hcount == main_vtg_hsync_start)) begin
                    main_vtg_source_payload_hsync_clockdomainsrenamer_next_value6 <= 1'd1;
                    main_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 <= 1'd1;
                end
                if ((main_vtg_source_payload_hcount == main_vtg_hsync_end)) begin
                    main_vtg_source_payload_hsync_clockdomainsrenamer_next_value6 <= 1'd0;
                    main_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 <= 1'd1;
                end
                if ((main_vtg_source_payload_hcount == main_vtg_hscan)) begin
                    main_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= 1'd0;
                    main_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd1;
                end
                if ((main_vtg_source_payload_hcount == main_vtg_hsync_start)) begin
                    main_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= (main_vtg_source_payload_vcount + 1'd1);
                    main_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd1;
                    if ((main_vtg_source_payload_vcount == 1'd0)) begin
                        main_vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd1;
                        main_vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd1;
                    end
                    if ((main_vtg_source_payload_vcount == main_vtg_vres)) begin
                        main_vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd0;
                        main_vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd1;
                    end
                    if ((main_vtg_source_payload_vcount == main_vtg_vsync_start)) begin
                        main_vtg_source_payload_vsync_clockdomainsrenamer_next_value7 <= 1'd1;
                        main_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 <= 1'd1;
                    end
                    if ((main_vtg_source_payload_vcount == main_vtg_vsync_end)) begin
                        main_vtg_source_payload_vsync_clockdomainsrenamer_next_value7 <= 1'd0;
                        main_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 <= 1'd1;
                    end
                    if ((main_vtg_source_payload_vcount == main_vtg_vscan)) begin
                        main_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= 1'd0;
                        main_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd1;
                    end
                end
            end
        end
        default: begin
            main_vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd0;
            main_vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd1;
            main_vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd0;
            main_vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd1;
            main_vtg_source_payload_hres_clockdomainsrenamer_next_value2 <= main_vtg_hres;
            main_vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2 <= 1'd1;
            main_vtg_source_payload_vres_clockdomainsrenamer_next_value3 <= main_vtg_vres;
            main_vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3 <= 1'd1;
            main_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= 1'd0;
            main_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd1;
            main_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= 1'd0;
            main_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd1;
            builder_basesoc_clockdomainsrenamer_next_state <= 1'd1;
        end
    endcase
end
assign main_vfb_conv_converter_sink_valid = main_vfb_dma_source_source_valid;
assign main_vfb_dma_source_source_ready = main_vfb_conv_converter_sink_ready;
assign main_vfb_conv_converter_sink_first = main_vfb_dma_source_source_first;
assign main_vfb_conv_converter_sink_last = main_vfb_dma_source_source_last;
assign main_vfb_conv_converter_sink_payload_data = main_vfb_dma_source_source_payload_data;
assign main_vfb_cdc_sink_sink_valid = main_vfb_conv_source_source_valid;
assign main_vfb_conv_source_source_ready = main_vfb_cdc_sink_sink_ready;
assign main_vfb_cdc_sink_sink_first = main_vfb_conv_source_source_first;
assign main_vfb_cdc_sink_sink_last = main_vfb_conv_source_source_last;
assign main_vfb_cdc_sink_sink_payload_data = main_vfb_conv_source_source_payload_data;
assign main_vfb_source_payload_r = main_vfb_cdc_source_source_payload_data[7:0];
assign main_vfb_source_payload_g = main_vfb_cdc_source_source_payload_data[15:8];
assign main_vfb_source_payload_b = main_vfb_cdc_source_source_payload_data[23:16];
assign main_vfb_underflow = (~main_vfb_source_valid);
assign main_litedramcrossbar_cmd_payload_we = 1'd0;
assign main_litedramcrossbar_cmd_payload_addr = main_vfb_dma_sink_sink_payload_address;
assign main_litedramcrossbar_cmd_last = main_vfb_dma_sink_sink_last;
assign main_litedramcrossbar_cmd_valid = ((main_vfb_dma_enable & main_vfb_dma_sink_sink_valid) & main_vfb_dma_res_fifo_sink_ready);
assign main_vfb_dma_sink_sink_ready = ((main_vfb_dma_enable & main_litedramcrossbar_cmd_ready) & main_vfb_dma_res_fifo_sink_ready);
assign main_vfb_dma_res_fifo_sink_valid = (main_litedramcrossbar_cmd_valid & main_litedramcrossbar_cmd_ready);
assign main_vfb_dma_res_fifo_sink_last = main_litedramcrossbar_cmd_last;
assign main_vfb_dma_fifo_sink_valid = main_litedramcrossbar_rdata_valid;
assign main_litedramcrossbar_rdata_ready = main_vfb_dma_fifo_sink_ready;
assign main_vfb_dma_fifo_sink_first = main_litedramcrossbar_rdata_first;
assign main_vfb_dma_fifo_sink_last = main_litedramcrossbar_rdata_last;
assign main_vfb_dma_fifo_sink_payload_data = main_litedramcrossbar_rdata_payload_data;
assign main_vfb_dma_source_source_first = main_vfb_dma_fifo_source_first;
assign main_vfb_dma_source_source_payload_data = main_vfb_dma_fifo_source_payload_data;
always @(*) begin
    main_vfb_dma_source_source_last <= 1'd0;
    main_vfb_dma_source_source_valid <= 1'd0;
    if (main_vfb_dma_res_fifo_source_valid) begin
        main_vfb_dma_source_source_valid <= main_vfb_dma_fifo_source_valid;
        main_vfb_dma_source_source_last <= main_vfb_dma_res_fifo_source_last;
    end
end
assign main_vfb_dma_fifo_source_ready = (main_vfb_dma_source_source_ready | (~main_vfb_dma_enable));
assign main_vfb_dma_res_fifo_source_ready = (main_vfb_dma_fifo_source_valid & main_vfb_dma_fifo_source_ready);
assign main_vfb_dma_enable = main_vfb_litedramdmareader_enable_storage;
assign main_vfb_litedramdmareader_base = main_vfb_litedramdmareader_base_storage[31:2];
assign main_vfb_litedramdmareader_length = main_vfb_litedramdmareader_length_storage[31:2];
assign main_vfb_litedramdmareader_offset_status = main_vfb_litedramdmareader_offset;
assign main_vfb_litedramdmareader_reset = (~main_vfb_litedramdmareader_enable_storage);
assign main_vfb_dma_res_fifo_syncfifo_din = {main_vfb_dma_res_fifo_fifo_in_last, main_vfb_dma_res_fifo_fifo_in_first, main_vfb_dma_res_fifo_fifo_in_payload_dummy};
assign {main_vfb_dma_res_fifo_fifo_out_last, main_vfb_dma_res_fifo_fifo_out_first, main_vfb_dma_res_fifo_fifo_out_payload_dummy} = main_vfb_dma_res_fifo_syncfifo_dout;
assign main_vfb_dma_res_fifo_sink_ready = main_vfb_dma_res_fifo_syncfifo_writable;
assign main_vfb_dma_res_fifo_syncfifo_we = main_vfb_dma_res_fifo_sink_valid;
assign main_vfb_dma_res_fifo_fifo_in_first = main_vfb_dma_res_fifo_sink_first;
assign main_vfb_dma_res_fifo_fifo_in_last = main_vfb_dma_res_fifo_sink_last;
assign main_vfb_dma_res_fifo_fifo_in_payload_dummy = main_vfb_dma_res_fifo_sink_payload_dummy;
assign main_vfb_dma_res_fifo_source_valid = main_vfb_dma_res_fifo_syncfifo_readable;
assign main_vfb_dma_res_fifo_source_first = main_vfb_dma_res_fifo_fifo_out_first;
assign main_vfb_dma_res_fifo_source_last = main_vfb_dma_res_fifo_fifo_out_last;
assign main_vfb_dma_res_fifo_source_payload_dummy = main_vfb_dma_res_fifo_fifo_out_payload_dummy;
assign main_vfb_dma_res_fifo_syncfifo_re = main_vfb_dma_res_fifo_source_ready;
always @(*) begin
    main_vfb_dma_res_fifo_wrport_adr <= 14'd0;
    if (main_vfb_dma_res_fifo_replace) begin
        main_vfb_dma_res_fifo_wrport_adr <= (main_vfb_dma_res_fifo_produce - 1'd1);
    end else begin
        main_vfb_dma_res_fifo_wrport_adr <= main_vfb_dma_res_fifo_produce;
    end
end
assign main_vfb_dma_res_fifo_wrport_dat_w = main_vfb_dma_res_fifo_syncfifo_din;
assign main_vfb_dma_res_fifo_wrport_we = (main_vfb_dma_res_fifo_syncfifo_we & (main_vfb_dma_res_fifo_syncfifo_writable | main_vfb_dma_res_fifo_replace));
assign main_vfb_dma_res_fifo_do_read = (main_vfb_dma_res_fifo_syncfifo_readable & main_vfb_dma_res_fifo_syncfifo_re);
assign main_vfb_dma_res_fifo_rdport_adr = main_vfb_dma_res_fifo_consume;
assign main_vfb_dma_res_fifo_syncfifo_dout = main_vfb_dma_res_fifo_rdport_dat_r;
assign main_vfb_dma_res_fifo_syncfifo_writable = (main_vfb_dma_res_fifo_level != 15'd16384);
assign main_vfb_dma_res_fifo_syncfifo_readable = (main_vfb_dma_res_fifo_level != 1'd0);
assign main_vfb_dma_fifo_syncfifo_din = {main_vfb_dma_fifo_fifo_in_last, main_vfb_dma_fifo_fifo_in_first, main_vfb_dma_fifo_fifo_in_payload_data};
assign {main_vfb_dma_fifo_fifo_out_last, main_vfb_dma_fifo_fifo_out_first, main_vfb_dma_fifo_fifo_out_payload_data} = main_vfb_dma_fifo_syncfifo_dout;
assign main_vfb_dma_fifo_sink_ready = main_vfb_dma_fifo_syncfifo_writable;
assign main_vfb_dma_fifo_syncfifo_we = main_vfb_dma_fifo_sink_valid;
assign main_vfb_dma_fifo_fifo_in_first = main_vfb_dma_fifo_sink_first;
assign main_vfb_dma_fifo_fifo_in_last = main_vfb_dma_fifo_sink_last;
assign main_vfb_dma_fifo_fifo_in_payload_data = main_vfb_dma_fifo_sink_payload_data;
assign main_vfb_dma_fifo_source_valid = main_vfb_dma_fifo_readable;
assign main_vfb_dma_fifo_source_first = main_vfb_dma_fifo_fifo_out_first;
assign main_vfb_dma_fifo_source_last = main_vfb_dma_fifo_fifo_out_last;
assign main_vfb_dma_fifo_source_payload_data = main_vfb_dma_fifo_fifo_out_payload_data;
assign main_vfb_dma_fifo_re = main_vfb_dma_fifo_source_ready;
assign main_vfb_dma_fifo_syncfifo_re = (main_vfb_dma_fifo_syncfifo_readable & ((~main_vfb_dma_fifo_readable) | main_vfb_dma_fifo_re));
assign main_vfb_dma_fifo_level1 = (main_vfb_dma_fifo_level0 + main_vfb_dma_fifo_readable);
always @(*) begin
    main_vfb_dma_fifo_wrport_adr <= 14'd0;
    if (main_vfb_dma_fifo_replace) begin
        main_vfb_dma_fifo_wrport_adr <= (main_vfb_dma_fifo_produce - 1'd1);
    end else begin
        main_vfb_dma_fifo_wrport_adr <= main_vfb_dma_fifo_produce;
    end
end
assign main_vfb_dma_fifo_wrport_dat_w = main_vfb_dma_fifo_syncfifo_din;
assign main_vfb_dma_fifo_wrport_we = (main_vfb_dma_fifo_syncfifo_we & (main_vfb_dma_fifo_syncfifo_writable | main_vfb_dma_fifo_replace));
assign main_vfb_dma_fifo_do_read = (main_vfb_dma_fifo_syncfifo_readable & main_vfb_dma_fifo_syncfifo_re);
assign main_vfb_dma_fifo_rdport_adr = main_vfb_dma_fifo_consume;
assign main_vfb_dma_fifo_syncfifo_dout = main_vfb_dma_fifo_rdport_dat_r;
assign main_vfb_dma_fifo_rdport_re = main_vfb_dma_fifo_do_read;
assign main_vfb_dma_fifo_syncfifo_writable = (main_vfb_dma_fifo_level0 != 15'd16384);
assign main_vfb_dma_fifo_syncfifo_readable = (main_vfb_dma_fifo_level0 != 1'd0);
always @(*) begin
    builder_basesoc_litedramdmareader_next_state <= 2'd0;
    main_vfb_dma_sink_sink_last <= 1'd0;
    main_vfb_dma_sink_sink_payload_address <= 23'd0;
    main_vfb_dma_sink_sink_valid <= 1'd0;
    main_vfb_litedramdmareader_done_status <= 1'd0;
    main_vfb_litedramdmareader_offset_litedramdmareader_next_value <= 23'd0;
    main_vfb_litedramdmareader_offset_litedramdmareader_next_value_ce <= 1'd0;
    builder_basesoc_litedramdmareader_next_state <= builder_basesoc_litedramdmareader_state;
    case (builder_basesoc_litedramdmareader_state)
        1'd1: begin
            main_vfb_dma_sink_sink_valid <= 1'd1;
            main_vfb_dma_sink_sink_last <= (main_vfb_litedramdmareader_offset == (main_vfb_litedramdmareader_length - 1'd1));
            main_vfb_dma_sink_sink_payload_address <= (main_vfb_litedramdmareader_base + main_vfb_litedramdmareader_offset);
            if (main_vfb_dma_sink_sink_ready) begin
                main_vfb_litedramdmareader_offset_litedramdmareader_next_value <= (main_vfb_litedramdmareader_offset + 1'd1);
                main_vfb_litedramdmareader_offset_litedramdmareader_next_value_ce <= 1'd1;
                if (main_vfb_dma_sink_sink_last) begin
                    if (main_vfb_litedramdmareader_loop_storage) begin
                        main_vfb_litedramdmareader_offset_litedramdmareader_next_value <= 1'd0;
                        main_vfb_litedramdmareader_offset_litedramdmareader_next_value_ce <= 1'd1;
                    end else begin
                        builder_basesoc_litedramdmareader_next_state <= 2'd2;
                    end
                end
            end
        end
        2'd2: begin
            main_vfb_litedramdmareader_done_status <= 1'd1;
        end
        default: begin
            main_vfb_litedramdmareader_offset_litedramdmareader_next_value <= 1'd0;
            main_vfb_litedramdmareader_offset_litedramdmareader_next_value_ce <= 1'd1;
            builder_basesoc_litedramdmareader_next_state <= 1'd1;
        end
    endcase
end
assign main_vfb_conv_source_source_valid = main_vfb_conv_converter_source_valid;
assign main_vfb_conv_converter_source_ready = main_vfb_conv_source_source_ready;
assign main_vfb_conv_source_source_first = main_vfb_conv_converter_source_first;
assign main_vfb_conv_source_source_last = main_vfb_conv_converter_source_last;
assign main_vfb_conv_source_source_payload_data = main_vfb_conv_converter_source_payload_data;
assign main_vfb_conv_converter_source_valid = main_vfb_conv_converter_sink_valid;
assign main_vfb_conv_converter_sink_ready = main_vfb_conv_converter_source_ready;
assign main_vfb_conv_converter_source_first = main_vfb_conv_converter_sink_first;
assign main_vfb_conv_converter_source_last = main_vfb_conv_converter_sink_last;
assign main_vfb_conv_converter_source_payload_data = main_vfb_conv_converter_sink_payload_data;
assign main_vfb_conv_converter_source_payload_valid_token_count = 1'd1;
assign main_vfb_cdc_cdc_sink_valid = main_vfb_cdc_sink_sink_valid;
assign main_vfb_cdc_sink_sink_ready = main_vfb_cdc_cdc_sink_ready;
assign main_vfb_cdc_cdc_sink_first = main_vfb_cdc_sink_sink_first;
assign main_vfb_cdc_cdc_sink_last = main_vfb_cdc_sink_sink_last;
assign main_vfb_cdc_cdc_sink_payload_data = main_vfb_cdc_sink_sink_payload_data;
assign main_vfb_cdc_source_source_valid = main_vfb_cdc_cdc_source_valid;
assign main_vfb_cdc_cdc_source_ready = main_vfb_cdc_source_source_ready;
assign main_vfb_cdc_source_source_first = main_vfb_cdc_cdc_source_first;
assign main_vfb_cdc_source_source_last = main_vfb_cdc_cdc_source_last;
assign main_vfb_cdc_source_source_payload_data = main_vfb_cdc_cdc_source_payload_data;
assign main_vfb_cdc_cdc_asyncfifo_din = {main_vfb_cdc_cdc_fifo_in_last, main_vfb_cdc_cdc_fifo_in_first, main_vfb_cdc_cdc_fifo_in_payload_data};
assign {main_vfb_cdc_cdc_fifo_out_last, main_vfb_cdc_cdc_fifo_out_first, main_vfb_cdc_cdc_fifo_out_payload_data} = main_vfb_cdc_cdc_asyncfifo_dout;
assign main_vfb_cdc_cdc_sink_ready = main_vfb_cdc_cdc_asyncfifo_writable;
assign main_vfb_cdc_cdc_asyncfifo_we = main_vfb_cdc_cdc_sink_valid;
assign main_vfb_cdc_cdc_fifo_in_first = main_vfb_cdc_cdc_sink_first;
assign main_vfb_cdc_cdc_fifo_in_last = main_vfb_cdc_cdc_sink_last;
assign main_vfb_cdc_cdc_fifo_in_payload_data = main_vfb_cdc_cdc_sink_payload_data;
assign main_vfb_cdc_cdc_source_valid = main_vfb_cdc_cdc_asyncfifo_readable;
assign main_vfb_cdc_cdc_source_first = main_vfb_cdc_cdc_fifo_out_first;
assign main_vfb_cdc_cdc_source_last = main_vfb_cdc_cdc_fifo_out_last;
assign main_vfb_cdc_cdc_source_payload_data = main_vfb_cdc_cdc_fifo_out_payload_data;
assign main_vfb_cdc_cdc_asyncfifo_re = main_vfb_cdc_cdc_source_ready;
assign main_vfb_cdc_cdc_graycounter0_ce = (main_vfb_cdc_cdc_asyncfifo_writable & main_vfb_cdc_cdc_asyncfifo_we);
assign main_vfb_cdc_cdc_graycounter1_ce = (main_vfb_cdc_cdc_asyncfifo_readable & main_vfb_cdc_cdc_asyncfifo_re);
assign main_vfb_cdc_cdc_asyncfifo_writable = (((main_vfb_cdc_cdc_graycounter0_q[2] == main_vfb_cdc_cdc_consume_wdomain[2]) | (main_vfb_cdc_cdc_graycounter0_q[1] == main_vfb_cdc_cdc_consume_wdomain[1])) | (main_vfb_cdc_cdc_graycounter0_q[0] != main_vfb_cdc_cdc_consume_wdomain[0]));
assign main_vfb_cdc_cdc_asyncfifo_readable = (main_vfb_cdc_cdc_graycounter1_q != main_vfb_cdc_cdc_produce_rdomain);
assign main_vfb_cdc_cdc_wrport_adr = main_vfb_cdc_cdc_graycounter0_q_binary[1:0];
assign main_vfb_cdc_cdc_wrport_dat_w = main_vfb_cdc_cdc_asyncfifo_din;
assign main_vfb_cdc_cdc_wrport_we = main_vfb_cdc_cdc_graycounter0_ce;
assign main_vfb_cdc_cdc_rdport_adr = main_vfb_cdc_cdc_graycounter1_q_next_binary[1:0];
assign main_vfb_cdc_cdc_asyncfifo_dout = main_vfb_cdc_cdc_rdport_dat_r;
always @(*) begin
    main_vfb_cdc_cdc_graycounter0_q_next_binary <= 3'd0;
    if (main_vfb_cdc_cdc_graycounter0_ce) begin
        main_vfb_cdc_cdc_graycounter0_q_next_binary <= (main_vfb_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        main_vfb_cdc_cdc_graycounter0_q_next_binary <= main_vfb_cdc_cdc_graycounter0_q_binary;
    end
end
assign main_vfb_cdc_cdc_graycounter0_q_next = (main_vfb_cdc_cdc_graycounter0_q_next_binary ^ main_vfb_cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    main_vfb_cdc_cdc_graycounter1_q_next_binary <= 3'd0;
    if (main_vfb_cdc_cdc_graycounter1_ce) begin
        main_vfb_cdc_cdc_graycounter1_q_next_binary <= (main_vfb_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        main_vfb_cdc_cdc_graycounter1_q_next_binary <= main_vfb_cdc_cdc_graycounter1_q_binary;
    end
end
assign main_vfb_cdc_cdc_graycounter1_q_next = (main_vfb_cdc_cdc_graycounter1_q_next_binary ^ main_vfb_cdc_cdc_graycounter1_q_next_binary[2:1]);
always @(*) begin
    builder_basesoc_resetinserter_next_state <= 1'd0;
    main_vfb_cdc_source_source_ready <= 1'd0;
    main_vfb_first_resetinserter_next_value <= 1'd0;
    main_vfb_first_resetinserter_next_value_ce <= 1'd0;
    main_vfb_source_payload_de <= 1'd0;
    main_vfb_source_payload_hsync <= 1'd0;
    main_vfb_source_payload_vsync <= 1'd0;
    main_vfb_source_valid <= 1'd0;
    main_vfb_vtg_sink_ready <= 1'd0;
    builder_basesoc_resetinserter_next_state <= builder_basesoc_resetinserter_state;
    case (builder_basesoc_resetinserter_state)
        1'd1: begin
            main_vfb_vtg_sink_ready <= 1'd1;
            if ((main_vfb_vtg_sink_valid & main_vfb_vtg_sink_payload_de)) begin
                main_vfb_source_valid <= main_vfb_cdc_source_source_valid;
                main_vfb_cdc_source_source_ready <= main_vfb_source_ready;
                if (main_vfb_first) begin
                    main_vfb_source_valid <= 1'd0;
                end
                main_vfb_vtg_sink_ready <= (main_vfb_source_valid & main_vfb_source_ready);
                if ((main_vfb_cdc_source_source_valid & main_vfb_cdc_source_source_last)) begin
                    main_vfb_first_resetinserter_next_value <= 1'd0;
                    main_vfb_first_resetinserter_next_value_ce <= 1'd1;
                    builder_basesoc_resetinserter_next_state <= 1'd0;
                end
            end
            main_vfb_source_payload_hsync <= main_vfb_vtg_sink_payload_hsync;
            main_vfb_source_payload_vsync <= main_vfb_vtg_sink_payload_vsync;
            main_vfb_source_payload_de <= main_vfb_vtg_sink_payload_de;
        end
        default: begin
            main_vfb_vtg_sink_ready <= 1'd1;
            if (main_vfb_fsm_reset) begin
                main_vfb_vtg_sink_ready <= 1'd0;
                main_vfb_first_resetinserter_next_value <= 1'd1;
                main_vfb_first_resetinserter_next_value_ce <= 1'd1;
            end
            if ((main_vfb_vtg_sink_valid & main_vfb_vtg_sink_last)) begin
                builder_basesoc_resetinserter_next_state <= 1'd1;
            end
            main_vfb_source_payload_hsync <= main_vfb_vtg_sink_payload_hsync;
            main_vfb_source_payload_vsync <= main_vfb_vtg_sink_payload_vsync;
        end
    endcase
end
assign {joypad_out_load, joypad_out_clk} = main_gpio_gpio_out_storage;
assign {joypad2_out_load, joypad2_out_clk} = main_gpio2_gpio_out_storage;
assign {buzzer_out_pwm} = main_gpio3_storage;
assign start0 = start1;
assign length0 = length1;
assign done1 = done0;
assign mode0 = 1'd0;
assign mosi = mosi_storage;
assign miso_status = miso;
assign cs = sel;
assign cs_mode = mode1;
assign loopback = mode2;
assign clk_rise = (clk_divider1 == (clk_divider0[15:1] - 1'd1));
assign clk_fall = (clk_divider1 == (clk_divider0 - 1'd1));
assign clk_divider0 = storage;
always @(*) begin
    builder_basesoc_spimaster_next_state <= 2'd0;
    clk_enable <= 1'd0;
    count_spimaster_next_value <= 3'd0;
    count_spimaster_next_value_ce <= 1'd0;
    done0 <= 1'd0;
    irq <= 1'd0;
    miso_latch <= 1'd0;
    mosi_latch <= 1'd0;
    xfer_enable <= 1'd0;
    builder_basesoc_spimaster_next_state <= builder_basesoc_spimaster_state;
    case (builder_basesoc_spimaster_state)
        1'd1: begin
            count_spimaster_next_value <= 1'd0;
            count_spimaster_next_value_ce <= 1'd1;
            if (clk_fall) begin
                xfer_enable <= 1'd1;
                builder_basesoc_spimaster_next_state <= 2'd2;
            end
        end
        2'd2: begin
            clk_enable <= 1'd1;
            xfer_enable <= 1'd1;
            if (clk_fall) begin
                count_spimaster_next_value <= (count + 1'd1);
                count_spimaster_next_value_ce <= 1'd1;
                if ((count == (length0 - 1'd1))) begin
                    builder_basesoc_spimaster_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            xfer_enable <= 1'd1;
            if (clk_rise) begin
                miso_latch <= 1'd1;
                irq <= 1'd1;
                builder_basesoc_spimaster_next_state <= 1'd0;
            end
        end
        default: begin
            done0 <= 1'd1;
            if (start0) begin
                done0 <= 1'd0;
                mosi_latch <= 1'd1;
                builder_basesoc_spimaster_next_state <= 1'd1;
            end
        end
    endcase
end
assign builder_basesoc_dat_w = builder_basesoc_axiliteinterface_w_payload_data;
assign builder_basesoc_we = ((builder_basesoc_axiliteinterface_w_valid & builder_basesoc_axiliteinterface_w_ready) & (builder_basesoc_axiliteinterface_w_payload_strb != 1'd0));
assign builder_basesoc_re = (builder_basesoc_axiliteinterface_ar_valid & builder_basesoc_axiliteinterface_ar_ready);
always @(*) begin
    builder_basesoc_adr <= 14'd0;
    builder_basesoc_axilite2csr_next_state <= 3'd0;
    builder_basesoc_axiliteinterface_ar_ready <= 1'd0;
    builder_basesoc_axiliteinterface_aw_ready <= 1'd0;
    builder_basesoc_axiliteinterface_b_payload_resp <= 2'd0;
    builder_basesoc_axiliteinterface_b_valid <= 1'd0;
    builder_basesoc_axiliteinterface_r_payload_data <= 32'd0;
    builder_basesoc_axiliteinterface_r_payload_resp <= 2'd0;
    builder_basesoc_axiliteinterface_r_valid <= 1'd0;
    builder_basesoc_axiliteinterface_w_ready <= 1'd0;
    builder_basesoc_do_read <= 1'd0;
    builder_basesoc_do_write <= 1'd0;
    builder_basesoc_last_was_read_axilite2csr_next_value2 <= 1'd0;
    builder_basesoc_last_was_read_axilite2csr_next_value_ce2 <= 1'd0;
    builder_basesoc_port_adr_reg_axilite2csr_next_value0 <= 14'd0;
    builder_basesoc_port_adr_reg_axilite2csr_next_value_ce0 <= 1'd0;
    builder_basesoc_port_dat_r_latched_axilite2csr_next_value1 <= 32'd0;
    builder_basesoc_port_dat_r_latched_axilite2csr_next_value_ce1 <= 1'd0;
    builder_basesoc_axilite2csr_next_state <= builder_basesoc_axilite2csr_state;
    case (builder_basesoc_axilite2csr_state)
        1'd1: begin
            builder_basesoc_adr <= builder_basesoc_port_adr_reg;
            if (builder_basesoc_axiliteinterface_w_valid) begin
                builder_basesoc_axiliteinterface_w_ready <= 1'd1;
                builder_basesoc_axilite2csr_next_state <= 3'd4;
            end
        end
        2'd2: begin
            builder_basesoc_port_dat_r_latched_axilite2csr_next_value1 <= builder_basesoc_dat_r;
            builder_basesoc_port_dat_r_latched_axilite2csr_next_value_ce1 <= 1'd1;
            builder_basesoc_axilite2csr_next_state <= 2'd3;
        end
        2'd3: begin
            builder_basesoc_last_was_read_axilite2csr_next_value2 <= 1'd1;
            builder_basesoc_last_was_read_axilite2csr_next_value_ce2 <= 1'd1;
            builder_basesoc_axiliteinterface_r_payload_data <= builder_basesoc_port_dat_r_latched;
            builder_basesoc_axiliteinterface_r_payload_resp <= 1'd0;
            builder_basesoc_axiliteinterface_r_valid <= 1'd1;
            if (builder_basesoc_axiliteinterface_r_ready) begin
                builder_basesoc_axilite2csr_next_state <= 1'd0;
            end
        end
        3'd4: begin
            builder_basesoc_last_was_read_axilite2csr_next_value2 <= 1'd0;
            builder_basesoc_last_was_read_axilite2csr_next_value_ce2 <= 1'd1;
            builder_basesoc_axiliteinterface_b_valid <= 1'd1;
            builder_basesoc_axiliteinterface_b_payload_resp <= 1'd0;
            if (builder_basesoc_axiliteinterface_b_ready) begin
                builder_basesoc_axilite2csr_next_state <= 1'd0;
            end
        end
        default: begin
            if ((builder_basesoc_axiliteinterface_aw_valid & builder_basesoc_axiliteinterface_ar_valid)) begin
                builder_basesoc_do_write <= builder_basesoc_last_was_read;
                builder_basesoc_do_read <= (~builder_basesoc_last_was_read);
            end else begin
                builder_basesoc_do_write <= builder_basesoc_axiliteinterface_aw_valid;
                builder_basesoc_do_read <= builder_basesoc_axiliteinterface_ar_valid;
            end
            builder_basesoc_axiliteinterface_aw_ready <= (builder_basesoc_last_was_read | (~builder_basesoc_axiliteinterface_ar_valid));
            builder_basesoc_axiliteinterface_ar_ready <= ((~builder_basesoc_last_was_read) | (~builder_basesoc_axiliteinterface_aw_valid));
            if (builder_basesoc_do_write) begin
                builder_basesoc_adr <= builder_basesoc_axiliteinterface_aw_payload_addr[31:2];
                if (builder_basesoc_axiliteinterface_w_valid) begin
                    builder_basesoc_axiliteinterface_w_ready <= 1'd1;
                    builder_basesoc_axilite2csr_next_state <= 3'd4;
                end else begin
                    builder_basesoc_port_adr_reg_axilite2csr_next_value0 <= builder_basesoc_adr;
                    builder_basesoc_port_adr_reg_axilite2csr_next_value_ce0 <= 1'd1;
                    builder_basesoc_axilite2csr_next_state <= 1'd1;
                end
            end else begin
                if (builder_basesoc_do_read) begin
                    builder_basesoc_adr <= builder_basesoc_axiliteinterface_ar_payload_addr[31:2];
                    builder_basesoc_axilite2csr_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_reset0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_scratch0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_bus_errors_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    main_basesoc_soc_rst <= 1'd0;
    if (main_basesoc_reset_re) begin
        main_basesoc_soc_rst <= main_basesoc_reset_storage[0];
    end
end
assign main_basesoc_cpu_rst = main_basesoc_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_basesoc_reset_storage[1:0];
assign builder_csr_bankarray_csrbank0_scratch0_w = main_basesoc_scratch_storage[31:0];
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_basesoc_bus_errors_status[31:0];
assign main_basesoc_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 1'd1);
assign builder_csr_bankarray_csrbank1_in_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank1_in_re <= 1'd0;
    builder_csr_bankarray_csrbank1_in_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_in_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_in_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_out0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank1_out0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_out0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_in_w = main_gpio_gpio_in_status;
assign main_gpio_gpio_in_we = builder_csr_bankarray_csrbank1_in_we;
assign builder_csr_bankarray_csrbank1_out0_w = main_gpio_gpio_out_storage[1:0];
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank2_in_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_in_re <= 1'd0;
    builder_csr_bankarray_csrbank2_in_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank2_in_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_in_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_out0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank2_out0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_out0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_in_w = main_gpio2_gpio_in_status;
assign main_gpio2_gpio_in_we = builder_csr_bankarray_csrbank2_in_we;
assign builder_csr_bankarray_csrbank2_out0_w = main_gpio2_gpio_out_storage[1:0];
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 2'd3);
assign builder_csr_bankarray_csrbank3_out0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank3_out0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_out0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_out0_w = main_gpio3_storage;
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd4);
assign builder_csr_bankarray_csrbank4_w0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[2:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_w0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_w0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank4_w0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_w0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_r_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_r_re <= 1'd0;
    builder_csr_bankarray_csrbank4_r_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank4_r_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_r_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign main_scl = main__w_storage[0];
assign main_oe = main__w_storage[1];
assign main_sda0 = main__w_storage[2];
assign builder_csr_bankarray_csrbank4_w0_w = main__w_storage[2:0];
always @(*) begin
    main__r_status <= 1'd0;
    main__r_status <= main_sda1;
end
assign builder_csr_bankarray_csrbank4_r_w = main__r_status;
assign main__r_we = builder_csr_bankarray_csrbank4_r_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 3'd5);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank5_sel = (builder_csr_bankarray_interface5_bank_bus_adr[13:9] == 3'd6);
assign builder_csr_bankarray_csrbank5_out0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[5:0];
always @(*) begin
    builder_csr_bankarray_csrbank5_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank5_out0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_out0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_out0_w = main_leds_storage[5:0];
assign builder_csr_bankarray_csrbank6_sel = (builder_csr_bankarray_interface6_bank_bus_adr[13:9] == 3'd7);
assign builder_csr_bankarray_csrbank6_dfii_control0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[3:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_dfii_control0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_dfii_control0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank6_dfii_control0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_dfii_control0_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_dfii_pi0_command0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_dfii_pi0_command0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_dfii_pi0_command0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank6_dfii_pi0_command0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_dfii_pi0_command0_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign main_sdram_phaseinjector0_command_issue_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    main_sdram_phaseinjector0_command_issue_re <= 1'd0;
    main_sdram_phaseinjector0_command_issue_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
        main_sdram_phaseinjector0_command_issue_re <= builder_csr_bankarray_interface6_bank_bus_we;
        main_sdram_phaseinjector0_command_issue_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_dfii_pi0_address0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[12:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_dfii_pi0_address0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_dfii_pi0_address0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank6_dfii_pi0_address0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_dfii_pi0_address0_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_dfii_pi0_rddata_r = builder_csr_bankarray_interface6_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_dfii_pi0_rddata_re <= 1'd0;
    builder_csr_bankarray_csrbank6_dfii_pi0_rddata_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank6_dfii_pi0_rddata_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_dfii_pi0_rddata_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_dfii_pi1_command0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_dfii_pi1_command0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_dfii_pi1_command0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank6_dfii_pi1_command0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_dfii_pi1_command0_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign main_sdram_phaseinjector1_command_issue_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    main_sdram_phaseinjector1_command_issue_re <= 1'd0;
    main_sdram_phaseinjector1_command_issue_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 4'd8))) begin
        main_sdram_phaseinjector1_command_issue_re <= builder_csr_bankarray_interface6_bank_bus_we;
        main_sdram_phaseinjector1_command_issue_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_dfii_pi1_address0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[12:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_dfii_pi1_address0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_dfii_pi1_address0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 4'd9))) begin
        builder_csr_bankarray_csrbank6_dfii_pi1_address0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_dfii_pi1_address0_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 4'd10))) begin
        builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_dfii_pi1_rddata_r = builder_csr_bankarray_interface6_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_dfii_pi1_rddata_re <= 1'd0;
    builder_csr_bankarray_csrbank6_dfii_pi1_rddata_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csr_bankarray_csrbank6_dfii_pi1_rddata_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_dfii_pi1_rddata_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign main_sdram_sel = main_sdram_storage[0];
assign main_sdram_cke = main_sdram_storage[1];
assign main_sdram_odt = main_sdram_storage[2];
assign main_sdram_reset_n = main_sdram_storage[3];
assign builder_csr_bankarray_csrbank6_dfii_control0_w = main_sdram_storage[3:0];
assign main_sdram_phaseinjector0_csrfield_cs = main_sdram_phaseinjector0_command_storage[0];
assign main_sdram_phaseinjector0_csrfield_we = main_sdram_phaseinjector0_command_storage[1];
assign main_sdram_phaseinjector0_csrfield_cas = main_sdram_phaseinjector0_command_storage[2];
assign main_sdram_phaseinjector0_csrfield_ras = main_sdram_phaseinjector0_command_storage[3];
assign main_sdram_phaseinjector0_csrfield_wren = main_sdram_phaseinjector0_command_storage[4];
assign main_sdram_phaseinjector0_csrfield_rden = main_sdram_phaseinjector0_command_storage[5];
assign main_sdram_phaseinjector0_csrfield_cs_top = main_sdram_phaseinjector0_command_storage[6];
assign main_sdram_phaseinjector0_csrfield_cs_bottom = main_sdram_phaseinjector0_command_storage[7];
assign builder_csr_bankarray_csrbank6_dfii_pi0_command0_w = main_sdram_phaseinjector0_command_storage[7:0];
assign builder_csr_bankarray_csrbank6_dfii_pi0_address0_w = main_sdram_phaseinjector0_address_storage[12:0];
assign builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_w = main_sdram_phaseinjector0_baddress_storage[1:0];
assign builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_w = main_sdram_phaseinjector0_wrdata_storage[15:0];
assign builder_csr_bankarray_csrbank6_dfii_pi0_rddata_w = main_sdram_phaseinjector0_rddata_status[15:0];
assign main_sdram_phaseinjector0_rddata_we = builder_csr_bankarray_csrbank6_dfii_pi0_rddata_we;
assign main_sdram_phaseinjector1_csrfield_cs = main_sdram_phaseinjector1_command_storage[0];
assign main_sdram_phaseinjector1_csrfield_we = main_sdram_phaseinjector1_command_storage[1];
assign main_sdram_phaseinjector1_csrfield_cas = main_sdram_phaseinjector1_command_storage[2];
assign main_sdram_phaseinjector1_csrfield_ras = main_sdram_phaseinjector1_command_storage[3];
assign main_sdram_phaseinjector1_csrfield_wren = main_sdram_phaseinjector1_command_storage[4];
assign main_sdram_phaseinjector1_csrfield_rden = main_sdram_phaseinjector1_command_storage[5];
assign main_sdram_phaseinjector1_csrfield_cs_top = main_sdram_phaseinjector1_command_storage[6];
assign main_sdram_phaseinjector1_csrfield_cs_bottom = main_sdram_phaseinjector1_command_storage[7];
assign builder_csr_bankarray_csrbank6_dfii_pi1_command0_w = main_sdram_phaseinjector1_command_storage[7:0];
assign builder_csr_bankarray_csrbank6_dfii_pi1_address0_w = main_sdram_phaseinjector1_address_storage[12:0];
assign builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_w = main_sdram_phaseinjector1_baddress_storage[1:0];
assign builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_w = main_sdram_phaseinjector1_wrdata_storage[15:0];
assign builder_csr_bankarray_csrbank6_dfii_pi1_rddata_w = main_sdram_phaseinjector1_rddata_status[15:0];
assign main_sdram_phaseinjector1_rddata_we = builder_csr_bankarray_csrbank6_dfii_pi1_rddata_we;
assign builder_csr_bankarray_csrbank7_sel = (builder_csr_bankarray_interface7_bank_bus_adr[13:9] == 4'd8);
assign builder_csr_bankarray_csrbank7_control0_r = builder_csr_bankarray_interface7_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank7_control0_re <= 1'd0;
    builder_csr_bankarray_csrbank7_control0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank7_control0_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_control0_we <= builder_csr_bankarray_interface7_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank7_status_r = builder_csr_bankarray_interface7_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank7_status_re <= 1'd0;
    builder_csr_bankarray_csrbank7_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank7_status_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_status_we <= builder_csr_bankarray_interface7_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank7_mosi0_r = builder_csr_bankarray_interface7_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank7_mosi0_re <= 1'd0;
    builder_csr_bankarray_csrbank7_mosi0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank7_mosi0_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_mosi0_we <= builder_csr_bankarray_interface7_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank7_miso_r = builder_csr_bankarray_interface7_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank7_miso_re <= 1'd0;
    builder_csr_bankarray_csrbank7_miso_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank7_miso_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_miso_we <= builder_csr_bankarray_interface7_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank7_cs0_r = builder_csr_bankarray_interface7_bank_bus_dat_w[16:0];
always @(*) begin
    builder_csr_bankarray_csrbank7_cs0_re <= 1'd0;
    builder_csr_bankarray_csrbank7_cs0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank7_cs0_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_cs0_we <= builder_csr_bankarray_interface7_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank7_loopback0_r = builder_csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank7_loopback0_re <= 1'd0;
    builder_csr_bankarray_csrbank7_loopback0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank7_loopback0_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_loopback0_we <= builder_csr_bankarray_interface7_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank7_clk_divider0_r = builder_csr_bankarray_interface7_bank_bus_dat_w[15:0];
always @(*) begin
    builder_csr_bankarray_csrbank7_clk_divider0_re <= 1'd0;
    builder_csr_bankarray_csrbank7_clk_divider0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank7_sel & (builder_csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank7_clk_divider0_re <= builder_csr_bankarray_interface7_bank_bus_we;
        builder_csr_bankarray_csrbank7_clk_divider0_we <= builder_csr_bankarray_interface7_bank_bus_re;
    end
end
always @(*) begin
    start1 <= 1'd0;
    if (control_re) begin
        start1 <= control_storage[0];
    end
end
assign length1 = control_storage[15:8];
assign builder_csr_bankarray_csrbank7_control0_w = control_storage[15:0];
always @(*) begin
    status_status <= 2'd0;
    status_status[0] <= done1;
    status_status[1] <= mode0;
end
assign builder_csr_bankarray_csrbank7_status_w = status_status[1:0];
assign status_we = builder_csr_bankarray_csrbank7_status_we;
assign builder_csr_bankarray_csrbank7_mosi0_w = mosi_storage[7:0];
assign builder_csr_bankarray_csrbank7_miso_w = miso_status[7:0];
assign miso_we = builder_csr_bankarray_csrbank7_miso_we;
assign sel = cs_storage[0];
assign mode1 = cs_storage[16];
assign builder_csr_bankarray_csrbank7_cs0_w = cs_storage[16:0];
assign mode2 = loopback_storage;
assign builder_csr_bankarray_csrbank7_loopback0_w = loopback_storage;
assign builder_csr_bankarray_csrbank7_clk_divider0_w = storage[15:0];
assign builder_csr_bankarray_csrbank8_sel = (builder_csr_bankarray_interface8_bank_bus_adr[13:9] == 4'd9);
assign builder_csr_bankarray_csrbank8_load0_r = builder_csr_bankarray_interface8_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank8_load0_re <= 1'd0;
    builder_csr_bankarray_csrbank8_load0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank8_load0_re <= builder_csr_bankarray_interface8_bank_bus_we;
        builder_csr_bankarray_csrbank8_load0_we <= builder_csr_bankarray_interface8_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank8_reload0_r = builder_csr_bankarray_interface8_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank8_reload0_re <= 1'd0;
    builder_csr_bankarray_csrbank8_reload0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank8_reload0_re <= builder_csr_bankarray_interface8_bank_bus_we;
        builder_csr_bankarray_csrbank8_reload0_we <= builder_csr_bankarray_interface8_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank8_en0_r = builder_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank8_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank8_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank8_en0_re <= builder_csr_bankarray_interface8_bank_bus_we;
        builder_csr_bankarray_csrbank8_en0_we <= builder_csr_bankarray_interface8_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank8_update_value0_r = builder_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank8_update_value0_re <= 1'd0;
    builder_csr_bankarray_csrbank8_update_value0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank8_update_value0_re <= builder_csr_bankarray_interface8_bank_bus_we;
        builder_csr_bankarray_csrbank8_update_value0_we <= builder_csr_bankarray_interface8_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank8_value_r = builder_csr_bankarray_interface8_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank8_value_re <= 1'd0;
    builder_csr_bankarray_csrbank8_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank8_value_re <= builder_csr_bankarray_interface8_bank_bus_we;
        builder_csr_bankarray_csrbank8_value_we <= builder_csr_bankarray_interface8_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank8_ev_status_r = builder_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank8_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank8_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank8_ev_status_re <= builder_csr_bankarray_interface8_bank_bus_we;
        builder_csr_bankarray_csrbank8_ev_status_we <= builder_csr_bankarray_interface8_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank8_ev_pending_r = builder_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank8_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank8_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank8_ev_pending_re <= builder_csr_bankarray_interface8_bank_bus_we;
        builder_csr_bankarray_csrbank8_ev_pending_we <= builder_csr_bankarray_interface8_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank8_ev_enable0_r = builder_csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank8_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank8_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank8_sel & (builder_csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank8_ev_enable0_re <= builder_csr_bankarray_interface8_bank_bus_we;
        builder_csr_bankarray_csrbank8_ev_enable0_we <= builder_csr_bankarray_interface8_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank8_load0_w = main_basesoc_timer_load_storage[31:0];
assign builder_csr_bankarray_csrbank8_reload0_w = main_basesoc_timer_reload_storage[31:0];
assign builder_csr_bankarray_csrbank8_en0_w = main_basesoc_timer_en_storage;
assign builder_csr_bankarray_csrbank8_update_value0_w = main_basesoc_timer_update_value_storage;
assign builder_csr_bankarray_csrbank8_value_w = main_basesoc_timer_value_status[31:0];
assign main_basesoc_timer_value_we = builder_csr_bankarray_csrbank8_value_we;
always @(*) begin
    main_basesoc_timer_status_status <= 1'd0;
    main_basesoc_timer_status_status <= main_basesoc_timer_zero0;
end
assign builder_csr_bankarray_csrbank8_ev_status_w = main_basesoc_timer_status_status;
assign main_basesoc_timer_status_we = builder_csr_bankarray_csrbank8_ev_status_we;
always @(*) begin
    main_basesoc_timer_pending_status <= 1'd0;
    main_basesoc_timer_pending_status <= main_basesoc_timer_zero1;
end
assign builder_csr_bankarray_csrbank8_ev_pending_w = main_basesoc_timer_pending_status;
assign main_basesoc_timer_pending_we = builder_csr_bankarray_csrbank8_ev_pending_we;
assign main_basesoc_timer_zero2 = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank8_ev_enable0_w = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank9_sel = (builder_csr_bankarray_interface9_bank_bus_adr[13:9] == 4'd10);
assign main_basesoc_uart_rxtx_r = builder_csr_bankarray_interface9_bank_bus_dat_w[7:0];
always @(*) begin
    main_basesoc_uart_rxtx_re <= 1'd0;
    main_basesoc_uart_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 1'd0))) begin
        main_basesoc_uart_rxtx_re <= builder_csr_bankarray_interface9_bank_bus_we;
        main_basesoc_uart_rxtx_we <= builder_csr_bankarray_interface9_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank9_txfull_r = builder_csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank9_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank9_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank9_txfull_re <= builder_csr_bankarray_interface9_bank_bus_we;
        builder_csr_bankarray_csrbank9_txfull_we <= builder_csr_bankarray_interface9_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank9_rxempty_r = builder_csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank9_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank9_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank9_rxempty_re <= builder_csr_bankarray_interface9_bank_bus_we;
        builder_csr_bankarray_csrbank9_rxempty_we <= builder_csr_bankarray_interface9_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank9_ev_status_r = builder_csr_bankarray_interface9_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank9_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank9_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank9_ev_status_re <= builder_csr_bankarray_interface9_bank_bus_we;
        builder_csr_bankarray_csrbank9_ev_status_we <= builder_csr_bankarray_interface9_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank9_ev_pending_r = builder_csr_bankarray_interface9_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank9_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank9_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank9_ev_pending_re <= builder_csr_bankarray_interface9_bank_bus_we;
        builder_csr_bankarray_csrbank9_ev_pending_we <= builder_csr_bankarray_interface9_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank9_ev_enable0_r = builder_csr_bankarray_interface9_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank9_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank9_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank9_ev_enable0_re <= builder_csr_bankarray_interface9_bank_bus_we;
        builder_csr_bankarray_csrbank9_ev_enable0_we <= builder_csr_bankarray_interface9_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank9_txempty_r = builder_csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank9_txempty_re <= 1'd0;
    builder_csr_bankarray_csrbank9_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank9_txempty_re <= builder_csr_bankarray_interface9_bank_bus_we;
        builder_csr_bankarray_csrbank9_txempty_we <= builder_csr_bankarray_interface9_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank9_rxfull_r = builder_csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank9_rxfull_re <= 1'd0;
    builder_csr_bankarray_csrbank9_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank9_sel & (builder_csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank9_rxfull_re <= builder_csr_bankarray_interface9_bank_bus_we;
        builder_csr_bankarray_csrbank9_rxfull_we <= builder_csr_bankarray_interface9_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank9_txfull_w = main_basesoc_uart_txfull_status;
assign main_basesoc_uart_txfull_we = builder_csr_bankarray_csrbank9_txfull_we;
assign builder_csr_bankarray_csrbank9_rxempty_w = main_basesoc_uart_rxempty_status;
assign main_basesoc_uart_rxempty_we = builder_csr_bankarray_csrbank9_rxempty_we;
always @(*) begin
    main_basesoc_uart_status_status <= 2'd0;
    main_basesoc_uart_status_status[0] <= main_basesoc_uart_tx0;
    main_basesoc_uart_status_status[1] <= main_basesoc_uart_rx0;
end
assign builder_csr_bankarray_csrbank9_ev_status_w = main_basesoc_uart_status_status[1:0];
assign main_basesoc_uart_status_we = builder_csr_bankarray_csrbank9_ev_status_we;
always @(*) begin
    main_basesoc_uart_pending_status <= 2'd0;
    main_basesoc_uart_pending_status[0] <= main_basesoc_uart_tx1;
    main_basesoc_uart_pending_status[1] <= main_basesoc_uart_rx1;
end
assign builder_csr_bankarray_csrbank9_ev_pending_w = main_basesoc_uart_pending_status[1:0];
assign main_basesoc_uart_pending_we = builder_csr_bankarray_csrbank9_ev_pending_we;
assign main_basesoc_uart_tx2 = main_basesoc_uart_enable_storage[0];
assign main_basesoc_uart_rx2 = main_basesoc_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank9_ev_enable0_w = main_basesoc_uart_enable_storage[1:0];
assign builder_csr_bankarray_csrbank9_txempty_w = main_basesoc_uart_txempty_status;
assign main_basesoc_uart_txempty_we = builder_csr_bankarray_csrbank9_txempty_we;
assign builder_csr_bankarray_csrbank9_rxfull_w = main_basesoc_uart_rxfull_status;
assign main_basesoc_uart_rxfull_we = builder_csr_bankarray_csrbank9_rxfull_we;
assign builder_csr_bankarray_csrbank10_sel = (builder_csr_bankarray_interface10_bank_bus_adr[13:9] == 4'd11);
assign builder_csr_bankarray_csrbank10_dma_base0_r = builder_csr_bankarray_interface10_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank10_dma_base0_re <= 1'd0;
    builder_csr_bankarray_csrbank10_dma_base0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank10_sel & (builder_csr_bankarray_interface10_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank10_dma_base0_re <= builder_csr_bankarray_interface10_bank_bus_we;
        builder_csr_bankarray_csrbank10_dma_base0_we <= builder_csr_bankarray_interface10_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank10_dma_length0_r = builder_csr_bankarray_interface10_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank10_dma_length0_re <= 1'd0;
    builder_csr_bankarray_csrbank10_dma_length0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank10_sel & (builder_csr_bankarray_interface10_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank10_dma_length0_re <= builder_csr_bankarray_interface10_bank_bus_we;
        builder_csr_bankarray_csrbank10_dma_length0_we <= builder_csr_bankarray_interface10_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank10_dma_enable0_r = builder_csr_bankarray_interface10_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank10_dma_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank10_dma_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank10_sel & (builder_csr_bankarray_interface10_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank10_dma_enable0_re <= builder_csr_bankarray_interface10_bank_bus_we;
        builder_csr_bankarray_csrbank10_dma_enable0_we <= builder_csr_bankarray_interface10_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank10_dma_done_r = builder_csr_bankarray_interface10_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank10_dma_done_re <= 1'd0;
    builder_csr_bankarray_csrbank10_dma_done_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank10_sel & (builder_csr_bankarray_interface10_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank10_dma_done_re <= builder_csr_bankarray_interface10_bank_bus_we;
        builder_csr_bankarray_csrbank10_dma_done_we <= builder_csr_bankarray_interface10_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank10_dma_loop0_r = builder_csr_bankarray_interface10_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank10_dma_loop0_re <= 1'd0;
    builder_csr_bankarray_csrbank10_dma_loop0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank10_sel & (builder_csr_bankarray_interface10_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank10_dma_loop0_re <= builder_csr_bankarray_interface10_bank_bus_we;
        builder_csr_bankarray_csrbank10_dma_loop0_we <= builder_csr_bankarray_interface10_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank10_dma_offset_r = builder_csr_bankarray_interface10_bank_bus_dat_w[31:0];
always @(*) begin
    builder_csr_bankarray_csrbank10_dma_offset_re <= 1'd0;
    builder_csr_bankarray_csrbank10_dma_offset_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank10_sel & (builder_csr_bankarray_interface10_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank10_dma_offset_re <= builder_csr_bankarray_interface10_bank_bus_we;
        builder_csr_bankarray_csrbank10_dma_offset_we <= builder_csr_bankarray_interface10_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank10_dma_base0_w = main_vfb_litedramdmareader_base_storage[31:0];
assign builder_csr_bankarray_csrbank10_dma_length0_w = main_vfb_litedramdmareader_length_storage[31:0];
assign builder_csr_bankarray_csrbank10_dma_enable0_w = main_vfb_litedramdmareader_enable_storage;
assign builder_csr_bankarray_csrbank10_dma_done_w = main_vfb_litedramdmareader_done_status;
assign main_vfb_litedramdmareader_done_we = builder_csr_bankarray_csrbank10_dma_done_we;
assign builder_csr_bankarray_csrbank10_dma_loop0_w = main_vfb_litedramdmareader_loop_storage;
assign builder_csr_bankarray_csrbank10_dma_offset_w = main_vfb_litedramdmareader_offset_status[31:0];
assign main_vfb_litedramdmareader_offset_we = builder_csr_bankarray_csrbank10_dma_offset_we;
assign builder_csr_bankarray_csrbank11_sel = (builder_csr_bankarray_interface11_bank_bus_adr[13:9] == 4'd12);
assign builder_csr_bankarray_csrbank11_enable0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank11_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank11_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank11_enable0_re <= builder_csr_bankarray_interface11_bank_bus_we;
        builder_csr_bankarray_csrbank11_enable0_we <= builder_csr_bankarray_interface11_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank11_hres0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank11_hres0_re <= 1'd0;
    builder_csr_bankarray_csrbank11_hres0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank11_hres0_re <= builder_csr_bankarray_interface11_bank_bus_we;
        builder_csr_bankarray_csrbank11_hres0_we <= builder_csr_bankarray_interface11_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank11_hsync_start0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank11_hsync_start0_re <= 1'd0;
    builder_csr_bankarray_csrbank11_hsync_start0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank11_hsync_start0_re <= builder_csr_bankarray_interface11_bank_bus_we;
        builder_csr_bankarray_csrbank11_hsync_start0_we <= builder_csr_bankarray_interface11_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank11_hsync_end0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank11_hsync_end0_re <= 1'd0;
    builder_csr_bankarray_csrbank11_hsync_end0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank11_hsync_end0_re <= builder_csr_bankarray_interface11_bank_bus_we;
        builder_csr_bankarray_csrbank11_hsync_end0_we <= builder_csr_bankarray_interface11_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank11_hscan0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank11_hscan0_re <= 1'd0;
    builder_csr_bankarray_csrbank11_hscan0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank11_hscan0_re <= builder_csr_bankarray_interface11_bank_bus_we;
        builder_csr_bankarray_csrbank11_hscan0_we <= builder_csr_bankarray_interface11_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank11_vres0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank11_vres0_re <= 1'd0;
    builder_csr_bankarray_csrbank11_vres0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank11_vres0_re <= builder_csr_bankarray_interface11_bank_bus_we;
        builder_csr_bankarray_csrbank11_vres0_we <= builder_csr_bankarray_interface11_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank11_vsync_start0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank11_vsync_start0_re <= 1'd0;
    builder_csr_bankarray_csrbank11_vsync_start0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank11_vsync_start0_re <= builder_csr_bankarray_interface11_bank_bus_we;
        builder_csr_bankarray_csrbank11_vsync_start0_we <= builder_csr_bankarray_interface11_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank11_vsync_end0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank11_vsync_end0_re <= 1'd0;
    builder_csr_bankarray_csrbank11_vsync_end0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank11_vsync_end0_re <= builder_csr_bankarray_interface11_bank_bus_we;
        builder_csr_bankarray_csrbank11_vsync_end0_we <= builder_csr_bankarray_interface11_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank11_vscan0_r = builder_csr_bankarray_interface11_bank_bus_dat_w[11:0];
always @(*) begin
    builder_csr_bankarray_csrbank11_vscan0_re <= 1'd0;
    builder_csr_bankarray_csrbank11_vscan0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank11_sel & (builder_csr_bankarray_interface11_bank_bus_adr[8:0] == 4'd8))) begin
        builder_csr_bankarray_csrbank11_vscan0_re <= builder_csr_bankarray_interface11_bank_bus_we;
        builder_csr_bankarray_csrbank11_vscan0_we <= builder_csr_bankarray_interface11_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank11_enable0_w = main_vtg_enable_storage;
assign builder_csr_bankarray_csrbank11_hres0_w = main_vtg_hres_storage[11:0];
assign builder_csr_bankarray_csrbank11_hsync_start0_w = main_vtg_hsync_start_storage[11:0];
assign builder_csr_bankarray_csrbank11_hsync_end0_w = main_vtg_hsync_end_storage[11:0];
assign builder_csr_bankarray_csrbank11_hscan0_w = main_vtg_hscan_storage[11:0];
assign builder_csr_bankarray_csrbank11_vres0_w = main_vtg_vres_storage[11:0];
assign builder_csr_bankarray_csrbank11_vsync_start0_w = main_vtg_vsync_start_storage[11:0];
assign builder_csr_bankarray_csrbank11_vsync_end0_w = main_vtg_vsync_end_storage[11:0];
assign builder_csr_bankarray_csrbank11_vscan0_w = main_vtg_vscan_storage[11:0];
assign builder_csr_interconnect_adr = builder_basesoc_adr;
assign builder_csr_interconnect_re = builder_basesoc_re;
assign builder_csr_interconnect_we = builder_basesoc_we;
assign builder_csr_interconnect_dat_w = builder_basesoc_dat_w;
assign builder_basesoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface5_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface6_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface7_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface8_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface9_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface10_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface11_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface1_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface2_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface3_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface4_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface5_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface6_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface7_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface8_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface9_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface10_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface11_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_sram_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface5_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface6_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface7_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface8_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface9_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface10_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface11_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface5_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface6_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface7_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface8_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface9_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface10_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface11_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = ((((((((((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_interface5_bank_bus_dat_r) | builder_csr_bankarray_interface6_bank_bus_dat_r) | builder_csr_bankarray_interface7_bank_bus_dat_r) | builder_csr_bankarray_interface8_bank_bus_dat_r) | builder_csr_bankarray_interface9_bank_bus_dat_r) | builder_csr_bankarray_interface10_bank_bus_dat_r) | builder_csr_bankarray_interface11_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
assign builder_slice_proxy0 = builder_aw_payload_addr[31:2];
assign builder_slice_proxy1 = builder_ar_payload_addr[31:2];
assign builder_slice_proxy2 = builder_aw_payload_addr[31:2];
assign builder_slice_proxy3 = builder_ar_payload_addr[31:2];
assign builder_slice_proxy4 = builder_aw_payload_addr[31:2];
assign builder_slice_proxy5 = builder_ar_payload_addr[31:2];
assign builder_slice_proxy6 = builder_aw_payload_addr[31:2];
assign builder_slice_proxy7 = builder_ar_payload_addr[31:2];
always @(*) begin
    builder_comb_rhs_self0 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self0 <= main_basesoc_socbushandler_axiinterface0_aw_valid;
        end
        default: begin
            builder_comb_rhs_self0 <= main_basesoc_socbushandler_axiinterface1_aw_valid;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self1 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self1 <= main_basesoc_socbushandler_axiinterface0_aw_first;
        end
        default: begin
            builder_comb_rhs_self1 <= main_basesoc_socbushandler_axiinterface1_aw_first;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self2 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self2 <= main_basesoc_socbushandler_axiinterface0_aw_last;
        end
        default: begin
            builder_comb_rhs_self2 <= main_basesoc_socbushandler_axiinterface1_aw_last;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self3 <= 32'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self3 <= main_basesoc_socbushandler_axiinterface0_aw_payload_addr;
        end
        default: begin
            builder_comb_rhs_self3 <= main_basesoc_socbushandler_axiinterface1_aw_payload_addr;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self4 <= 2'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self4 <= main_basesoc_socbushandler_axiinterface0_aw_payload_burst;
        end
        default: begin
            builder_comb_rhs_self4 <= main_basesoc_socbushandler_axiinterface1_aw_payload_burst;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self5 <= 8'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self5 <= main_basesoc_socbushandler_axiinterface0_aw_payload_len;
        end
        default: begin
            builder_comb_rhs_self5 <= main_basesoc_socbushandler_axiinterface1_aw_payload_len;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self6 <= 3'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self6 <= main_basesoc_socbushandler_axiinterface0_aw_payload_size;
        end
        default: begin
            builder_comb_rhs_self6 <= main_basesoc_socbushandler_axiinterface1_aw_payload_size;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self7 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self7 <= main_basesoc_socbushandler_axiinterface0_aw_payload_lock;
        end
        default: begin
            builder_comb_rhs_self7 <= main_basesoc_socbushandler_axiinterface1_aw_payload_lock;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self8 <= 3'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self8 <= main_basesoc_socbushandler_axiinterface0_aw_payload_prot;
        end
        default: begin
            builder_comb_rhs_self8 <= main_basesoc_socbushandler_axiinterface1_aw_payload_prot;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self9 <= 4'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self9 <= main_basesoc_socbushandler_axiinterface0_aw_payload_cache;
        end
        default: begin
            builder_comb_rhs_self9 <= main_basesoc_socbushandler_axiinterface1_aw_payload_cache;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self10 <= 4'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self10 <= main_basesoc_socbushandler_axiinterface0_aw_payload_qos;
        end
        default: begin
            builder_comb_rhs_self10 <= main_basesoc_socbushandler_axiinterface1_aw_payload_qos;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self11 <= 4'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self11 <= main_basesoc_socbushandler_axiinterface0_aw_payload_region;
        end
        default: begin
            builder_comb_rhs_self11 <= main_basesoc_socbushandler_axiinterface1_aw_payload_region;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self12 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self12 <= main_basesoc_socbushandler_axiinterface0_aw_param_id;
        end
        default: begin
            builder_comb_rhs_self12 <= main_basesoc_socbushandler_axiinterface1_aw_param_id;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self13 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self13 <= main_basesoc_socbushandler_axiinterface0_aw_param_dest;
        end
        default: begin
            builder_comb_rhs_self13 <= main_basesoc_socbushandler_axiinterface1_aw_param_dest;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self14 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self14 <= main_basesoc_socbushandler_axiinterface0_aw_param_user;
        end
        default: begin
            builder_comb_rhs_self14 <= main_basesoc_socbushandler_axiinterface1_aw_param_user;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self15 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self15 <= main_basesoc_socbushandler_axiinterface0_w_valid;
        end
        default: begin
            builder_comb_rhs_self15 <= main_basesoc_socbushandler_axiinterface1_w_valid;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self16 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self16 <= main_basesoc_socbushandler_axiinterface0_w_first;
        end
        default: begin
            builder_comb_rhs_self16 <= main_basesoc_socbushandler_axiinterface1_w_first;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self17 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self17 <= main_basesoc_socbushandler_axiinterface0_w_last;
        end
        default: begin
            builder_comb_rhs_self17 <= main_basesoc_socbushandler_axiinterface1_w_last;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self18 <= 32'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self18 <= main_basesoc_socbushandler_axiinterface0_w_payload_data;
        end
        default: begin
            builder_comb_rhs_self18 <= main_basesoc_socbushandler_axiinterface1_w_payload_data;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self19 <= 4'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self19 <= main_basesoc_socbushandler_axiinterface0_w_payload_strb;
        end
        default: begin
            builder_comb_rhs_self19 <= main_basesoc_socbushandler_axiinterface1_w_payload_strb;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self20 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self20 <= main_basesoc_socbushandler_axiinterface0_w_param_id;
        end
        default: begin
            builder_comb_rhs_self20 <= main_basesoc_socbushandler_axiinterface1_w_param_id;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self21 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self21 <= main_basesoc_socbushandler_axiinterface0_w_param_dest;
        end
        default: begin
            builder_comb_rhs_self21 <= main_basesoc_socbushandler_axiinterface1_w_param_dest;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self22 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self22 <= main_basesoc_socbushandler_axiinterface0_w_param_user;
        end
        default: begin
            builder_comb_rhs_self22 <= main_basesoc_socbushandler_axiinterface1_w_param_user;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self23 <= 1'd0;
    case (builder_rr_write_grant)
        1'd0: begin
            builder_comb_rhs_self23 <= main_basesoc_socbushandler_axiinterface0_b_ready;
        end
        default: begin
            builder_comb_rhs_self23 <= main_basesoc_socbushandler_axiinterface1_b_ready;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self24 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self24 <= main_basesoc_socbushandler_axiinterface0_ar_valid;
        end
        default: begin
            builder_comb_rhs_self24 <= main_basesoc_socbushandler_axiinterface1_ar_valid;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self25 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self25 <= main_basesoc_socbushandler_axiinterface0_ar_first;
        end
        default: begin
            builder_comb_rhs_self25 <= main_basesoc_socbushandler_axiinterface1_ar_first;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self26 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self26 <= main_basesoc_socbushandler_axiinterface0_ar_last;
        end
        default: begin
            builder_comb_rhs_self26 <= main_basesoc_socbushandler_axiinterface1_ar_last;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self27 <= 32'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self27 <= main_basesoc_socbushandler_axiinterface0_ar_payload_addr;
        end
        default: begin
            builder_comb_rhs_self27 <= main_basesoc_socbushandler_axiinterface1_ar_payload_addr;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self28 <= 2'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self28 <= main_basesoc_socbushandler_axiinterface0_ar_payload_burst;
        end
        default: begin
            builder_comb_rhs_self28 <= main_basesoc_socbushandler_axiinterface1_ar_payload_burst;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self29 <= 8'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self29 <= main_basesoc_socbushandler_axiinterface0_ar_payload_len;
        end
        default: begin
            builder_comb_rhs_self29 <= main_basesoc_socbushandler_axiinterface1_ar_payload_len;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self30 <= 3'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self30 <= main_basesoc_socbushandler_axiinterface0_ar_payload_size;
        end
        default: begin
            builder_comb_rhs_self30 <= main_basesoc_socbushandler_axiinterface1_ar_payload_size;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self31 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self31 <= main_basesoc_socbushandler_axiinterface0_ar_payload_lock;
        end
        default: begin
            builder_comb_rhs_self31 <= main_basesoc_socbushandler_axiinterface1_ar_payload_lock;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self32 <= 3'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self32 <= main_basesoc_socbushandler_axiinterface0_ar_payload_prot;
        end
        default: begin
            builder_comb_rhs_self32 <= main_basesoc_socbushandler_axiinterface1_ar_payload_prot;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self33 <= 4'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self33 <= main_basesoc_socbushandler_axiinterface0_ar_payload_cache;
        end
        default: begin
            builder_comb_rhs_self33 <= main_basesoc_socbushandler_axiinterface1_ar_payload_cache;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self34 <= 4'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self34 <= main_basesoc_socbushandler_axiinterface0_ar_payload_qos;
        end
        default: begin
            builder_comb_rhs_self34 <= main_basesoc_socbushandler_axiinterface1_ar_payload_qos;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self35 <= 4'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self35 <= main_basesoc_socbushandler_axiinterface0_ar_payload_region;
        end
        default: begin
            builder_comb_rhs_self35 <= main_basesoc_socbushandler_axiinterface1_ar_payload_region;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self36 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self36 <= main_basesoc_socbushandler_axiinterface0_ar_param_id;
        end
        default: begin
            builder_comb_rhs_self36 <= main_basesoc_socbushandler_axiinterface1_ar_param_id;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self37 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self37 <= main_basesoc_socbushandler_axiinterface0_ar_param_dest;
        end
        default: begin
            builder_comb_rhs_self37 <= main_basesoc_socbushandler_axiinterface1_ar_param_dest;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self38 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self38 <= main_basesoc_socbushandler_axiinterface0_ar_param_user;
        end
        default: begin
            builder_comb_rhs_self38 <= main_basesoc_socbushandler_axiinterface1_ar_param_user;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self39 <= 1'd0;
    case (builder_rr_read_grant)
        1'd0: begin
            builder_comb_rhs_self39 <= main_basesoc_socbushandler_axiinterface0_r_ready;
        end
        default: begin
            builder_comb_rhs_self39 <= main_basesoc_socbushandler_axiinterface1_r_ready;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self40 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_self40 <= main_sdram_choose_cmd_requests[0];
        end
        1'd1: begin
            builder_comb_rhs_self40 <= main_sdram_choose_cmd_requests[1];
        end
        2'd2: begin
            builder_comb_rhs_self40 <= main_sdram_choose_cmd_requests[2];
        end
        default: begin
            builder_comb_rhs_self40 <= main_sdram_choose_cmd_requests[3];
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self41 <= 13'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_self41 <= main_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            builder_comb_rhs_self41 <= main_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            builder_comb_rhs_self41 <= main_sdram_bankmachine2_cmd_payload_a;
        end
        default: begin
            builder_comb_rhs_self41 <= main_sdram_bankmachine3_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self42 <= 2'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_self42 <= main_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            builder_comb_rhs_self42 <= main_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            builder_comb_rhs_self42 <= main_sdram_bankmachine2_cmd_payload_ba;
        end
        default: begin
            builder_comb_rhs_self42 <= main_sdram_bankmachine3_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self43 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_self43 <= main_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            builder_comb_rhs_self43 <= main_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            builder_comb_rhs_self43 <= main_sdram_bankmachine2_cmd_payload_is_read;
        end
        default: begin
            builder_comb_rhs_self43 <= main_sdram_bankmachine3_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self44 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_self44 <= main_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            builder_comb_rhs_self44 <= main_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            builder_comb_rhs_self44 <= main_sdram_bankmachine2_cmd_payload_is_write;
        end
        default: begin
            builder_comb_rhs_self44 <= main_sdram_bankmachine3_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self45 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_rhs_self45 <= main_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            builder_comb_rhs_self45 <= main_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            builder_comb_rhs_self45 <= main_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        default: begin
            builder_comb_rhs_self45 <= main_sdram_bankmachine3_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    builder_comb_t_self0 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_t_self0 <= main_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            builder_comb_t_self0 <= main_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            builder_comb_t_self0 <= main_sdram_bankmachine2_cmd_payload_cas;
        end
        default: begin
            builder_comb_t_self0 <= main_sdram_bankmachine3_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    builder_comb_t_self1 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_t_self1 <= main_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            builder_comb_t_self1 <= main_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            builder_comb_t_self1 <= main_sdram_bankmachine2_cmd_payload_ras;
        end
        default: begin
            builder_comb_t_self1 <= main_sdram_bankmachine3_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    builder_comb_t_self2 <= 1'd0;
    case (main_sdram_choose_cmd_grant)
        1'd0: begin
            builder_comb_t_self2 <= main_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            builder_comb_t_self2 <= main_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            builder_comb_t_self2 <= main_sdram_bankmachine2_cmd_payload_we;
        end
        default: begin
            builder_comb_t_self2 <= main_sdram_bankmachine3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self46 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_self46 <= main_sdram_choose_req_requests[0];
        end
        1'd1: begin
            builder_comb_rhs_self46 <= main_sdram_choose_req_requests[1];
        end
        2'd2: begin
            builder_comb_rhs_self46 <= main_sdram_choose_req_requests[2];
        end
        default: begin
            builder_comb_rhs_self46 <= main_sdram_choose_req_requests[3];
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self47 <= 13'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_self47 <= main_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            builder_comb_rhs_self47 <= main_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            builder_comb_rhs_self47 <= main_sdram_bankmachine2_cmd_payload_a;
        end
        default: begin
            builder_comb_rhs_self47 <= main_sdram_bankmachine3_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self48 <= 2'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_self48 <= main_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            builder_comb_rhs_self48 <= main_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            builder_comb_rhs_self48 <= main_sdram_bankmachine2_cmd_payload_ba;
        end
        default: begin
            builder_comb_rhs_self48 <= main_sdram_bankmachine3_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self49 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_self49 <= main_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            builder_comb_rhs_self49 <= main_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            builder_comb_rhs_self49 <= main_sdram_bankmachine2_cmd_payload_is_read;
        end
        default: begin
            builder_comb_rhs_self49 <= main_sdram_bankmachine3_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self50 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_self50 <= main_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            builder_comb_rhs_self50 <= main_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            builder_comb_rhs_self50 <= main_sdram_bankmachine2_cmd_payload_is_write;
        end
        default: begin
            builder_comb_rhs_self50 <= main_sdram_bankmachine3_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self51 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_rhs_self51 <= main_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            builder_comb_rhs_self51 <= main_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            builder_comb_rhs_self51 <= main_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        default: begin
            builder_comb_rhs_self51 <= main_sdram_bankmachine3_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    builder_comb_t_self3 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_t_self3 <= main_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            builder_comb_t_self3 <= main_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            builder_comb_t_self3 <= main_sdram_bankmachine2_cmd_payload_cas;
        end
        default: begin
            builder_comb_t_self3 <= main_sdram_bankmachine3_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    builder_comb_t_self4 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_t_self4 <= main_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            builder_comb_t_self4 <= main_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            builder_comb_t_self4 <= main_sdram_bankmachine2_cmd_payload_ras;
        end
        default: begin
            builder_comb_t_self4 <= main_sdram_bankmachine3_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    builder_comb_t_self5 <= 1'd0;
    case (main_sdram_choose_req_grant)
        1'd0: begin
            builder_comb_t_self5 <= main_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            builder_comb_t_self5 <= main_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            builder_comb_t_self5 <= main_sdram_bankmachine2_cmd_payload_we;
        end
        default: begin
            builder_comb_t_self5 <= main_sdram_bankmachine3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self52 <= 21'd0;
    case (builder_basesoc_roundrobin0_grant)
        1'd0: begin
            builder_comb_rhs_self52 <= {main_port_cmd_payload_addr[22:10], main_port_cmd_payload_addr[7:0]};
        end
        default: begin
            builder_comb_rhs_self52 <= {main_litedramcrossbar_cmd_payload_addr[22:10], main_litedramcrossbar_cmd_payload_addr[7:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self53 <= 1'd0;
    case (builder_basesoc_roundrobin0_grant)
        1'd0: begin
            builder_comb_rhs_self53 <= main_port_cmd_payload_we;
        end
        default: begin
            builder_comb_rhs_self53 <= main_litedramcrossbar_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self54 <= 1'd0;
    case (builder_basesoc_roundrobin0_grant)
        1'd0: begin
            builder_comb_rhs_self54 <= (((main_port_cmd_payload_addr[9:8] == 1'd0) & (~(((builder_basesoc_locked0 | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid);
        end
        default: begin
            builder_comb_rhs_self54 <= (((main_litedramcrossbar_cmd_payload_addr[9:8] == 1'd0) & (~(((builder_basesoc_locked1 | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self55 <= 21'd0;
    case (builder_basesoc_roundrobin1_grant)
        1'd0: begin
            builder_comb_rhs_self55 <= {main_port_cmd_payload_addr[22:10], main_port_cmd_payload_addr[7:0]};
        end
        default: begin
            builder_comb_rhs_self55 <= {main_litedramcrossbar_cmd_payload_addr[22:10], main_litedramcrossbar_cmd_payload_addr[7:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self56 <= 1'd0;
    case (builder_basesoc_roundrobin1_grant)
        1'd0: begin
            builder_comb_rhs_self56 <= main_port_cmd_payload_we;
        end
        default: begin
            builder_comb_rhs_self56 <= main_litedramcrossbar_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self57 <= 1'd0;
    case (builder_basesoc_roundrobin1_grant)
        1'd0: begin
            builder_comb_rhs_self57 <= (((main_port_cmd_payload_addr[9:8] == 1'd1) & (~(((builder_basesoc_locked2 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid);
        end
        default: begin
            builder_comb_rhs_self57 <= (((main_litedramcrossbar_cmd_payload_addr[9:8] == 1'd1) & (~(((builder_basesoc_locked3 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self58 <= 21'd0;
    case (builder_basesoc_roundrobin2_grant)
        1'd0: begin
            builder_comb_rhs_self58 <= {main_port_cmd_payload_addr[22:10], main_port_cmd_payload_addr[7:0]};
        end
        default: begin
            builder_comb_rhs_self58 <= {main_litedramcrossbar_cmd_payload_addr[22:10], main_litedramcrossbar_cmd_payload_addr[7:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self59 <= 1'd0;
    case (builder_basesoc_roundrobin2_grant)
        1'd0: begin
            builder_comb_rhs_self59 <= main_port_cmd_payload_we;
        end
        default: begin
            builder_comb_rhs_self59 <= main_litedramcrossbar_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self60 <= 1'd0;
    case (builder_basesoc_roundrobin2_grant)
        1'd0: begin
            builder_comb_rhs_self60 <= (((main_port_cmd_payload_addr[9:8] == 2'd2) & (~(((builder_basesoc_locked4 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd0))))) & main_port_cmd_valid);
        end
        default: begin
            builder_comb_rhs_self60 <= (((main_litedramcrossbar_cmd_payload_addr[9:8] == 2'd2) & (~(((builder_basesoc_locked5 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank3_lock & (builder_basesoc_roundrobin3_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self61 <= 21'd0;
    case (builder_basesoc_roundrobin3_grant)
        1'd0: begin
            builder_comb_rhs_self61 <= {main_port_cmd_payload_addr[22:10], main_port_cmd_payload_addr[7:0]};
        end
        default: begin
            builder_comb_rhs_self61 <= {main_litedramcrossbar_cmd_payload_addr[22:10], main_litedramcrossbar_cmd_payload_addr[7:0]};
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self62 <= 1'd0;
    case (builder_basesoc_roundrobin3_grant)
        1'd0: begin
            builder_comb_rhs_self62 <= main_port_cmd_payload_we;
        end
        default: begin
            builder_comb_rhs_self62 <= main_litedramcrossbar_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    builder_comb_rhs_self63 <= 1'd0;
    case (builder_basesoc_roundrobin3_grant)
        1'd0: begin
            builder_comb_rhs_self63 <= (((main_port_cmd_payload_addr[9:8] == 2'd3) & (~(((builder_basesoc_locked6 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd0))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd0))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd0))))) & main_port_cmd_valid);
        end
        default: begin
            builder_comb_rhs_self63 <= (((main_litedramcrossbar_cmd_payload_addr[9:8] == 2'd3) & (~(((builder_basesoc_locked7 | (main_sdram_interface_bank0_lock & (builder_basesoc_roundrobin0_grant == 1'd1))) | (main_sdram_interface_bank1_lock & (builder_basesoc_roundrobin1_grant == 1'd1))) | (main_sdram_interface_bank2_lock & (builder_basesoc_roundrobin2_grant == 1'd1))))) & main_litedramcrossbar_cmd_valid);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self0 <= 2'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_rhs_self0 <= main_sdram_nop_ba[1:0];
        end
        1'd1: begin
            builder_sync_rhs_self0 <= main_sdram_choose_cmd_cmd_payload_ba[1:0];
        end
        2'd2: begin
            builder_sync_rhs_self0 <= main_sdram_choose_req_cmd_payload_ba[1:0];
        end
        default: begin
            builder_sync_rhs_self0 <= main_sdram_cmd_payload_ba[1:0];
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self1 <= 13'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_rhs_self1 <= main_sdram_nop_a;
        end
        1'd1: begin
            builder_sync_rhs_self1 <= main_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_sync_rhs_self1 <= main_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_sync_rhs_self1 <= main_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self2 <= 1'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_rhs_self2 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self2 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_sync_rhs_self2 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_sync_rhs_self2 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self3 <= 1'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_rhs_self3 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self3 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_sync_rhs_self3 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_sync_rhs_self3 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self4 <= 1'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_rhs_self4 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self4 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_sync_rhs_self4 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_sync_rhs_self4 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self5 <= 1'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_rhs_self5 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self5 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_sync_rhs_self5 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_sync_rhs_self5 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self6 <= 1'd0;
    case (main_sdram_steerer_sel0)
        1'd0: begin
            builder_sync_rhs_self6 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self6 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_sync_rhs_self6 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_sync_rhs_self6 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self7 <= 2'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_rhs_self7 <= main_sdram_nop_ba[1:0];
        end
        1'd1: begin
            builder_sync_rhs_self7 <= main_sdram_choose_cmd_cmd_payload_ba[1:0];
        end
        2'd2: begin
            builder_sync_rhs_self7 <= main_sdram_choose_req_cmd_payload_ba[1:0];
        end
        default: begin
            builder_sync_rhs_self7 <= main_sdram_cmd_payload_ba[1:0];
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self8 <= 13'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_rhs_self8 <= main_sdram_nop_a;
        end
        1'd1: begin
            builder_sync_rhs_self8 <= main_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_sync_rhs_self8 <= main_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            builder_sync_rhs_self8 <= main_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self9 <= 1'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_rhs_self9 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self9 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_sync_rhs_self9 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_sync_rhs_self9 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self10 <= 1'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_rhs_self10 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self10 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_sync_rhs_self10 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_sync_rhs_self10 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self11 <= 1'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_rhs_self11 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self11 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_sync_rhs_self11 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            builder_sync_rhs_self11 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self12 <= 1'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_rhs_self12 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self12 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_sync_rhs_self12 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_sync_rhs_self12 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    builder_sync_rhs_self13 <= 1'd0;
    case (main_sdram_steerer_sel1)
        1'd0: begin
            builder_sync_rhs_self13 <= 1'd0;
        end
        1'd1: begin
            builder_sync_rhs_self13 <= ((main_sdram_choose_cmd_cmd_valid & main_sdram_choose_cmd_cmd_ready) & main_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_sync_rhs_self13 <= ((main_sdram_choose_req_cmd_valid & main_sdram_choose_req_cmd_ready) & main_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_sync_rhs_self13 <= ((main_sdram_cmd_valid & main_sdram_cmd_ready) & main_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    builder_sync_f_self <= 1'd0;
    case (mosi_sel)
        1'd0: begin
            builder_sync_f_self <= self[0];
        end
        1'd1: begin
            builder_sync_f_self <= self[1];
        end
        2'd2: begin
            builder_sync_f_self <= self[2];
        end
        2'd3: begin
            builder_sync_f_self <= self[3];
        end
        3'd4: begin
            builder_sync_f_self <= self[4];
        end
        3'd5: begin
            builder_sync_f_self <= self[5];
        end
        3'd6: begin
            builder_sync_f_self <= self[6];
        end
        default: begin
            builder_sync_f_self <= self[7];
        end
    endcase
end
assign main_basesoc_rx_rx = builder_multiregimpl0_regs1;
assign main_vtg_enable = builder_multiregimpl1_regs1;
assign main_vtg_hres = builder_multiregimpl2_regs1;
assign main_vtg_hsync_start = builder_multiregimpl3_regs1;
assign main_vtg_hsync_end = builder_multiregimpl4_regs1;
assign main_vtg_hscan = builder_multiregimpl5_regs1;
assign main_vtg_vres = builder_multiregimpl6_regs1;
assign main_vtg_vsync_start = builder_multiregimpl7_regs1;
assign main_vtg_vsync_end = builder_multiregimpl8_regs1;
assign main_vtg_vscan = builder_multiregimpl9_regs1;
assign main_vfb_cdc_cdc_produce_rdomain = builder_multiregimpl10_regs1;
assign main_vfb_cdc_cdc_consume_wdomain = builder_multiregimpl11_regs1;
assign main_vfb_fsm_reset = builder_multiregimpl12_regs1;
assign main_gpio_gpio_in_status = builder_multiregimpl13_regs1;
assign main_gpio2_gpio_in_status = builder_multiregimpl14_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge dvi_clk) begin
    main_vtg_source_first <= ((main_vtg_source_payload_hcount == 1'd0) & (main_vtg_source_payload_vcount == 1'd0));
    main_vtg_source_last <= ((main_vtg_source_payload_hcount == main_vtg_hscan) & (main_vtg_source_payload_vcount == main_vtg_vscan));
    builder_basesoc_clockdomainsrenamer_state <= builder_basesoc_clockdomainsrenamer_next_state;
    if (main_vtg_hactive_clockdomainsrenamer_next_value_ce0) begin
        main_vtg_hactive <= main_vtg_hactive_clockdomainsrenamer_next_value0;
    end
    if (main_vtg_vactive_clockdomainsrenamer_next_value_ce1) begin
        main_vtg_vactive <= main_vtg_vactive_clockdomainsrenamer_next_value1;
    end
    if (main_vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2) begin
        main_vtg_source_payload_hres <= main_vtg_source_payload_hres_clockdomainsrenamer_next_value2;
    end
    if (main_vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3) begin
        main_vtg_source_payload_vres <= main_vtg_source_payload_vres_clockdomainsrenamer_next_value3;
    end
    if (main_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4) begin
        main_vtg_source_payload_hcount <= main_vtg_source_payload_hcount_clockdomainsrenamer_next_value4;
    end
    if (main_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5) begin
        main_vtg_source_payload_vcount <= main_vtg_source_payload_vcount_clockdomainsrenamer_next_value5;
    end
    if (main_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6) begin
        main_vtg_source_payload_hsync <= main_vtg_source_payload_hsync_clockdomainsrenamer_next_value6;
    end
    if (main_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7) begin
        main_vtg_source_payload_vsync <= main_vtg_source_payload_vsync_clockdomainsrenamer_next_value7;
    end
    if (main_vtg_reset) begin
        main_vtg_source_payload_hsync <= 1'd0;
        main_vtg_source_payload_vsync <= 1'd0;
        main_vtg_source_payload_hres <= 12'd0;
        main_vtg_source_payload_vres <= 12'd0;
        main_vtg_source_payload_hcount <= 12'd0;
        main_vtg_source_payload_vcount <= 12'd0;
        main_vtg_hactive <= 1'd0;
        main_vtg_vactive <= 1'd0;
        builder_basesoc_clockdomainsrenamer_state <= 1'd0;
    end
    main_vfb_cdc_cdc_graycounter1_q_binary <= main_vfb_cdc_cdc_graycounter1_q_next_binary;
    main_vfb_cdc_cdc_graycounter1_q <= main_vfb_cdc_cdc_graycounter1_q_next;
    builder_basesoc_resetinserter_state <= builder_basesoc_resetinserter_next_state;
    if (main_vfb_first_resetinserter_next_value_ce) begin
        main_vfb_first <= main_vfb_first_resetinserter_next_value;
    end
    if (main_vfb_fsm_reset) begin
        main_vfb_first <= 1'd0;
        builder_basesoc_resetinserter_state <= 1'd0;
    end
    if (dvi_rst) begin
        main_vtg_source_payload_hsync <= 1'd0;
        main_vtg_source_payload_vsync <= 1'd0;
        main_vtg_source_payload_hres <= 12'd0;
        main_vtg_source_payload_vres <= 12'd0;
        main_vtg_source_payload_hcount <= 12'd0;
        main_vtg_source_payload_vcount <= 12'd0;
        main_vtg_hactive <= 1'd0;
        main_vtg_vactive <= 1'd0;
        main_vfb_cdc_cdc_graycounter1_q <= 3'd0;
        main_vfb_cdc_cdc_graycounter1_q_binary <= 3'd0;
        main_vfb_first <= 1'd0;
        builder_basesoc_clockdomainsrenamer_state <= 1'd0;
        builder_basesoc_resetinserter_state <= 1'd0;
    end
    builder_multiregimpl1_regs0 <= main_vtg_enable_storage;
    builder_multiregimpl1_regs1 <= builder_multiregimpl1_regs0;
    builder_multiregimpl2_regs0 <= main_vtg_hres_storage;
    builder_multiregimpl2_regs1 <= builder_multiregimpl2_regs0;
    builder_multiregimpl3_regs0 <= main_vtg_hsync_start_storage;
    builder_multiregimpl3_regs1 <= builder_multiregimpl3_regs0;
    builder_multiregimpl4_regs0 <= main_vtg_hsync_end_storage;
    builder_multiregimpl4_regs1 <= builder_multiregimpl4_regs0;
    builder_multiregimpl5_regs0 <= main_vtg_hscan_storage;
    builder_multiregimpl5_regs1 <= builder_multiregimpl5_regs0;
    builder_multiregimpl6_regs0 <= main_vtg_vres_storage;
    builder_multiregimpl6_regs1 <= builder_multiregimpl6_regs0;
    builder_multiregimpl7_regs0 <= main_vtg_vsync_start_storage;
    builder_multiregimpl7_regs1 <= builder_multiregimpl7_regs0;
    builder_multiregimpl8_regs0 <= main_vtg_vsync_end_storage;
    builder_multiregimpl8_regs1 <= builder_multiregimpl8_regs0;
    builder_multiregimpl9_regs0 <= main_vtg_vscan_storage;
    builder_multiregimpl9_regs1 <= builder_multiregimpl9_regs0;
    builder_multiregimpl10_regs0 <= main_vfb_cdc_cdc_graycounter0_q;
    builder_multiregimpl10_regs1 <= builder_multiregimpl10_regs0;
    builder_multiregimpl12_regs0 <= main_vfb_litedramdmareader_reset;
    builder_multiregimpl12_regs1 <= builder_multiregimpl12_regs0;
end

always @(posedge por_clk) begin
    if ((~main_por_done)) begin
        main_por_count <= (main_por_count - 1'd1);
    end
    if (por_rst) begin
        main_por_count <= 16'd65535;
    end
end

always @(posedge sys_clk) begin
    builder_wishbone2axi0_state <= builder_wishbone2axi0_next_state;
    if (main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value_ce0) begin
        main_basesoc_socbushandler_wishbone2axi0_cmd_done <= main_basesoc_socbushandler_wishbone2axi0_cmd_done_wishbone2axi0_next_value0;
    end
    if (main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value_ce1) begin
        main_basesoc_socbushandler_wishbone2axi0_data_done <= main_basesoc_socbushandler_wishbone2axi0_data_done_wishbone2axi0_next_value1;
    end
    builder_wishbone2axi1_state <= builder_wishbone2axi1_next_state;
    if (main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value_ce0) begin
        main_basesoc_socbushandler_wishbone2axi1_cmd_done <= main_basesoc_socbushandler_wishbone2axi1_cmd_done_wishbone2axi1_next_value0;
    end
    if (main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value_ce1) begin
        main_basesoc_socbushandler_wishbone2axi1_data_done <= main_basesoc_socbushandler_wishbone2axi1_data_done_wishbone2axi1_next_value1;
    end
    if (((~main_basesoc_basesoc_socbushandler_pipe_valid_source_valid) | main_basesoc_basesoc_socbushandler_pipe_valid_source_ready)) begin
        main_basesoc_basesoc_socbushandler_pipe_valid_source_valid <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_valid;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_first <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_first;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_last <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_last;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_addr <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_addr;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_burst <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_burst;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_len <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_len;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_size <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_size;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_lock <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_lock;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_prot <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_prot;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_cache <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_cache;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_qos <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_qos;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_region <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_payload_region;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_param_id <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_id;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_param_dest <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_dest;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_param_user <= main_basesoc_basesoc_socbushandler_pipe_valid_sink_param_user;
    end
    if ((main_basesoc_basesoc_socbushandler_ax_beat_valid & main_basesoc_basesoc_socbushandler_ax_beat_ready)) begin
        if (main_basesoc_basesoc_socbushandler_ax_beat_last) begin
            main_basesoc_basesoc_socbushandler_beat_count <= 1'd0;
            main_basesoc_basesoc_socbushandler_beat_offset <= 1'd0;
        end else begin
            main_basesoc_basesoc_socbushandler_beat_count <= (main_basesoc_basesoc_socbushandler_beat_count + 1'd1);
            if ((((main_basesoc_basesoc_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((main_basesoc_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_basesoc_basesoc_socbushandler_beat_offset <= (main_basesoc_basesoc_socbushandler_beat_offset + $signed({1'd0, main_basesoc_basesoc_socbushandler_beat_size}));
            end
        end
        if (((main_basesoc_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_basesoc_basesoc_socbushandler_ax_beat_payload_addr & main_basesoc_basesoc_socbushandler_beat_wrap) == main_basesoc_basesoc_socbushandler_beat_wrap)) begin
                main_basesoc_basesoc_socbushandler_beat_offset <= (main_basesoc_basesoc_socbushandler_beat_offset - $signed({1'd0, main_basesoc_basesoc_socbushandler_beat_wrap}));
            end
        end
    end
    builder_axi2axilite0_state <= builder_axi2axilite0_next_state;
    if (main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0) begin
        main_basesoc_basesoc_socbushandler_cmd_done <= main_basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0;
    end
    if (main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1) begin
        main_basesoc_basesoc_socbushandler_last_ar_aw_n <= main_basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1;
    end
    if (((~main_basesoc_socbushandler_pipe_valid_source_valid) | main_basesoc_socbushandler_pipe_valid_source_ready)) begin
        main_basesoc_socbushandler_pipe_valid_source_valid <= main_basesoc_socbushandler_pipe_valid_sink_valid;
        main_basesoc_socbushandler_pipe_valid_source_first <= main_basesoc_socbushandler_pipe_valid_sink_first;
        main_basesoc_socbushandler_pipe_valid_source_last <= main_basesoc_socbushandler_pipe_valid_sink_last;
        main_basesoc_socbushandler_pipe_valid_source_payload_addr <= main_basesoc_socbushandler_pipe_valid_sink_payload_addr;
        main_basesoc_socbushandler_pipe_valid_source_payload_burst <= main_basesoc_socbushandler_pipe_valid_sink_payload_burst;
        main_basesoc_socbushandler_pipe_valid_source_payload_len <= main_basesoc_socbushandler_pipe_valid_sink_payload_len;
        main_basesoc_socbushandler_pipe_valid_source_payload_size <= main_basesoc_socbushandler_pipe_valid_sink_payload_size;
        main_basesoc_socbushandler_pipe_valid_source_payload_lock <= main_basesoc_socbushandler_pipe_valid_sink_payload_lock;
        main_basesoc_socbushandler_pipe_valid_source_payload_prot <= main_basesoc_socbushandler_pipe_valid_sink_payload_prot;
        main_basesoc_socbushandler_pipe_valid_source_payload_cache <= main_basesoc_socbushandler_pipe_valid_sink_payload_cache;
        main_basesoc_socbushandler_pipe_valid_source_payload_qos <= main_basesoc_socbushandler_pipe_valid_sink_payload_qos;
        main_basesoc_socbushandler_pipe_valid_source_payload_region <= main_basesoc_socbushandler_pipe_valid_sink_payload_region;
        main_basesoc_socbushandler_pipe_valid_source_param_id <= main_basesoc_socbushandler_pipe_valid_sink_param_id;
        main_basesoc_socbushandler_pipe_valid_source_param_dest <= main_basesoc_socbushandler_pipe_valid_sink_param_dest;
        main_basesoc_socbushandler_pipe_valid_source_param_user <= main_basesoc_socbushandler_pipe_valid_sink_param_user;
    end
    if ((main_basesoc_socbushandler_ax_beat_valid & main_basesoc_socbushandler_ax_beat_ready)) begin
        if (main_basesoc_socbushandler_ax_beat_last) begin
            main_basesoc_socbushandler_beat_count <= 1'd0;
            main_basesoc_socbushandler_beat_offset <= 1'd0;
        end else begin
            main_basesoc_socbushandler_beat_count <= (main_basesoc_socbushandler_beat_count + 1'd1);
            if ((((main_basesoc_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((main_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_basesoc_socbushandler_beat_offset <= (main_basesoc_socbushandler_beat_offset + $signed({1'd0, main_basesoc_socbushandler_beat_size}));
            end
        end
        if (((main_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_basesoc_socbushandler_ax_beat_payload_addr & main_basesoc_socbushandler_beat_wrap) == main_basesoc_socbushandler_beat_wrap)) begin
                main_basesoc_socbushandler_beat_offset <= (main_basesoc_socbushandler_beat_offset - $signed({1'd0, main_basesoc_socbushandler_beat_wrap}));
            end
        end
    end
    builder_axi2axilite1_state <= builder_axi2axilite1_next_state;
    if (main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value_ce0) begin
        main_basesoc_socbushandler_cmd_done <= main_basesoc_socbushandler_cmd_done_axi2axilite1_next_value0;
    end
    if (main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value_ce1) begin
        main_basesoc_socbushandler_last_ar_aw_n <= main_basesoc_socbushandler_last_ar_aw_n_axi2axilite1_next_value1;
    end
    if (((~main_bridge_axi2axi_lite_pipe_valid_source_valid) | main_bridge_axi2axi_lite_pipe_valid_source_ready)) begin
        main_bridge_axi2axi_lite_pipe_valid_source_valid <= main_bridge_axi2axi_lite_pipe_valid_sink_valid;
        main_bridge_axi2axi_lite_pipe_valid_source_first <= main_bridge_axi2axi_lite_pipe_valid_sink_first;
        main_bridge_axi2axi_lite_pipe_valid_source_last <= main_bridge_axi2axi_lite_pipe_valid_sink_last;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_addr <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_addr;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_burst <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_burst;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_len <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_len;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_size <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_size;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_lock <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_lock;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_prot <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_prot;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_cache <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_cache;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_qos <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_qos;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_region <= main_bridge_axi2axi_lite_pipe_valid_sink_payload_region;
        main_bridge_axi2axi_lite_pipe_valid_source_param_id <= main_bridge_axi2axi_lite_pipe_valid_sink_param_id;
        main_bridge_axi2axi_lite_pipe_valid_source_param_dest <= main_bridge_axi2axi_lite_pipe_valid_sink_param_dest;
        main_bridge_axi2axi_lite_pipe_valid_source_param_user <= main_bridge_axi2axi_lite_pipe_valid_sink_param_user;
    end
    if ((main_bridge_axi2axi_lite_ax_beat_valid & main_bridge_axi2axi_lite_ax_beat_ready)) begin
        if (main_bridge_axi2axi_lite_ax_beat_last) begin
            main_bridge_axi2axi_lite_beat_count <= 1'd0;
            main_bridge_axi2axi_lite_beat_offset <= 1'd0;
        end else begin
            main_bridge_axi2axi_lite_beat_count <= (main_bridge_axi2axi_lite_beat_count + 1'd1);
            if ((((main_bridge_axi2axi_lite_source_source_payload_burst == 1'd1) & 1'd1) | ((main_bridge_axi2axi_lite_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_bridge_axi2axi_lite_beat_offset <= (main_bridge_axi2axi_lite_beat_offset + $signed({1'd0, main_bridge_axi2axi_lite_beat_size}));
            end
        end
        if (((main_bridge_axi2axi_lite_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_bridge_axi2axi_lite_ax_beat_payload_addr & main_bridge_axi2axi_lite_beat_wrap) == main_bridge_axi2axi_lite_beat_wrap)) begin
                main_bridge_axi2axi_lite_beat_offset <= (main_bridge_axi2axi_lite_beat_offset - $signed({1'd0, main_bridge_axi2axi_lite_beat_wrap}));
            end
        end
    end
    builder_axi2axilite_state <= builder_axi2axilite_next_state;
    if (main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value_ce0) begin
        main_bridge_axi2axi_lite_cmd_done <= main_bridge_axi2axi_lite_cmd_done_axi2axilite_next_value0;
    end
    if (main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value_ce1) begin
        main_bridge_axi2axi_lite_last_ar_aw_n <= main_bridge_axi2axi_lite_last_ar_aw_n_axi2axilite_next_value1;
    end
    builder_axilite2wishbone_state <= builder_axilite2wishbone_next_state;
    if (main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value_ce0) begin
        main_bridge_axi_lite2wishbone_last_ar_aw_n <= main_bridge_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone_next_value0;
    end
    if (main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value_ce1) begin
        main_bridge_axi_lite2wishbone_data <= main_bridge_axi_lite2wishbone_data_axilite2wishbone_next_value1;
    end
    if (((~builder_basesoc_socbushandler_pipe_valid_source_valid) | builder_basesoc_socbushandler_pipe_valid_source_ready)) begin
        builder_basesoc_socbushandler_pipe_valid_source_valid <= builder_basesoc_socbushandler_pipe_valid_sink_valid;
        builder_basesoc_socbushandler_pipe_valid_source_first <= builder_basesoc_socbushandler_pipe_valid_sink_first;
        builder_basesoc_socbushandler_pipe_valid_source_last <= builder_basesoc_socbushandler_pipe_valid_sink_last;
        builder_basesoc_socbushandler_pipe_valid_source_payload_addr <= builder_basesoc_socbushandler_pipe_valid_sink_payload_addr;
        builder_basesoc_socbushandler_pipe_valid_source_payload_burst <= builder_basesoc_socbushandler_pipe_valid_sink_payload_burst;
        builder_basesoc_socbushandler_pipe_valid_source_payload_len <= builder_basesoc_socbushandler_pipe_valid_sink_payload_len;
        builder_basesoc_socbushandler_pipe_valid_source_payload_size <= builder_basesoc_socbushandler_pipe_valid_sink_payload_size;
        builder_basesoc_socbushandler_pipe_valid_source_payload_lock <= builder_basesoc_socbushandler_pipe_valid_sink_payload_lock;
        builder_basesoc_socbushandler_pipe_valid_source_payload_prot <= builder_basesoc_socbushandler_pipe_valid_sink_payload_prot;
        builder_basesoc_socbushandler_pipe_valid_source_payload_cache <= builder_basesoc_socbushandler_pipe_valid_sink_payload_cache;
        builder_basesoc_socbushandler_pipe_valid_source_payload_qos <= builder_basesoc_socbushandler_pipe_valid_sink_payload_qos;
        builder_basesoc_socbushandler_pipe_valid_source_payload_region <= builder_basesoc_socbushandler_pipe_valid_sink_payload_region;
        builder_basesoc_socbushandler_pipe_valid_source_param_id <= builder_basesoc_socbushandler_pipe_valid_sink_param_id;
        builder_basesoc_socbushandler_pipe_valid_source_param_dest <= builder_basesoc_socbushandler_pipe_valid_sink_param_dest;
        builder_basesoc_socbushandler_pipe_valid_source_param_user <= builder_basesoc_socbushandler_pipe_valid_sink_param_user;
    end
    if ((builder_basesoc_socbushandler_ax_beat_valid & builder_basesoc_socbushandler_ax_beat_ready)) begin
        if (builder_basesoc_socbushandler_ax_beat_last) begin
            builder_basesoc_socbushandler_beat_count <= 1'd0;
            builder_basesoc_socbushandler_beat_offset <= 1'd0;
        end else begin
            builder_basesoc_socbushandler_beat_count <= (builder_basesoc_socbushandler_beat_count + 1'd1);
            if ((((builder_basesoc_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((builder_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                builder_basesoc_socbushandler_beat_offset <= (builder_basesoc_socbushandler_beat_offset + $signed({1'd0, builder_basesoc_socbushandler_beat_size}));
            end
        end
        if (((builder_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((builder_basesoc_socbushandler_ax_beat_payload_addr & builder_basesoc_socbushandler_beat_wrap) == builder_basesoc_socbushandler_beat_wrap)) begin
                builder_basesoc_socbushandler_beat_offset <= (builder_basesoc_socbushandler_beat_offset - $signed({1'd0, builder_basesoc_socbushandler_beat_wrap}));
            end
        end
    end
    builder_axi2axilite2_state <= builder_axi2axilite2_next_state;
    if (builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0) begin
        builder_basesoc_socbushandler_cmd_done <= builder_basesoc_socbushandler_cmd_done_axi2axilite2_next_value0;
    end
    if (builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1) begin
        builder_basesoc_socbushandler_last_ar_aw_n <= builder_basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1;
    end
    if (builder_rr_write_ce) begin
        case (builder_rr_write_grant)
            1'd0: begin
                if (builder_rr_write_request[1]) begin
                    builder_rr_write_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_rr_write_request[0]) begin
                    builder_rr_write_grant <= 1'd0;
                end
            end
        endcase
    end
    if (builder_rr_read_ce) begin
        case (builder_rr_read_grant)
            1'd0: begin
                if (builder_rr_read_request[1]) begin
                    builder_rr_read_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_rr_read_request[0]) begin
                    builder_rr_read_grant <= 1'd0;
                end
            end
        endcase
    end
    if (((builder_aw_valid & builder_aw_ready) & (builder_b_valid & builder_b_ready))) begin
        builder_wr_lock_counter <= builder_wr_lock_counter;
    end else begin
        if (((builder_aw_valid & builder_aw_ready) & (~builder_wr_lock_full))) begin
            builder_wr_lock_counter <= (builder_wr_lock_counter + 1'd1);
        end else begin
            if (((builder_b_valid & builder_b_ready) & (~builder_wr_lock_empty))) begin
                builder_wr_lock_counter <= (builder_wr_lock_counter - 1'd1);
            end
        end
    end
    if (((builder_ar_valid & builder_ar_ready) & ((builder_r_valid & builder_r_ready) & builder_r_last))) begin
        builder_rd_lock_counter <= builder_rd_lock_counter;
    end else begin
        if (((builder_ar_valid & builder_ar_ready) & (~builder_rd_lock_full))) begin
            builder_rd_lock_counter <= (builder_rd_lock_counter + 1'd1);
        end else begin
            if ((((builder_r_valid & builder_r_ready) & builder_r_last) & (~builder_rd_lock_empty))) begin
                builder_rd_lock_counter <= (builder_rd_lock_counter - 1'd1);
            end
        end
    end
    if (builder_axirequestcounter0_empty) begin
        builder_slave_sel_reg0 <= builder_slave_sel_dec0;
    end
    if (builder_axirequestcounter1_empty) begin
        builder_slave_sel_reg1 <= builder_slave_sel_dec1;
    end
    if (((builder_aw_valid & builder_aw_ready) & (builder_b_valid & builder_b_ready))) begin
        builder_axirequestcounter0_counter <= builder_axirequestcounter0_counter;
    end else begin
        if (((builder_aw_valid & builder_aw_ready) & (~builder_axirequestcounter0_full))) begin
            builder_axirequestcounter0_counter <= (builder_axirequestcounter0_counter + 1'd1);
        end else begin
            if (((builder_b_valid & builder_b_ready) & (~builder_axirequestcounter0_empty))) begin
                builder_axirequestcounter0_counter <= (builder_axirequestcounter0_counter - 1'd1);
            end
        end
    end
    if (((builder_ar_valid & builder_ar_ready) & ((builder_r_valid & builder_r_ready) & builder_r_last))) begin
        builder_axirequestcounter1_counter <= builder_axirequestcounter1_counter;
    end else begin
        if (((builder_ar_valid & builder_ar_ready) & (~builder_axirequestcounter1_full))) begin
            builder_axirequestcounter1_counter <= (builder_axirequestcounter1_counter + 1'd1);
        end else begin
            if ((((builder_r_valid & builder_r_ready) & builder_r_last) & (~builder_axirequestcounter1_empty))) begin
                builder_axirequestcounter1_counter <= (builder_axirequestcounter1_counter - 1'd1);
            end
        end
    end
    if (builder_wr_timer_wait) begin
        if ((~builder_wr_timer_done)) begin
            builder_wr_timer_count <= (builder_wr_timer_count - 1'd1);
        end
    end else begin
        builder_wr_timer_count <= 20'd1000000;
    end
    if (builder_rd_timer_wait) begin
        if ((~builder_rd_timer_done)) begin
            builder_rd_timer_count <= (builder_rd_timer_count - 1'd1);
        end
    end else begin
        builder_rd_timer_count <= 20'd1000000;
    end
    builder_fsm0_state <= builder_fsm0_next_state;
    builder_fsm1_state <= builder_fsm1_next_state;
    if ((main_basesoc_bus_errors != 32'd4294967295)) begin
        if (main_basesoc_bus_error) begin
            main_basesoc_bus_errors <= (main_basesoc_bus_errors + 1'd1);
        end
    end
    builder_basesoc_axilitesram0_state <= builder_basesoc_axilitesram0_next_state;
    if (main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value_ce0) begin
        main_basesoc_basesoc_port_adr_reg <= main_basesoc_basesoc_port_adr_reg_axilitesram0_next_value0;
    end
    if (main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce1) begin
        main_basesoc_basesoc_port_dat_r_latched <= main_basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value1;
    end
    if (main_basesoc_basesoc_last_was_read_axilitesram0_next_value_ce2) begin
        main_basesoc_basesoc_last_was_read <= main_basesoc_basesoc_last_was_read_axilitesram0_next_value2;
    end
    builder_basesoc_axilitesram1_state <= builder_basesoc_axilitesram1_next_state;
    if (main_basesoc_ram_port_adr_reg_axilitesram1_next_value_ce0) begin
        main_basesoc_ram_port_adr_reg <= main_basesoc_ram_port_adr_reg_axilitesram1_next_value0;
    end
    if (main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce1) begin
        main_basesoc_ram_port_dat_r_latched <= main_basesoc_ram_port_dat_r_latched_axilitesram1_next_value1;
    end
    if (main_basesoc_ram_last_was_read_axilitesram1_next_value_ce2) begin
        main_basesoc_ram_last_was_read <= main_basesoc_ram_last_was_read_axilitesram1_next_value2;
    end
    {main_basesoc_tx_tick, main_basesoc_tx_phase} <= 24'd9895604;
    if (main_basesoc_tx_enable) begin
        {main_basesoc_tx_tick, main_basesoc_tx_phase} <= (main_basesoc_tx_phase + 24'd9895604);
    end
    builder_basesoc_rs232phytx_state <= builder_basesoc_rs232phytx_next_state;
    if (main_basesoc_tx_count_rs232phytx_next_value_ce0) begin
        main_basesoc_tx_count <= main_basesoc_tx_count_rs232phytx_next_value0;
    end
    if (main_basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= main_basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (main_basesoc_tx_data_rs232phytx_next_value_ce2) begin
        main_basesoc_tx_data <= main_basesoc_tx_data_rs232phytx_next_value2;
    end
    main_basesoc_rx_rx_d <= main_basesoc_rx_rx;
    {main_basesoc_rx_tick, main_basesoc_rx_phase} <= 32'd2147483648;
    if (main_basesoc_rx_enable) begin
        {main_basesoc_rx_tick, main_basesoc_rx_phase} <= (main_basesoc_rx_phase + 24'd9895604);
    end
    builder_basesoc_rs232phyrx_state <= builder_basesoc_rs232phyrx_next_state;
    if (main_basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        main_basesoc_rx_count <= main_basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (main_basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        main_basesoc_rx_data <= main_basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (main_basesoc_uart_tx_clear) begin
        main_basesoc_uart_tx_pending <= 1'd0;
    end
    main_basesoc_uart_tx_trigger_d <= main_basesoc_uart_tx_trigger;
    if ((main_basesoc_uart_tx_trigger & (~main_basesoc_uart_tx_trigger_d))) begin
        main_basesoc_uart_tx_pending <= 1'd1;
    end
    if (main_basesoc_uart_rx_clear) begin
        main_basesoc_uart_rx_pending <= 1'd0;
    end
    main_basesoc_uart_rx_trigger_d <= main_basesoc_uart_rx_trigger;
    if ((main_basesoc_uart_rx_trigger & (~main_basesoc_uart_rx_trigger_d))) begin
        main_basesoc_uart_rx_pending <= 1'd1;
    end
    if (main_basesoc_uart_tx_fifo_syncfifo_re) begin
        main_basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_tx_fifo_re) begin
            main_basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        main_basesoc_uart_tx_fifo_produce <= (main_basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_tx_fifo_do_read) begin
        main_basesoc_uart_tx_fifo_consume <= (main_basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        if ((~main_basesoc_uart_tx_fifo_do_read)) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_tx_fifo_do_read) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_uart_rx_fifo_syncfifo_re) begin
        main_basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_rx_fifo_re) begin
            main_basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        main_basesoc_uart_rx_fifo_produce <= (main_basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_rx_fifo_do_read) begin
        main_basesoc_uart_rx_fifo_consume <= (main_basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        if ((~main_basesoc_uart_rx_fifo_do_read)) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_rx_fifo_do_read) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_timer_en_storage) begin
        if ((main_basesoc_timer_value == 1'd0)) begin
            main_basesoc_timer_value <= main_basesoc_timer_reload_storage;
        end else begin
            main_basesoc_timer_value <= (main_basesoc_timer_value - 1'd1);
        end
    end else begin
        main_basesoc_timer_value <= main_basesoc_timer_load_storage;
    end
    if (main_basesoc_timer_update_value_re) begin
        main_basesoc_timer_value_status <= main_basesoc_timer_value;
    end
    if (main_basesoc_timer_zero_clear) begin
        main_basesoc_timer_zero_pending <= 1'd0;
    end
    main_basesoc_timer_zero_trigger_d <= main_basesoc_timer_zero_trigger;
    if ((main_basesoc_timer_zero_trigger & (~main_basesoc_timer_zero_trigger_d))) begin
        main_basesoc_timer_zero_pending <= 1'd1;
    end
    if (main_leds_done) begin
        main_leds_chaser <= {main_leds_chaser, (~main_leds_chaser[5])};
    end
    if (main_leds_re) begin
        main_leds_mode <= 1'd1;
    end
    if (main_leds_wait) begin
        if ((~main_leds_done)) begin
            main_leds_count <= (main_leds_count - 1'd1);
        end
    end else begin
        main_leds_count <= 22'd4166666;
    end
    main_phase_sys <= main_phase_sys2x;
    if (main_sdram_csr_dfi_p0_rddata_valid) begin
        main_sdram_phaseinjector0_rddata_status <= main_sdram_csr_dfi_p0_rddata;
    end
    if (main_sdram_csr_dfi_p1_rddata_valid) begin
        main_sdram_phaseinjector1_rddata_status <= main_sdram_csr_dfi_p1_rddata;
    end
    if ((main_sdram_timer_wait & (~main_sdram_timer_done0))) begin
        main_sdram_timer_count1 <= (main_sdram_timer_count1 - 1'd1);
    end else begin
        main_sdram_timer_count1 <= 9'd390;
    end
    main_sdram_postponer_req_o <= 1'd0;
    if (main_sdram_postponer_req_i) begin
        main_sdram_postponer_count <= (main_sdram_postponer_count - 1'd1);
        if ((main_sdram_postponer_count == 1'd0)) begin
            main_sdram_postponer_count <= 1'd0;
            main_sdram_postponer_req_o <= 1'd1;
        end
    end
    if (main_sdram_sequencer_start0) begin
        main_sdram_sequencer_count <= 1'd0;
    end else begin
        if (main_sdram_sequencer_done1) begin
            if ((main_sdram_sequencer_count != 1'd0)) begin
                main_sdram_sequencer_count <= (main_sdram_sequencer_count - 1'd1);
            end
        end
    end
    main_sdram_cmd_payload_a <= 1'd0;
    main_sdram_cmd_payload_ba <= 1'd0;
    main_sdram_cmd_payload_cas <= 1'd0;
    main_sdram_cmd_payload_ras <= 1'd0;
    main_sdram_cmd_payload_we <= 1'd0;
    main_sdram_sequencer_done1 <= 1'd0;
    if ((main_sdram_sequencer_start1 & (main_sdram_sequencer_trigger == 1'd0))) begin
        main_sdram_cmd_payload_a <= 11'd1024;
        main_sdram_cmd_payload_ba <= 1'd0;
        main_sdram_cmd_payload_cas <= 1'd0;
        main_sdram_cmd_payload_ras <= 1'd1;
        main_sdram_cmd_payload_we <= 1'd1;
    end
    if ((main_sdram_sequencer_trigger == 2'd2)) begin
        main_sdram_cmd_payload_a <= 11'd1024;
        main_sdram_cmd_payload_ba <= 1'd0;
        main_sdram_cmd_payload_cas <= 1'd1;
        main_sdram_cmd_payload_ras <= 1'd1;
        main_sdram_cmd_payload_we <= 1'd0;
    end
    if ((main_sdram_sequencer_trigger == 3'd6)) begin
        main_sdram_cmd_payload_a <= 1'd0;
        main_sdram_cmd_payload_ba <= 1'd0;
        main_sdram_cmd_payload_cas <= 1'd0;
        main_sdram_cmd_payload_ras <= 1'd0;
        main_sdram_cmd_payload_we <= 1'd0;
        main_sdram_sequencer_done1 <= 1'd1;
    end
    if ((main_sdram_sequencer_trigger == 3'd6)) begin
        main_sdram_sequencer_trigger <= 1'd0;
    end else begin
        if ((main_sdram_sequencer_trigger != 1'd0)) begin
            main_sdram_sequencer_trigger <= (main_sdram_sequencer_trigger + 1'd1);
        end else begin
            if (main_sdram_sequencer_start1) begin
                main_sdram_sequencer_trigger <= 1'd1;
            end
        end
    end
    builder_basesoc_refresher_state <= builder_basesoc_refresher_next_state;
    if (main_sdram_bankmachine0_row_close) begin
        main_sdram_bankmachine0_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine0_row_open) begin
            main_sdram_bankmachine0_row_opened <= 1'd1;
            main_sdram_bankmachine0_row <= main_sdram_bankmachine0_source_source_payload_addr[20:8];
        end
    end
    if (((main_sdram_bankmachine0_syncfifo0_we & main_sdram_bankmachine0_syncfifo0_writable) & (~main_sdram_bankmachine0_replace))) begin
        main_sdram_bankmachine0_produce <= (main_sdram_bankmachine0_produce + 1'd1);
    end
    if (main_sdram_bankmachine0_do_read) begin
        main_sdram_bankmachine0_consume <= (main_sdram_bankmachine0_consume + 1'd1);
    end
    if (((main_sdram_bankmachine0_syncfifo0_we & main_sdram_bankmachine0_syncfifo0_writable) & (~main_sdram_bankmachine0_replace))) begin
        if ((~main_sdram_bankmachine0_do_read)) begin
            main_sdram_bankmachine0_level <= (main_sdram_bankmachine0_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine0_do_read) begin
            main_sdram_bankmachine0_level <= (main_sdram_bankmachine0_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine0_pipe_valid_source_valid) | main_sdram_bankmachine0_pipe_valid_source_ready)) begin
        main_sdram_bankmachine0_pipe_valid_source_valid <= main_sdram_bankmachine0_pipe_valid_sink_valid;
        main_sdram_bankmachine0_pipe_valid_source_first <= main_sdram_bankmachine0_pipe_valid_sink_first;
        main_sdram_bankmachine0_pipe_valid_source_last <= main_sdram_bankmachine0_pipe_valid_sink_last;
        main_sdram_bankmachine0_pipe_valid_source_payload_we <= main_sdram_bankmachine0_pipe_valid_sink_payload_we;
        main_sdram_bankmachine0_pipe_valid_source_payload_addr <= main_sdram_bankmachine0_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine0_twtpcon_valid) begin
        main_sdram_bankmachine0_twtpcon_count <= 2'd3;
        if (1'd0) begin
            main_sdram_bankmachine0_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine0_twtpcon_ready)) begin
            main_sdram_bankmachine0_twtpcon_count <= (main_sdram_bankmachine0_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine0_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine0_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine0_trccon_valid) begin
        main_sdram_bankmachine0_trccon_count <= 2'd3;
        if (1'd0) begin
            main_sdram_bankmachine0_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine0_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine0_trccon_ready)) begin
            main_sdram_bankmachine0_trccon_count <= (main_sdram_bankmachine0_trccon_count - 1'd1);
            if ((main_sdram_bankmachine0_trccon_count == 1'd1)) begin
                main_sdram_bankmachine0_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine0_trascon_valid) begin
        main_sdram_bankmachine0_trascon_count <= 2'd2;
        if (1'd0) begin
            main_sdram_bankmachine0_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine0_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine0_trascon_ready)) begin
            main_sdram_bankmachine0_trascon_count <= (main_sdram_bankmachine0_trascon_count - 1'd1);
            if ((main_sdram_bankmachine0_trascon_count == 1'd1)) begin
                main_sdram_bankmachine0_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_bankmachine0_state <= builder_basesoc_bankmachine0_next_state;
    if (main_sdram_bankmachine1_row_close) begin
        main_sdram_bankmachine1_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine1_row_open) begin
            main_sdram_bankmachine1_row_opened <= 1'd1;
            main_sdram_bankmachine1_row <= main_sdram_bankmachine1_source_source_payload_addr[20:8];
        end
    end
    if (((main_sdram_bankmachine1_syncfifo1_we & main_sdram_bankmachine1_syncfifo1_writable) & (~main_sdram_bankmachine1_replace))) begin
        main_sdram_bankmachine1_produce <= (main_sdram_bankmachine1_produce + 1'd1);
    end
    if (main_sdram_bankmachine1_do_read) begin
        main_sdram_bankmachine1_consume <= (main_sdram_bankmachine1_consume + 1'd1);
    end
    if (((main_sdram_bankmachine1_syncfifo1_we & main_sdram_bankmachine1_syncfifo1_writable) & (~main_sdram_bankmachine1_replace))) begin
        if ((~main_sdram_bankmachine1_do_read)) begin
            main_sdram_bankmachine1_level <= (main_sdram_bankmachine1_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine1_do_read) begin
            main_sdram_bankmachine1_level <= (main_sdram_bankmachine1_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine1_pipe_valid_source_valid) | main_sdram_bankmachine1_pipe_valid_source_ready)) begin
        main_sdram_bankmachine1_pipe_valid_source_valid <= main_sdram_bankmachine1_pipe_valid_sink_valid;
        main_sdram_bankmachine1_pipe_valid_source_first <= main_sdram_bankmachine1_pipe_valid_sink_first;
        main_sdram_bankmachine1_pipe_valid_source_last <= main_sdram_bankmachine1_pipe_valid_sink_last;
        main_sdram_bankmachine1_pipe_valid_source_payload_we <= main_sdram_bankmachine1_pipe_valid_sink_payload_we;
        main_sdram_bankmachine1_pipe_valid_source_payload_addr <= main_sdram_bankmachine1_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine1_twtpcon_valid) begin
        main_sdram_bankmachine1_twtpcon_count <= 2'd3;
        if (1'd0) begin
            main_sdram_bankmachine1_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine1_twtpcon_ready)) begin
            main_sdram_bankmachine1_twtpcon_count <= (main_sdram_bankmachine1_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine1_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine1_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine1_trccon_valid) begin
        main_sdram_bankmachine1_trccon_count <= 2'd3;
        if (1'd0) begin
            main_sdram_bankmachine1_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine1_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine1_trccon_ready)) begin
            main_sdram_bankmachine1_trccon_count <= (main_sdram_bankmachine1_trccon_count - 1'd1);
            if ((main_sdram_bankmachine1_trccon_count == 1'd1)) begin
                main_sdram_bankmachine1_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine1_trascon_valid) begin
        main_sdram_bankmachine1_trascon_count <= 2'd2;
        if (1'd0) begin
            main_sdram_bankmachine1_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine1_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine1_trascon_ready)) begin
            main_sdram_bankmachine1_trascon_count <= (main_sdram_bankmachine1_trascon_count - 1'd1);
            if ((main_sdram_bankmachine1_trascon_count == 1'd1)) begin
                main_sdram_bankmachine1_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_bankmachine1_state <= builder_basesoc_bankmachine1_next_state;
    if (main_sdram_bankmachine2_row_close) begin
        main_sdram_bankmachine2_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine2_row_open) begin
            main_sdram_bankmachine2_row_opened <= 1'd1;
            main_sdram_bankmachine2_row <= main_sdram_bankmachine2_source_source_payload_addr[20:8];
        end
    end
    if (((main_sdram_bankmachine2_syncfifo2_we & main_sdram_bankmachine2_syncfifo2_writable) & (~main_sdram_bankmachine2_replace))) begin
        main_sdram_bankmachine2_produce <= (main_sdram_bankmachine2_produce + 1'd1);
    end
    if (main_sdram_bankmachine2_do_read) begin
        main_sdram_bankmachine2_consume <= (main_sdram_bankmachine2_consume + 1'd1);
    end
    if (((main_sdram_bankmachine2_syncfifo2_we & main_sdram_bankmachine2_syncfifo2_writable) & (~main_sdram_bankmachine2_replace))) begin
        if ((~main_sdram_bankmachine2_do_read)) begin
            main_sdram_bankmachine2_level <= (main_sdram_bankmachine2_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine2_do_read) begin
            main_sdram_bankmachine2_level <= (main_sdram_bankmachine2_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine2_pipe_valid_source_valid) | main_sdram_bankmachine2_pipe_valid_source_ready)) begin
        main_sdram_bankmachine2_pipe_valid_source_valid <= main_sdram_bankmachine2_pipe_valid_sink_valid;
        main_sdram_bankmachine2_pipe_valid_source_first <= main_sdram_bankmachine2_pipe_valid_sink_first;
        main_sdram_bankmachine2_pipe_valid_source_last <= main_sdram_bankmachine2_pipe_valid_sink_last;
        main_sdram_bankmachine2_pipe_valid_source_payload_we <= main_sdram_bankmachine2_pipe_valid_sink_payload_we;
        main_sdram_bankmachine2_pipe_valid_source_payload_addr <= main_sdram_bankmachine2_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine2_twtpcon_valid) begin
        main_sdram_bankmachine2_twtpcon_count <= 2'd3;
        if (1'd0) begin
            main_sdram_bankmachine2_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine2_twtpcon_ready)) begin
            main_sdram_bankmachine2_twtpcon_count <= (main_sdram_bankmachine2_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine2_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine2_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine2_trccon_valid) begin
        main_sdram_bankmachine2_trccon_count <= 2'd3;
        if (1'd0) begin
            main_sdram_bankmachine2_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine2_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine2_trccon_ready)) begin
            main_sdram_bankmachine2_trccon_count <= (main_sdram_bankmachine2_trccon_count - 1'd1);
            if ((main_sdram_bankmachine2_trccon_count == 1'd1)) begin
                main_sdram_bankmachine2_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine2_trascon_valid) begin
        main_sdram_bankmachine2_trascon_count <= 2'd2;
        if (1'd0) begin
            main_sdram_bankmachine2_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine2_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine2_trascon_ready)) begin
            main_sdram_bankmachine2_trascon_count <= (main_sdram_bankmachine2_trascon_count - 1'd1);
            if ((main_sdram_bankmachine2_trascon_count == 1'd1)) begin
                main_sdram_bankmachine2_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_bankmachine2_state <= builder_basesoc_bankmachine2_next_state;
    if (main_sdram_bankmachine3_row_close) begin
        main_sdram_bankmachine3_row_opened <= 1'd0;
    end else begin
        if (main_sdram_bankmachine3_row_open) begin
            main_sdram_bankmachine3_row_opened <= 1'd1;
            main_sdram_bankmachine3_row <= main_sdram_bankmachine3_source_source_payload_addr[20:8];
        end
    end
    if (((main_sdram_bankmachine3_syncfifo3_we & main_sdram_bankmachine3_syncfifo3_writable) & (~main_sdram_bankmachine3_replace))) begin
        main_sdram_bankmachine3_produce <= (main_sdram_bankmachine3_produce + 1'd1);
    end
    if (main_sdram_bankmachine3_do_read) begin
        main_sdram_bankmachine3_consume <= (main_sdram_bankmachine3_consume + 1'd1);
    end
    if (((main_sdram_bankmachine3_syncfifo3_we & main_sdram_bankmachine3_syncfifo3_writable) & (~main_sdram_bankmachine3_replace))) begin
        if ((~main_sdram_bankmachine3_do_read)) begin
            main_sdram_bankmachine3_level <= (main_sdram_bankmachine3_level + 1'd1);
        end
    end else begin
        if (main_sdram_bankmachine3_do_read) begin
            main_sdram_bankmachine3_level <= (main_sdram_bankmachine3_level - 1'd1);
        end
    end
    if (((~main_sdram_bankmachine3_pipe_valid_source_valid) | main_sdram_bankmachine3_pipe_valid_source_ready)) begin
        main_sdram_bankmachine3_pipe_valid_source_valid <= main_sdram_bankmachine3_pipe_valid_sink_valid;
        main_sdram_bankmachine3_pipe_valid_source_first <= main_sdram_bankmachine3_pipe_valid_sink_first;
        main_sdram_bankmachine3_pipe_valid_source_last <= main_sdram_bankmachine3_pipe_valid_sink_last;
        main_sdram_bankmachine3_pipe_valid_source_payload_we <= main_sdram_bankmachine3_pipe_valid_sink_payload_we;
        main_sdram_bankmachine3_pipe_valid_source_payload_addr <= main_sdram_bankmachine3_pipe_valid_sink_payload_addr;
    end
    if (main_sdram_bankmachine3_twtpcon_valid) begin
        main_sdram_bankmachine3_twtpcon_count <= 2'd3;
        if (1'd0) begin
            main_sdram_bankmachine3_twtpcon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine3_twtpcon_ready)) begin
            main_sdram_bankmachine3_twtpcon_count <= (main_sdram_bankmachine3_twtpcon_count - 1'd1);
            if ((main_sdram_bankmachine3_twtpcon_count == 1'd1)) begin
                main_sdram_bankmachine3_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine3_trccon_valid) begin
        main_sdram_bankmachine3_trccon_count <= 2'd3;
        if (1'd0) begin
            main_sdram_bankmachine3_trccon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine3_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine3_trccon_ready)) begin
            main_sdram_bankmachine3_trccon_count <= (main_sdram_bankmachine3_trccon_count - 1'd1);
            if ((main_sdram_bankmachine3_trccon_count == 1'd1)) begin
                main_sdram_bankmachine3_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_bankmachine3_trascon_valid) begin
        main_sdram_bankmachine3_trascon_count <= 2'd2;
        if (1'd0) begin
            main_sdram_bankmachine3_trascon_ready <= 1'd1;
        end else begin
            main_sdram_bankmachine3_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_bankmachine3_trascon_ready)) begin
            main_sdram_bankmachine3_trascon_count <= (main_sdram_bankmachine3_trascon_count - 1'd1);
            if ((main_sdram_bankmachine3_trascon_count == 1'd1)) begin
                main_sdram_bankmachine3_trascon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_bankmachine3_state <= builder_basesoc_bankmachine3_next_state;
    if ((~main_sdram_en0)) begin
        main_sdram_time0 <= 5'd31;
    end else begin
        if ((~main_sdram_max_time0)) begin
            main_sdram_time0 <= (main_sdram_time0 - 1'd1);
        end
    end
    if ((~main_sdram_en1)) begin
        main_sdram_time1 <= 4'd15;
    end else begin
        if ((~main_sdram_max_time1)) begin
            main_sdram_time1 <= (main_sdram_time1 - 1'd1);
        end
    end
    if (main_sdram_choose_cmd_ce) begin
        case (main_sdram_choose_cmd_grant)
            1'd0: begin
                if (main_sdram_choose_cmd_request[1]) begin
                    main_sdram_choose_cmd_grant <= 1'd1;
                end else begin
                    if (main_sdram_choose_cmd_request[2]) begin
                        main_sdram_choose_cmd_grant <= 2'd2;
                    end else begin
                        if (main_sdram_choose_cmd_request[3]) begin
                            main_sdram_choose_cmd_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (main_sdram_choose_cmd_request[2]) begin
                    main_sdram_choose_cmd_grant <= 2'd2;
                end else begin
                    if (main_sdram_choose_cmd_request[3]) begin
                        main_sdram_choose_cmd_grant <= 2'd3;
                    end else begin
                        if (main_sdram_choose_cmd_request[0]) begin
                            main_sdram_choose_cmd_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (main_sdram_choose_cmd_request[3]) begin
                    main_sdram_choose_cmd_grant <= 2'd3;
                end else begin
                    if (main_sdram_choose_cmd_request[0]) begin
                        main_sdram_choose_cmd_grant <= 1'd0;
                    end else begin
                        if (main_sdram_choose_cmd_request[1]) begin
                            main_sdram_choose_cmd_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (main_sdram_choose_cmd_request[0]) begin
                    main_sdram_choose_cmd_grant <= 1'd0;
                end else begin
                    if (main_sdram_choose_cmd_request[1]) begin
                        main_sdram_choose_cmd_grant <= 1'd1;
                    end else begin
                        if (main_sdram_choose_cmd_request[2]) begin
                            main_sdram_choose_cmd_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    if (main_sdram_choose_req_ce) begin
        case (main_sdram_choose_req_grant)
            1'd0: begin
                if (main_sdram_choose_req_request[1]) begin
                    main_sdram_choose_req_grant <= 1'd1;
                end else begin
                    if (main_sdram_choose_req_request[2]) begin
                        main_sdram_choose_req_grant <= 2'd2;
                    end else begin
                        if (main_sdram_choose_req_request[3]) begin
                            main_sdram_choose_req_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (main_sdram_choose_req_request[2]) begin
                    main_sdram_choose_req_grant <= 2'd2;
                end else begin
                    if (main_sdram_choose_req_request[3]) begin
                        main_sdram_choose_req_grant <= 2'd3;
                    end else begin
                        if (main_sdram_choose_req_request[0]) begin
                            main_sdram_choose_req_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (main_sdram_choose_req_request[3]) begin
                    main_sdram_choose_req_grant <= 2'd3;
                end else begin
                    if (main_sdram_choose_req_request[0]) begin
                        main_sdram_choose_req_grant <= 1'd0;
                    end else begin
                        if (main_sdram_choose_req_request[1]) begin
                            main_sdram_choose_req_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (main_sdram_choose_req_request[0]) begin
                    main_sdram_choose_req_grant <= 1'd0;
                end else begin
                    if (main_sdram_choose_req_request[1]) begin
                        main_sdram_choose_req_grant <= 1'd1;
                    end else begin
                        if (main_sdram_choose_req_request[2]) begin
                            main_sdram_choose_req_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    main_sdram_dfi_p0_cs_n <= 1'd0;
    main_sdram_dfi_p0_bank <= builder_sync_rhs_self0;
    main_sdram_dfi_p0_address <= builder_sync_rhs_self1;
    main_sdram_dfi_p0_cas_n <= (~builder_sync_rhs_self2);
    main_sdram_dfi_p0_ras_n <= (~builder_sync_rhs_self3);
    main_sdram_dfi_p0_we_n <= (~builder_sync_rhs_self4);
    main_sdram_dfi_p0_rddata_en <= builder_sync_rhs_self5;
    main_sdram_dfi_p0_wrdata_en <= builder_sync_rhs_self6;
    main_sdram_dfi_p1_cs_n <= 1'd0;
    main_sdram_dfi_p1_bank <= builder_sync_rhs_self7;
    main_sdram_dfi_p1_address <= builder_sync_rhs_self8;
    main_sdram_dfi_p1_cas_n <= (~builder_sync_rhs_self9);
    main_sdram_dfi_p1_ras_n <= (~builder_sync_rhs_self10);
    main_sdram_dfi_p1_we_n <= (~builder_sync_rhs_self11);
    main_sdram_dfi_p1_rddata_en <= builder_sync_rhs_self12;
    main_sdram_dfi_p1_wrdata_en <= builder_sync_rhs_self13;
    if (main_sdram_trrdcon_valid) begin
        main_sdram_trrdcon_count <= 1'd0;
        if (1'd1) begin
            main_sdram_trrdcon_ready <= 1'd1;
        end else begin
            main_sdram_trrdcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_trrdcon_ready)) begin
            main_sdram_trrdcon_count <= (main_sdram_trrdcon_count - 1'd1);
            if ((main_sdram_trrdcon_count == 1'd1)) begin
                main_sdram_trrdcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_tccdcon_valid) begin
        main_sdram_tccdcon_count <= 1'd0;
        if (1'd1) begin
            main_sdram_tccdcon_ready <= 1'd1;
        end else begin
            main_sdram_tccdcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_tccdcon_ready)) begin
            main_sdram_tccdcon_count <= (main_sdram_tccdcon_count - 1'd1);
            if ((main_sdram_tccdcon_count == 1'd1)) begin
                main_sdram_tccdcon_ready <= 1'd1;
            end
        end
    end
    if (main_sdram_twtrcon_valid) begin
        main_sdram_twtrcon_count <= 2'd2;
        if (1'd0) begin
            main_sdram_twtrcon_ready <= 1'd1;
        end else begin
            main_sdram_twtrcon_ready <= 1'd0;
        end
    end else begin
        if ((~main_sdram_twtrcon_ready)) begin
            main_sdram_twtrcon_count <= (main_sdram_twtrcon_count - 1'd1);
            if ((main_sdram_twtrcon_count == 1'd1)) begin
                main_sdram_twtrcon_ready <= 1'd1;
            end
        end
    end
    builder_basesoc_multiplexer_state <= builder_basesoc_multiplexer_next_state;
    builder_basesoc_new_master_wdata_ready0 <= ((((1'd0 | ((builder_basesoc_roundrobin0_grant == 1'd0) & main_sdram_interface_bank0_wdata_ready)) | ((builder_basesoc_roundrobin1_grant == 1'd0) & main_sdram_interface_bank1_wdata_ready)) | ((builder_basesoc_roundrobin2_grant == 1'd0) & main_sdram_interface_bank2_wdata_ready)) | ((builder_basesoc_roundrobin3_grant == 1'd0) & main_sdram_interface_bank3_wdata_ready));
    builder_basesoc_new_master_wdata_ready1 <= ((((1'd0 | ((builder_basesoc_roundrobin0_grant == 1'd1) & main_sdram_interface_bank0_wdata_ready)) | ((builder_basesoc_roundrobin1_grant == 1'd1) & main_sdram_interface_bank1_wdata_ready)) | ((builder_basesoc_roundrobin2_grant == 1'd1) & main_sdram_interface_bank2_wdata_ready)) | ((builder_basesoc_roundrobin3_grant == 1'd1) & main_sdram_interface_bank3_wdata_ready));
    builder_basesoc_new_master_rdata_valid0 <= ((((1'd0 | ((builder_basesoc_roundrobin0_grant == 1'd0) & main_sdram_interface_bank0_rdata_valid)) | ((builder_basesoc_roundrobin1_grant == 1'd0) & main_sdram_interface_bank1_rdata_valid)) | ((builder_basesoc_roundrobin2_grant == 1'd0) & main_sdram_interface_bank2_rdata_valid)) | ((builder_basesoc_roundrobin3_grant == 1'd0) & main_sdram_interface_bank3_rdata_valid));
    builder_basesoc_new_master_rdata_valid1 <= builder_basesoc_new_master_rdata_valid0;
    builder_basesoc_new_master_rdata_valid2 <= builder_basesoc_new_master_rdata_valid1;
    builder_basesoc_new_master_rdata_valid3 <= ((((1'd0 | ((builder_basesoc_roundrobin0_grant == 1'd1) & main_sdram_interface_bank0_rdata_valid)) | ((builder_basesoc_roundrobin1_grant == 1'd1) & main_sdram_interface_bank1_rdata_valid)) | ((builder_basesoc_roundrobin2_grant == 1'd1) & main_sdram_interface_bank2_rdata_valid)) | ((builder_basesoc_roundrobin3_grant == 1'd1) & main_sdram_interface_bank3_rdata_valid));
    builder_basesoc_new_master_rdata_valid4 <= builder_basesoc_new_master_rdata_valid3;
    builder_basesoc_new_master_rdata_valid5 <= builder_basesoc_new_master_rdata_valid4;
    if (builder_basesoc_roundrobin0_ce) begin
        case (builder_basesoc_roundrobin0_grant)
            1'd0: begin
                if (builder_basesoc_roundrobin0_request[1]) begin
                    builder_basesoc_roundrobin0_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_basesoc_roundrobin0_request[0]) begin
                    builder_basesoc_roundrobin0_grant <= 1'd0;
                end
            end
        endcase
    end
    if (builder_basesoc_roundrobin1_ce) begin
        case (builder_basesoc_roundrobin1_grant)
            1'd0: begin
                if (builder_basesoc_roundrobin1_request[1]) begin
                    builder_basesoc_roundrobin1_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_basesoc_roundrobin1_request[0]) begin
                    builder_basesoc_roundrobin1_grant <= 1'd0;
                end
            end
        endcase
    end
    if (builder_basesoc_roundrobin2_ce) begin
        case (builder_basesoc_roundrobin2_grant)
            1'd0: begin
                if (builder_basesoc_roundrobin2_request[1]) begin
                    builder_basesoc_roundrobin2_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_basesoc_roundrobin2_request[0]) begin
                    builder_basesoc_roundrobin2_grant <= 1'd0;
                end
            end
        endcase
    end
    if (builder_basesoc_roundrobin3_ce) begin
        case (builder_basesoc_roundrobin3_grant)
            1'd0: begin
                if (builder_basesoc_roundrobin3_request[1]) begin
                    builder_basesoc_roundrobin3_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (builder_basesoc_roundrobin3_request[0]) begin
                    builder_basesoc_roundrobin3_grant <= 1'd0;
                end
            end
        endcase
    end
    main_adr_offset_r <= main_wb_sdram_adr[1:0];
    builder_basesoc_fullmemorywe_state <= builder_basesoc_fullmemorywe_next_state;
    builder_basesoc_litedramnativeportconverter_state <= builder_basesoc_litedramnativeportconverter_next_state;
    if (main_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0) begin
        main_wishbone_bridge_cmd_count <= main_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0;
    end
    if (main_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value_ce1) begin
        main_wishbone_bridge_cmd_addr <= main_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value1;
    end
    if (main_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value_ce2) begin
        main_wishbone_bridge_cmd_we <= main_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value2;
    end
    if ((main_wishbone_bridge_wdata_converter_converter_source_valid & main_wishbone_bridge_wdata_converter_converter_source_ready)) begin
        if (main_wishbone_bridge_wdata_converter_converter_last) begin
            main_wishbone_bridge_wdata_converter_converter_mux <= 1'd0;
        end else begin
            main_wishbone_bridge_wdata_converter_converter_mux <= (main_wishbone_bridge_wdata_converter_converter_mux + 1'd1);
        end
    end
    if (main_wishbone_bridge_rdata_converter_converter_source_ready) begin
        main_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd0;
    end
    if (main_wishbone_bridge_rdata_converter_converter_load_part) begin
        if (((main_wishbone_bridge_rdata_converter_converter_demux == 2'd3) | main_wishbone_bridge_rdata_converter_converter_sink_last)) begin
            main_wishbone_bridge_rdata_converter_converter_demux <= 1'd0;
            main_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd1;
        end else begin
            main_wishbone_bridge_rdata_converter_converter_demux <= (main_wishbone_bridge_rdata_converter_converter_demux + 1'd1);
        end
    end
    if ((main_wishbone_bridge_rdata_converter_converter_source_valid & main_wishbone_bridge_rdata_converter_converter_source_ready)) begin
        if ((main_wishbone_bridge_rdata_converter_converter_sink_valid & main_wishbone_bridge_rdata_converter_converter_sink_ready)) begin
            main_wishbone_bridge_rdata_converter_converter_source_first <= main_wishbone_bridge_rdata_converter_converter_sink_first;
            main_wishbone_bridge_rdata_converter_converter_source_last <= main_wishbone_bridge_rdata_converter_converter_sink_last;
        end else begin
            main_wishbone_bridge_rdata_converter_converter_source_first <= 1'd0;
            main_wishbone_bridge_rdata_converter_converter_source_last <= 1'd0;
        end
    end else begin
        if ((main_wishbone_bridge_rdata_converter_converter_sink_valid & main_wishbone_bridge_rdata_converter_converter_sink_ready)) begin
            main_wishbone_bridge_rdata_converter_converter_source_first <= (main_wishbone_bridge_rdata_converter_converter_sink_first | main_wishbone_bridge_rdata_converter_converter_source_first);
            main_wishbone_bridge_rdata_converter_converter_source_last <= (main_wishbone_bridge_rdata_converter_converter_sink_last | main_wishbone_bridge_rdata_converter_converter_source_last);
        end
    end
    if (main_wishbone_bridge_rdata_converter_converter_load_part) begin
        case (main_wishbone_bridge_rdata_converter_converter_demux)
            1'd0: begin
                main_wishbone_bridge_rdata_converter_converter_source_payload_data[31:0] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            1'd1: begin
                main_wishbone_bridge_rdata_converter_converter_source_payload_data[63:32] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            2'd2: begin
                main_wishbone_bridge_rdata_converter_converter_source_payload_data[95:64] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            2'd3: begin
                main_wishbone_bridge_rdata_converter_converter_source_payload_data[127:96] <= main_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
        endcase
    end
    if (main_wishbone_bridge_rdata_converter_converter_load_part) begin
        main_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count <= (main_wishbone_bridge_rdata_converter_converter_demux + 1'd1);
    end
    builder_basesoc_fsm_state <= builder_basesoc_fsm_next_state;
    if (main_wishbone_bridge_aborted_fsm_next_value_ce) begin
        main_wishbone_bridge_aborted <= main_wishbone_bridge_aborted_fsm_next_value;
    end
    if (((main_vfb_dma_res_fifo_syncfifo_we & main_vfb_dma_res_fifo_syncfifo_writable) & (~main_vfb_dma_res_fifo_replace))) begin
        main_vfb_dma_res_fifo_produce <= (main_vfb_dma_res_fifo_produce + 1'd1);
    end
    if (main_vfb_dma_res_fifo_do_read) begin
        main_vfb_dma_res_fifo_consume <= (main_vfb_dma_res_fifo_consume + 1'd1);
    end
    if (((main_vfb_dma_res_fifo_syncfifo_we & main_vfb_dma_res_fifo_syncfifo_writable) & (~main_vfb_dma_res_fifo_replace))) begin
        if ((~main_vfb_dma_res_fifo_do_read)) begin
            main_vfb_dma_res_fifo_level <= (main_vfb_dma_res_fifo_level + 1'd1);
        end
    end else begin
        if (main_vfb_dma_res_fifo_do_read) begin
            main_vfb_dma_res_fifo_level <= (main_vfb_dma_res_fifo_level - 1'd1);
        end
    end
    if (main_vfb_dma_fifo_syncfifo_re) begin
        main_vfb_dma_fifo_readable <= 1'd1;
    end else begin
        if (main_vfb_dma_fifo_re) begin
            main_vfb_dma_fifo_readable <= 1'd0;
        end
    end
    if (((main_vfb_dma_fifo_syncfifo_we & main_vfb_dma_fifo_syncfifo_writable) & (~main_vfb_dma_fifo_replace))) begin
        main_vfb_dma_fifo_produce <= (main_vfb_dma_fifo_produce + 1'd1);
    end
    if (main_vfb_dma_fifo_do_read) begin
        main_vfb_dma_fifo_consume <= (main_vfb_dma_fifo_consume + 1'd1);
    end
    if (((main_vfb_dma_fifo_syncfifo_we & main_vfb_dma_fifo_syncfifo_writable) & (~main_vfb_dma_fifo_replace))) begin
        if ((~main_vfb_dma_fifo_do_read)) begin
            main_vfb_dma_fifo_level0 <= (main_vfb_dma_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_vfb_dma_fifo_do_read) begin
            main_vfb_dma_fifo_level0 <= (main_vfb_dma_fifo_level0 - 1'd1);
        end
    end
    builder_basesoc_litedramdmareader_state <= builder_basesoc_litedramdmareader_next_state;
    if (main_vfb_litedramdmareader_offset_litedramdmareader_next_value_ce) begin
        main_vfb_litedramdmareader_offset <= main_vfb_litedramdmareader_offset_litedramdmareader_next_value;
    end
    if (main_vfb_litedramdmareader_reset) begin
        main_vfb_litedramdmareader_offset <= 23'd0;
        builder_basesoc_litedramdmareader_state <= 2'd0;
    end
    main_vfb_cdc_cdc_graycounter0_q_binary <= main_vfb_cdc_cdc_graycounter0_q_next_binary;
    main_vfb_cdc_cdc_graycounter0_q <= main_vfb_cdc_cdc_graycounter0_q_next;
    clk_divider1 <= (clk_divider1 + 1'd1);
    if (clk_rise) begin
        spisdcard_clk <= clk_enable;
    end else begin
        if (clk_fall) begin
            clk_divider1 <= 1'd0;
            spisdcard_clk <= 1'd0;
        end
    end
    spisdcard_cs_n <= (~(cs & (xfer_enable | (cs_mode == 1'd1))));
    if (mosi_latch) begin
        self <= mosi;
        mosi_sel <= 3'd7;
    end else begin
        if (clk_fall) begin
            if (xfer_enable) begin
                spisdcard_mosi <= builder_sync_f_self;
            end
            mosi_sel <= (mosi_sel - 1'd1);
        end
    end
    if (clk_rise) begin
        if (loopback) begin
            miso_data <= {miso_data, spisdcard_mosi};
        end else begin
            miso_data <= {miso_data, spisdcard_miso};
        end
    end
    if (miso_latch) begin
        miso <= miso_data;
    end
    builder_basesoc_spimaster_state <= builder_basesoc_spimaster_next_state;
    if (count_spimaster_next_value_ce) begin
        count <= count_spimaster_next_value;
    end
    builder_basesoc_axilite2csr_state <= builder_basesoc_axilite2csr_next_state;
    if (builder_basesoc_port_adr_reg_axilite2csr_next_value_ce0) begin
        builder_basesoc_port_adr_reg <= builder_basesoc_port_adr_reg_axilite2csr_next_value0;
    end
    if (builder_basesoc_port_dat_r_latched_axilite2csr_next_value_ce1) begin
        builder_basesoc_port_dat_r_latched <= builder_basesoc_port_dat_r_latched_axilite2csr_next_value1;
    end
    if (builder_basesoc_last_was_read_axilite2csr_next_value_ce2) begin
        builder_basesoc_last_was_read <= builder_basesoc_last_was_read_axilite2csr_next_value2;
    end
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        main_basesoc_reset_storage[1:0] <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    main_basesoc_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        main_basesoc_scratch_storage[31:0] <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    main_basesoc_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    main_basesoc_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_in_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_out0_w;
            end
        endcase
    end
    main_gpio_gpio_in_re <= builder_csr_bankarray_csrbank1_in_re;
    if (builder_csr_bankarray_csrbank1_out0_re) begin
        main_gpio_gpio_out_storage[1:0] <= builder_csr_bankarray_csrbank1_out0_r;
    end
    main_gpio_gpio_out_re <= builder_csr_bankarray_csrbank1_out0_re;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_in_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_out0_w;
            end
        endcase
    end
    main_gpio2_gpio_in_re <= builder_csr_bankarray_csrbank2_in_re;
    if (builder_csr_bankarray_csrbank2_out0_re) begin
        main_gpio2_gpio_out_storage[1:0] <= builder_csr_bankarray_csrbank2_out0_r;
    end
    main_gpio2_gpio_out_re <= builder_csr_bankarray_csrbank2_out0_re;
    builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank3_sel) begin
        case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank3_out0_re) begin
        main_gpio3_storage <= builder_csr_bankarray_csrbank3_out0_r;
    end
    main_gpio3_re <= builder_csr_bankarray_csrbank3_out0_re;
    builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank4_sel) begin
        case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_w0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_r_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank4_w0_re) begin
        main__w_storage[2:0] <= builder_csr_bankarray_csrbank4_w0_r;
    end
    main__w_re <= builder_csr_bankarray_csrbank4_w0_re;
    main__r_re <= builder_csr_bankarray_csrbank4_r_re;
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank5_sel) begin
        case (builder_csr_bankarray_interface5_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank5_out0_re) begin
        main_leds_storage[5:0] <= builder_csr_bankarray_csrbank5_out0_r;
    end
    main_leds_re <= builder_csr_bankarray_csrbank5_out0_re;
    builder_csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank6_sel) begin
        case (builder_csr_bankarray_interface6_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_dfii_control0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_dfii_pi0_command0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= main_sdram_phaseinjector0_command_issue_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_dfii_pi0_address0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_dfii_pi0_rddata_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_dfii_pi1_command0_w;
            end
            4'd8: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= main_sdram_phaseinjector1_command_issue_w;
            end
            4'd9: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_dfii_pi1_address0_w;
            end
            4'd10: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_w;
            end
            4'd11: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_w;
            end
            4'd12: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_dfii_pi1_rddata_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank6_dfii_control0_re) begin
        main_sdram_storage[3:0] <= builder_csr_bankarray_csrbank6_dfii_control0_r;
    end
    main_sdram_re <= builder_csr_bankarray_csrbank6_dfii_control0_re;
    if (builder_csr_bankarray_csrbank6_dfii_pi0_command0_re) begin
        main_sdram_phaseinjector0_command_storage[7:0] <= builder_csr_bankarray_csrbank6_dfii_pi0_command0_r;
    end
    main_sdram_phaseinjector0_command_re <= builder_csr_bankarray_csrbank6_dfii_pi0_command0_re;
    if (builder_csr_bankarray_csrbank6_dfii_pi0_address0_re) begin
        main_sdram_phaseinjector0_address_storage[12:0] <= builder_csr_bankarray_csrbank6_dfii_pi0_address0_r;
    end
    main_sdram_phaseinjector0_address_re <= builder_csr_bankarray_csrbank6_dfii_pi0_address0_re;
    if (builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_re) begin
        main_sdram_phaseinjector0_baddress_storage[1:0] <= builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_r;
    end
    main_sdram_phaseinjector0_baddress_re <= builder_csr_bankarray_csrbank6_dfii_pi0_baddress0_re;
    if (builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_re) begin
        main_sdram_phaseinjector0_wrdata_storage[15:0] <= builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_r;
    end
    main_sdram_phaseinjector0_wrdata_re <= builder_csr_bankarray_csrbank6_dfii_pi0_wrdata0_re;
    main_sdram_phaseinjector0_rddata_re <= builder_csr_bankarray_csrbank6_dfii_pi0_rddata_re;
    if (builder_csr_bankarray_csrbank6_dfii_pi1_command0_re) begin
        main_sdram_phaseinjector1_command_storage[7:0] <= builder_csr_bankarray_csrbank6_dfii_pi1_command0_r;
    end
    main_sdram_phaseinjector1_command_re <= builder_csr_bankarray_csrbank6_dfii_pi1_command0_re;
    if (builder_csr_bankarray_csrbank6_dfii_pi1_address0_re) begin
        main_sdram_phaseinjector1_address_storage[12:0] <= builder_csr_bankarray_csrbank6_dfii_pi1_address0_r;
    end
    main_sdram_phaseinjector1_address_re <= builder_csr_bankarray_csrbank6_dfii_pi1_address0_re;
    if (builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_re) begin
        main_sdram_phaseinjector1_baddress_storage[1:0] <= builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_r;
    end
    main_sdram_phaseinjector1_baddress_re <= builder_csr_bankarray_csrbank6_dfii_pi1_baddress0_re;
    if (builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_re) begin
        main_sdram_phaseinjector1_wrdata_storage[15:0] <= builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_r;
    end
    main_sdram_phaseinjector1_wrdata_re <= builder_csr_bankarray_csrbank6_dfii_pi1_wrdata0_re;
    main_sdram_phaseinjector1_rddata_re <= builder_csr_bankarray_csrbank6_dfii_pi1_rddata_re;
    builder_csr_bankarray_interface7_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank7_sel) begin
        case (builder_csr_bankarray_interface7_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_control0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_status_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_mosi0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_miso_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_cs0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_loopback0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface7_bank_bus_dat_r <= builder_csr_bankarray_csrbank7_clk_divider0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank7_control0_re) begin
        control_storage[15:0] <= builder_csr_bankarray_csrbank7_control0_r;
    end
    control_re <= builder_csr_bankarray_csrbank7_control0_re;
    status_re <= builder_csr_bankarray_csrbank7_status_re;
    if (builder_csr_bankarray_csrbank7_mosi0_re) begin
        mosi_storage[7:0] <= builder_csr_bankarray_csrbank7_mosi0_r;
    end
    mosi_re <= builder_csr_bankarray_csrbank7_mosi0_re;
    miso_re <= builder_csr_bankarray_csrbank7_miso_re;
    if (builder_csr_bankarray_csrbank7_cs0_re) begin
        cs_storage[16:0] <= builder_csr_bankarray_csrbank7_cs0_r;
    end
    cs_re <= builder_csr_bankarray_csrbank7_cs0_re;
    if (builder_csr_bankarray_csrbank7_loopback0_re) begin
        loopback_storage <= builder_csr_bankarray_csrbank7_loopback0_r;
    end
    loopback_re <= builder_csr_bankarray_csrbank7_loopback0_re;
    if (builder_csr_bankarray_csrbank7_clk_divider0_re) begin
        storage[15:0] <= builder_csr_bankarray_csrbank7_clk_divider0_r;
    end
    re <= builder_csr_bankarray_csrbank7_clk_divider0_re;
    builder_csr_bankarray_interface8_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank8_sel) begin
        case (builder_csr_bankarray_interface8_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface8_bank_bus_dat_r <= builder_csr_bankarray_csrbank8_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank8_load0_re) begin
        main_basesoc_timer_load_storage[31:0] <= builder_csr_bankarray_csrbank8_load0_r;
    end
    main_basesoc_timer_load_re <= builder_csr_bankarray_csrbank8_load0_re;
    if (builder_csr_bankarray_csrbank8_reload0_re) begin
        main_basesoc_timer_reload_storage[31:0] <= builder_csr_bankarray_csrbank8_reload0_r;
    end
    main_basesoc_timer_reload_re <= builder_csr_bankarray_csrbank8_reload0_re;
    if (builder_csr_bankarray_csrbank8_en0_re) begin
        main_basesoc_timer_en_storage <= builder_csr_bankarray_csrbank8_en0_r;
    end
    main_basesoc_timer_en_re <= builder_csr_bankarray_csrbank8_en0_re;
    if (builder_csr_bankarray_csrbank8_update_value0_re) begin
        main_basesoc_timer_update_value_storage <= builder_csr_bankarray_csrbank8_update_value0_r;
    end
    main_basesoc_timer_update_value_re <= builder_csr_bankarray_csrbank8_update_value0_re;
    main_basesoc_timer_value_re <= builder_csr_bankarray_csrbank8_value_re;
    main_basesoc_timer_status_re <= builder_csr_bankarray_csrbank8_ev_status_re;
    if (builder_csr_bankarray_csrbank8_ev_pending_re) begin
        main_basesoc_timer_pending_r <= builder_csr_bankarray_csrbank8_ev_pending_r;
    end
    main_basesoc_timer_pending_re <= builder_csr_bankarray_csrbank8_ev_pending_re;
    if (builder_csr_bankarray_csrbank8_ev_enable0_re) begin
        main_basesoc_timer_enable_storage <= builder_csr_bankarray_csrbank8_ev_enable0_r;
    end
    main_basesoc_timer_enable_re <= builder_csr_bankarray_csrbank8_ev_enable0_re;
    builder_csr_bankarray_interface9_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank9_sel) begin
        case (builder_csr_bankarray_interface9_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface9_bank_bus_dat_r <= main_basesoc_uart_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface9_bank_bus_dat_r <= builder_csr_bankarray_csrbank9_rxfull_w;
            end
        endcase
    end
    main_basesoc_uart_txfull_re <= builder_csr_bankarray_csrbank9_txfull_re;
    main_basesoc_uart_rxempty_re <= builder_csr_bankarray_csrbank9_rxempty_re;
    main_basesoc_uart_status_re <= builder_csr_bankarray_csrbank9_ev_status_re;
    if (builder_csr_bankarray_csrbank9_ev_pending_re) begin
        main_basesoc_uart_pending_r[1:0] <= builder_csr_bankarray_csrbank9_ev_pending_r;
    end
    main_basesoc_uart_pending_re <= builder_csr_bankarray_csrbank9_ev_pending_re;
    if (builder_csr_bankarray_csrbank9_ev_enable0_re) begin
        main_basesoc_uart_enable_storage[1:0] <= builder_csr_bankarray_csrbank9_ev_enable0_r;
    end
    main_basesoc_uart_enable_re <= builder_csr_bankarray_csrbank9_ev_enable0_re;
    main_basesoc_uart_txempty_re <= builder_csr_bankarray_csrbank9_txempty_re;
    main_basesoc_uart_rxfull_re <= builder_csr_bankarray_csrbank9_rxfull_re;
    builder_csr_bankarray_interface10_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank10_sel) begin
        case (builder_csr_bankarray_interface10_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface10_bank_bus_dat_r <= builder_csr_bankarray_csrbank10_dma_base0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface10_bank_bus_dat_r <= builder_csr_bankarray_csrbank10_dma_length0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface10_bank_bus_dat_r <= builder_csr_bankarray_csrbank10_dma_enable0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface10_bank_bus_dat_r <= builder_csr_bankarray_csrbank10_dma_done_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface10_bank_bus_dat_r <= builder_csr_bankarray_csrbank10_dma_loop0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface10_bank_bus_dat_r <= builder_csr_bankarray_csrbank10_dma_offset_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank10_dma_base0_re) begin
        main_vfb_litedramdmareader_base_storage[31:0] <= builder_csr_bankarray_csrbank10_dma_base0_r;
    end
    main_vfb_litedramdmareader_base_re <= builder_csr_bankarray_csrbank10_dma_base0_re;
    if (builder_csr_bankarray_csrbank10_dma_length0_re) begin
        main_vfb_litedramdmareader_length_storage[31:0] <= builder_csr_bankarray_csrbank10_dma_length0_r;
    end
    main_vfb_litedramdmareader_length_re <= builder_csr_bankarray_csrbank10_dma_length0_re;
    if (builder_csr_bankarray_csrbank10_dma_enable0_re) begin
        main_vfb_litedramdmareader_enable_storage <= builder_csr_bankarray_csrbank10_dma_enable0_r;
    end
    main_vfb_litedramdmareader_enable_re <= builder_csr_bankarray_csrbank10_dma_enable0_re;
    main_vfb_litedramdmareader_done_re <= builder_csr_bankarray_csrbank10_dma_done_re;
    if (builder_csr_bankarray_csrbank10_dma_loop0_re) begin
        main_vfb_litedramdmareader_loop_storage <= builder_csr_bankarray_csrbank10_dma_loop0_r;
    end
    main_vfb_litedramdmareader_loop_re <= builder_csr_bankarray_csrbank10_dma_loop0_re;
    main_vfb_litedramdmareader_offset_re <= builder_csr_bankarray_csrbank10_dma_offset_re;
    builder_csr_bankarray_interface11_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank11_sel) begin
        case (builder_csr_bankarray_interface11_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_enable0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_hres0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_hsync_start0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_hsync_end0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_hscan0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_vres0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_vsync_start0_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_vsync_end0_w;
            end
            4'd8: begin
                builder_csr_bankarray_interface11_bank_bus_dat_r <= builder_csr_bankarray_csrbank11_vscan0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank11_enable0_re) begin
        main_vtg_enable_storage <= builder_csr_bankarray_csrbank11_enable0_r;
    end
    main_vtg_enable_re <= builder_csr_bankarray_csrbank11_enable0_re;
    if (builder_csr_bankarray_csrbank11_hres0_re) begin
        main_vtg_hres_storage[11:0] <= builder_csr_bankarray_csrbank11_hres0_r;
    end
    main_vtg_hres_re <= builder_csr_bankarray_csrbank11_hres0_re;
    if (builder_csr_bankarray_csrbank11_hsync_start0_re) begin
        main_vtg_hsync_start_storage[11:0] <= builder_csr_bankarray_csrbank11_hsync_start0_r;
    end
    main_vtg_hsync_start_re <= builder_csr_bankarray_csrbank11_hsync_start0_re;
    if (builder_csr_bankarray_csrbank11_hsync_end0_re) begin
        main_vtg_hsync_end_storage[11:0] <= builder_csr_bankarray_csrbank11_hsync_end0_r;
    end
    main_vtg_hsync_end_re <= builder_csr_bankarray_csrbank11_hsync_end0_re;
    if (builder_csr_bankarray_csrbank11_hscan0_re) begin
        main_vtg_hscan_storage[11:0] <= builder_csr_bankarray_csrbank11_hscan0_r;
    end
    main_vtg_hscan_re <= builder_csr_bankarray_csrbank11_hscan0_re;
    if (builder_csr_bankarray_csrbank11_vres0_re) begin
        main_vtg_vres_storage[11:0] <= builder_csr_bankarray_csrbank11_vres0_r;
    end
    main_vtg_vres_re <= builder_csr_bankarray_csrbank11_vres0_re;
    if (builder_csr_bankarray_csrbank11_vsync_start0_re) begin
        main_vtg_vsync_start_storage[11:0] <= builder_csr_bankarray_csrbank11_vsync_start0_r;
    end
    main_vtg_vsync_start_re <= builder_csr_bankarray_csrbank11_vsync_start0_re;
    if (builder_csr_bankarray_csrbank11_vsync_end0_re) begin
        main_vtg_vsync_end_storage[11:0] <= builder_csr_bankarray_csrbank11_vsync_end0_r;
    end
    main_vtg_vsync_end_re <= builder_csr_bankarray_csrbank11_vsync_end0_re;
    if (builder_csr_bankarray_csrbank11_vscan0_re) begin
        main_vtg_vscan_storage[11:0] <= builder_csr_bankarray_csrbank11_vscan0_r;
    end
    main_vtg_vscan_re <= builder_csr_bankarray_csrbank11_vscan0_re;
    if (sys_rst) begin
        main_basesoc_reset_storage <= 2'd0;
        main_basesoc_reset_re <= 1'd0;
        main_basesoc_scratch_storage <= 32'd305419896;
        main_basesoc_scratch_re <= 1'd0;
        main_basesoc_bus_errors_re <= 1'd0;
        main_basesoc_bus_errors <= 32'd0;
        main_basesoc_socbushandler_wishbone2axi0_cmd_done <= 1'd0;
        main_basesoc_socbushandler_wishbone2axi0_data_done <= 1'd0;
        main_basesoc_socbushandler_wishbone2axi1_cmd_done <= 1'd0;
        main_basesoc_socbushandler_wishbone2axi1_data_done <= 1'd0;
        main_basesoc_basesoc_last_was_read <= 1'd0;
        main_basesoc_basesoc_port_dat_r_latched <= 32'd0;
        main_basesoc_basesoc_port_adr_reg <= 15'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_valid <= 1'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        main_basesoc_basesoc_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        main_basesoc_basesoc_socbushandler_beat_count <= 8'd0;
        main_basesoc_basesoc_socbushandler_beat_offset <= 13'd0;
        main_basesoc_basesoc_socbushandler_cmd_done <= 1'd0;
        main_basesoc_basesoc_socbushandler_last_ar_aw_n <= 1'd0;
        main_basesoc_ram_last_was_read <= 1'd0;
        main_basesoc_ram_port_dat_r_latched <= 32'd0;
        main_basesoc_ram_port_adr_reg <= 11'd0;
        main_basesoc_socbushandler_pipe_valid_source_valid <= 1'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        main_basesoc_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        main_basesoc_socbushandler_beat_count <= 8'd0;
        main_basesoc_socbushandler_beat_offset <= 13'd0;
        main_basesoc_socbushandler_cmd_done <= 1'd0;
        main_basesoc_socbushandler_last_ar_aw_n <= 1'd0;
        serial_tx <= 1'd1;
        main_basesoc_tx_tick <= 1'd0;
        main_basesoc_rx_tick <= 1'd0;
        main_basesoc_rx_rx_d <= 1'd0;
        main_basesoc_uart_txfull_re <= 1'd0;
        main_basesoc_uart_rxempty_re <= 1'd0;
        main_basesoc_uart_tx_pending <= 1'd0;
        main_basesoc_uart_tx_trigger_d <= 1'd0;
        main_basesoc_uart_rx_pending <= 1'd0;
        main_basesoc_uart_rx_trigger_d <= 1'd0;
        main_basesoc_uart_status_re <= 1'd0;
        main_basesoc_uart_pending_re <= 1'd0;
        main_basesoc_uart_pending_r <= 2'd0;
        main_basesoc_uart_enable_storage <= 2'd0;
        main_basesoc_uart_enable_re <= 1'd0;
        main_basesoc_uart_txempty_re <= 1'd0;
        main_basesoc_uart_rxfull_re <= 1'd0;
        main_basesoc_uart_tx_fifo_readable <= 1'd0;
        main_basesoc_uart_tx_fifo_level0 <= 5'd0;
        main_basesoc_uart_tx_fifo_produce <= 4'd0;
        main_basesoc_uart_tx_fifo_consume <= 4'd0;
        main_basesoc_uart_rx_fifo_readable <= 1'd0;
        main_basesoc_uart_rx_fifo_level0 <= 5'd0;
        main_basesoc_uart_rx_fifo_produce <= 4'd0;
        main_basesoc_uart_rx_fifo_consume <= 4'd0;
        main_basesoc_timer_load_storage <= 32'd0;
        main_basesoc_timer_load_re <= 1'd0;
        main_basesoc_timer_reload_storage <= 32'd0;
        main_basesoc_timer_reload_re <= 1'd0;
        main_basesoc_timer_en_storage <= 1'd0;
        main_basesoc_timer_en_re <= 1'd0;
        main_basesoc_timer_update_value_storage <= 1'd0;
        main_basesoc_timer_update_value_re <= 1'd0;
        main_basesoc_timer_value_status <= 32'd0;
        main_basesoc_timer_value_re <= 1'd0;
        main_basesoc_timer_zero_pending <= 1'd0;
        main_basesoc_timer_zero_trigger_d <= 1'd0;
        main_basesoc_timer_status_re <= 1'd0;
        main_basesoc_timer_pending_re <= 1'd0;
        main_basesoc_timer_pending_r <= 1'd0;
        main_basesoc_timer_enable_storage <= 1'd0;
        main_basesoc_timer_enable_re <= 1'd0;
        main_basesoc_timer_value <= 32'd0;
        main_leds_storage <= 6'd0;
        main_leds_re <= 1'd0;
        main_leds_chaser <= 6'd0;
        main_leds_mode <= 1'd0;
        main_leds_count <= 22'd4166666;
        main_phase_sys <= 1'd0;
        main_sdram_storage <= 4'd1;
        main_sdram_re <= 1'd0;
        main_sdram_phaseinjector0_command_storage <= 8'd0;
        main_sdram_phaseinjector0_command_re <= 1'd0;
        main_sdram_phaseinjector0_address_re <= 1'd0;
        main_sdram_phaseinjector0_baddress_re <= 1'd0;
        main_sdram_phaseinjector0_wrdata_re <= 1'd0;
        main_sdram_phaseinjector0_rddata_status <= 16'd0;
        main_sdram_phaseinjector0_rddata_re <= 1'd0;
        main_sdram_phaseinjector1_command_storage <= 8'd0;
        main_sdram_phaseinjector1_command_re <= 1'd0;
        main_sdram_phaseinjector1_address_re <= 1'd0;
        main_sdram_phaseinjector1_baddress_re <= 1'd0;
        main_sdram_phaseinjector1_wrdata_re <= 1'd0;
        main_sdram_phaseinjector1_rddata_status <= 16'd0;
        main_sdram_phaseinjector1_rddata_re <= 1'd0;
        main_sdram_dfi_p0_address <= 13'd0;
        main_sdram_dfi_p0_bank <= 2'd0;
        main_sdram_dfi_p0_cas_n <= 1'd1;
        main_sdram_dfi_p0_cs_n <= 1'd1;
        main_sdram_dfi_p0_ras_n <= 1'd1;
        main_sdram_dfi_p0_we_n <= 1'd1;
        main_sdram_dfi_p0_wrdata_en <= 1'd0;
        main_sdram_dfi_p0_rddata_en <= 1'd0;
        main_sdram_dfi_p1_address <= 13'd0;
        main_sdram_dfi_p1_bank <= 2'd0;
        main_sdram_dfi_p1_cas_n <= 1'd1;
        main_sdram_dfi_p1_cs_n <= 1'd1;
        main_sdram_dfi_p1_ras_n <= 1'd1;
        main_sdram_dfi_p1_we_n <= 1'd1;
        main_sdram_dfi_p1_wrdata_en <= 1'd0;
        main_sdram_dfi_p1_rddata_en <= 1'd0;
        main_sdram_cmd_payload_a <= 13'd0;
        main_sdram_cmd_payload_ba <= 2'd0;
        main_sdram_cmd_payload_cas <= 1'd0;
        main_sdram_cmd_payload_ras <= 1'd0;
        main_sdram_cmd_payload_we <= 1'd0;
        main_sdram_timer_count1 <= 9'd390;
        main_sdram_postponer_req_o <= 1'd0;
        main_sdram_postponer_count <= 1'd0;
        main_sdram_sequencer_done1 <= 1'd0;
        main_sdram_sequencer_trigger <= 3'd0;
        main_sdram_sequencer_count <= 1'd0;
        main_sdram_bankmachine0_level <= 4'd0;
        main_sdram_bankmachine0_produce <= 3'd0;
        main_sdram_bankmachine0_consume <= 3'd0;
        main_sdram_bankmachine0_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine0_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine0_pipe_valid_source_payload_addr <= 21'd0;
        main_sdram_bankmachine0_row <= 13'd0;
        main_sdram_bankmachine0_row_opened <= 1'd0;
        main_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine0_twtpcon_count <= 2'd0;
        main_sdram_bankmachine0_trccon_ready <= 1'd0;
        main_sdram_bankmachine0_trccon_count <= 2'd0;
        main_sdram_bankmachine0_trascon_ready <= 1'd0;
        main_sdram_bankmachine0_trascon_count <= 2'd0;
        main_sdram_bankmachine1_level <= 4'd0;
        main_sdram_bankmachine1_produce <= 3'd0;
        main_sdram_bankmachine1_consume <= 3'd0;
        main_sdram_bankmachine1_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine1_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine1_pipe_valid_source_payload_addr <= 21'd0;
        main_sdram_bankmachine1_row <= 13'd0;
        main_sdram_bankmachine1_row_opened <= 1'd0;
        main_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine1_twtpcon_count <= 2'd0;
        main_sdram_bankmachine1_trccon_ready <= 1'd0;
        main_sdram_bankmachine1_trccon_count <= 2'd0;
        main_sdram_bankmachine1_trascon_ready <= 1'd0;
        main_sdram_bankmachine1_trascon_count <= 2'd0;
        main_sdram_bankmachine2_level <= 4'd0;
        main_sdram_bankmachine2_produce <= 3'd0;
        main_sdram_bankmachine2_consume <= 3'd0;
        main_sdram_bankmachine2_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine2_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine2_pipe_valid_source_payload_addr <= 21'd0;
        main_sdram_bankmachine2_row <= 13'd0;
        main_sdram_bankmachine2_row_opened <= 1'd0;
        main_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine2_twtpcon_count <= 2'd0;
        main_sdram_bankmachine2_trccon_ready <= 1'd0;
        main_sdram_bankmachine2_trccon_count <= 2'd0;
        main_sdram_bankmachine2_trascon_ready <= 1'd0;
        main_sdram_bankmachine2_trascon_count <= 2'd0;
        main_sdram_bankmachine3_level <= 4'd0;
        main_sdram_bankmachine3_produce <= 3'd0;
        main_sdram_bankmachine3_consume <= 3'd0;
        main_sdram_bankmachine3_pipe_valid_source_valid <= 1'd0;
        main_sdram_bankmachine3_pipe_valid_source_payload_we <= 1'd0;
        main_sdram_bankmachine3_pipe_valid_source_payload_addr <= 21'd0;
        main_sdram_bankmachine3_row <= 13'd0;
        main_sdram_bankmachine3_row_opened <= 1'd0;
        main_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        main_sdram_bankmachine3_twtpcon_count <= 2'd0;
        main_sdram_bankmachine3_trccon_ready <= 1'd0;
        main_sdram_bankmachine3_trccon_count <= 2'd0;
        main_sdram_bankmachine3_trascon_ready <= 1'd0;
        main_sdram_bankmachine3_trascon_count <= 2'd0;
        main_sdram_choose_cmd_grant <= 2'd0;
        main_sdram_choose_req_grant <= 2'd0;
        main_sdram_trrdcon_ready <= 1'd0;
        main_sdram_trrdcon_count <= 1'd0;
        main_sdram_tccdcon_ready <= 1'd0;
        main_sdram_tccdcon_count <= 1'd0;
        main_sdram_twtrcon_ready <= 1'd0;
        main_sdram_twtrcon_count <= 2'd0;
        main_sdram_time0 <= 5'd0;
        main_sdram_time1 <= 4'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_valid <= 1'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_addr <= 32'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_burst <= 2'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_len <= 8'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_size <= 3'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_lock <= 1'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_prot <= 3'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_cache <= 4'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_qos <= 4'd0;
        main_bridge_axi2axi_lite_pipe_valid_source_payload_region <= 4'd0;
        main_bridge_axi2axi_lite_beat_count <= 8'd0;
        main_bridge_axi2axi_lite_beat_offset <= 13'd0;
        main_bridge_axi2axi_lite_cmd_done <= 1'd0;
        main_bridge_axi2axi_lite_last_ar_aw_n <= 1'd0;
        main_bridge_axi_lite2wishbone_data <= 32'd0;
        main_bridge_axi_lite2wishbone_last_ar_aw_n <= 1'd0;
        main_wishbone_bridge_cmd_count <= 2'd0;
        main_wishbone_bridge_cmd_addr <= 21'd0;
        main_wishbone_bridge_cmd_we <= 1'd0;
        main_wishbone_bridge_wdata_converter_converter_mux <= 2'd0;
        main_wishbone_bridge_rdata_converter_converter_source_payload_data <= 128'd0;
        main_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count <= 3'd0;
        main_wishbone_bridge_rdata_converter_converter_demux <= 2'd0;
        main_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd0;
        main_wishbone_bridge_aborted <= 1'd0;
        main_vtg_enable_storage <= 1'd1;
        main_vtg_enable_re <= 1'd0;
        main_vtg_hres_storage <= 12'd800;
        main_vtg_hres_re <= 1'd0;
        main_vtg_hsync_start_storage <= 12'd1010;
        main_vtg_hsync_start_re <= 1'd0;
        main_vtg_hsync_end_storage <= 12'd1011;
        main_vtg_hsync_end_re <= 1'd0;
        main_vtg_hscan_storage <= 12'd1055;
        main_vtg_hscan_re <= 1'd0;
        main_vtg_vres_storage <= 12'd480;
        main_vtg_vres_re <= 1'd0;
        main_vtg_vsync_start_storage <= 12'd502;
        main_vtg_vsync_start_re <= 1'd0;
        main_vtg_vsync_end_storage <= 12'd503;
        main_vtg_vsync_end_re <= 1'd0;
        main_vtg_vscan_storage <= 12'd524;
        main_vtg_vscan_re <= 1'd0;
        main_vfb_dma_res_fifo_level <= 15'd0;
        main_vfb_dma_res_fifo_produce <= 14'd0;
        main_vfb_dma_res_fifo_consume <= 14'd0;
        main_vfb_dma_fifo_readable <= 1'd0;
        main_vfb_dma_fifo_level0 <= 15'd0;
        main_vfb_dma_fifo_produce <= 14'd0;
        main_vfb_dma_fifo_consume <= 14'd0;
        main_vfb_litedramdmareader_base_storage <= 32'd1086324736;
        main_vfb_litedramdmareader_base_re <= 1'd0;
        main_vfb_litedramdmareader_length_storage <= 32'd1536000;
        main_vfb_litedramdmareader_length_re <= 1'd0;
        main_vfb_litedramdmareader_enable_storage <= 1'd0;
        main_vfb_litedramdmareader_enable_re <= 1'd0;
        main_vfb_litedramdmareader_done_re <= 1'd0;
        main_vfb_litedramdmareader_loop_storage <= 1'd1;
        main_vfb_litedramdmareader_loop_re <= 1'd0;
        main_vfb_litedramdmareader_offset_re <= 1'd0;
        main_vfb_litedramdmareader_offset <= 23'd0;
        main_vfb_cdc_cdc_graycounter0_q <= 3'd0;
        main_vfb_cdc_cdc_graycounter0_q_binary <= 3'd0;
        main_gpio_gpio_in_re <= 1'd0;
        main_gpio_gpio_out_storage <= 2'd0;
        main_gpio_gpio_out_re <= 1'd0;
        main_gpio2_gpio_in_re <= 1'd0;
        main_gpio2_gpio_out_storage <= 2'd0;
        main_gpio2_gpio_out_re <= 1'd0;
        main__w_storage <= 3'd5;
        main__w_re <= 1'd0;
        main__r_re <= 1'd0;
        main_gpio3_storage <= 1'd0;
        main_gpio3_re <= 1'd0;
        spisdcard_clk <= 1'd0;
        spisdcard_mosi <= 1'd0;
        spisdcard_cs_n <= 1'd0;
        miso <= 8'd0;
        control_storage <= 16'd0;
        control_re <= 1'd0;
        status_re <= 1'd0;
        mosi_re <= 1'd0;
        miso_re <= 1'd0;
        cs_storage <= 17'd1;
        cs_re <= 1'd0;
        loopback_storage <= 1'd0;
        loopback_re <= 1'd0;
        count <= 3'd0;
        clk_divider1 <= 16'd0;
        self <= 8'd0;
        mosi_sel <= 3'd0;
        miso_data <= 8'd0;
        storage <= 16'd125;
        re <= 1'd0;
        builder_basesoc_last_was_read <= 1'd0;
        builder_basesoc_port_dat_r_latched <= 32'd0;
        builder_basesoc_port_adr_reg <= 14'd0;
        builder_basesoc_socbushandler_pipe_valid_source_valid <= 1'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        builder_basesoc_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        builder_basesoc_socbushandler_beat_count <= 8'd0;
        builder_basesoc_socbushandler_beat_offset <= 13'd0;
        builder_basesoc_socbushandler_cmd_done <= 1'd0;
        builder_basesoc_socbushandler_last_ar_aw_n <= 1'd0;
        builder_wishbone2axi0_state <= 2'd0;
        builder_wishbone2axi1_state <= 2'd0;
        builder_axi2axilite0_state <= 2'd0;
        builder_axi2axilite1_state <= 2'd0;
        builder_axi2axilite_state <= 2'd0;
        builder_axilite2wishbone_state <= 3'd0;
        builder_axi2axilite2_state <= 2'd0;
        builder_rr_write_grant <= 1'd0;
        builder_rr_read_grant <= 1'd0;
        builder_wr_lock_counter <= 8'd0;
        builder_rd_lock_counter <= 8'd0;
        builder_slave_sel_reg0 <= 4'd0;
        builder_slave_sel_reg1 <= 4'd0;
        builder_axirequestcounter0_counter <= 8'd0;
        builder_axirequestcounter1_counter <= 8'd0;
        builder_wr_timer_count <= 20'd1000000;
        builder_rd_timer_count <= 20'd1000000;
        builder_fsm0_state <= 1'd0;
        builder_fsm1_state <= 1'd0;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_basesoc_axilitesram0_state <= 3'd0;
        builder_basesoc_axilitesram1_state <= 3'd0;
        builder_basesoc_rs232phytx_state <= 1'd0;
        builder_basesoc_rs232phyrx_state <= 1'd0;
        builder_basesoc_refresher_state <= 2'd0;
        builder_basesoc_bankmachine0_state <= 3'd0;
        builder_basesoc_bankmachine1_state <= 3'd0;
        builder_basesoc_bankmachine2_state <= 3'd0;
        builder_basesoc_bankmachine3_state <= 3'd0;
        builder_basesoc_multiplexer_state <= 3'd0;
        builder_basesoc_roundrobin0_grant <= 1'd0;
        builder_basesoc_roundrobin1_grant <= 1'd0;
        builder_basesoc_roundrobin2_grant <= 1'd0;
        builder_basesoc_roundrobin3_grant <= 1'd0;
        builder_basesoc_new_master_wdata_ready0 <= 1'd0;
        builder_basesoc_new_master_wdata_ready1 <= 1'd0;
        builder_basesoc_new_master_rdata_valid0 <= 1'd0;
        builder_basesoc_new_master_rdata_valid1 <= 1'd0;
        builder_basesoc_new_master_rdata_valid2 <= 1'd0;
        builder_basesoc_new_master_rdata_valid3 <= 1'd0;
        builder_basesoc_new_master_rdata_valid4 <= 1'd0;
        builder_basesoc_new_master_rdata_valid5 <= 1'd0;
        builder_basesoc_fullmemorywe_state <= 2'd0;
        builder_basesoc_litedramnativeportconverter_state <= 1'd0;
        builder_basesoc_fsm_state <= 2'd0;
        builder_basesoc_litedramdmareader_state <= 2'd0;
        builder_basesoc_spimaster_state <= 2'd0;
        builder_basesoc_axilite2csr_state <= 3'd0;
    end
    builder_multiregimpl0_regs0 <= serial_rx;
    builder_multiregimpl0_regs1 <= builder_multiregimpl0_regs0;
    builder_multiregimpl11_regs0 <= main_vfb_cdc_cdc_graycounter1_q;
    builder_multiregimpl11_regs1 <= builder_multiregimpl11_regs0;
    builder_multiregimpl13_regs0 <= {joypad_in_data};
    builder_multiregimpl13_regs1 <= builder_multiregimpl13_regs0;
    builder_multiregimpl14_regs0 <= {joypad2_in_data};
    builder_multiregimpl14_regs1 <= builder_multiregimpl14_regs0;
end

always @(posedge sys2x_clk) begin
    main_phase_sys2x <= (~main_phase_sel);
    main_phase_sel <= ((~main_phase_sel) & (main_phase_sys2x ^ main_phase_sys));
    main_wr_data_en_d <= (main_dfi_dfi_p0_wrdata_en & (main_phase_sel == 1'd0));
    main_rddata_d <= main_full_rate_phy_dfi_p0_rddata;
    main_full_rate_phy_rddata_en <= {main_full_rate_phy_rddata_en, main_full_rate_phy_dfi_p0_rddata_en};
    main_full_rate_phy_dfi_p0_rddata_valid <= main_full_rate_phy_rddata_en[2];
    if (sys2x_rst) begin
        main_full_rate_phy_dfi_p0_rddata_valid <= 1'd0;
        main_full_rate_phy_rddata_en <= 3'd0;
        main_phase_sel <= 1'd0;
        main_phase_sys2x <= 1'd0;
        main_wr_data_en_d <= 1'd0;
        main_rddata_d <= 16'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 13652-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:13651];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_basesoc_basesoc_adr];
end
assign main_basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_ram_we[0])
		sram[main_basesoc_ram_adr][7:0] <= main_basesoc_ram_dat_w[7:0];
	if (main_basesoc_ram_we[1])
		sram[main_basesoc_ram_adr][15:8] <= main_basesoc_ram_dat_w[15:8];
	if (main_basesoc_ram_we[2])
		sram[main_basesoc_ram_adr][23:16] <= main_basesoc_ram_dat_w[23:16];
	if (main_basesoc_ram_we[3])
		sram[main_basesoc_ram_adr][31:24] <= main_basesoc_ram_dat_w[31:24];
	sram_adr0 <= main_basesoc_ram_adr;
end
assign main_basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 52-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:51];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_wrport_we)
		storage_1[main_basesoc_uart_tx_fifo_wrport_adr] <= main_basesoc_uart_tx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_basesoc_uart_tx_fifo_rdport_adr];
end
assign main_basesoc_uart_tx_fifo_wrport_dat_r = storage_1_dat0;
assign main_basesoc_uart_tx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_2[0:15];
reg [9:0] storage_2_dat0;
reg [9:0] storage_2_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_wrport_we)
		storage_2[main_basesoc_uart_rx_fifo_wrport_adr] <= main_basesoc_uart_rx_fifo_wrport_dat_w;
	storage_2_dat0 <= storage_2[main_basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_rdport_re)
		storage_2_dat1 <= storage_2[main_basesoc_uart_rx_fifo_rdport_adr];
end
assign main_basesoc_uart_rx_fifo_wrport_dat_r = storage_2_dat0;
assign main_basesoc_uart_rx_fifo_rdport_dat_r = storage_2_dat1;


//------------------------------------------------------------------------------
// Memory storage_3: 8-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 24 
// Port 1 | Read: Async | Write: ---- | 
reg [23:0] storage_3[0:7];
reg [23:0] storage_3_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine0_wrport_we)
		storage_3[main_sdram_bankmachine0_wrport_adr] <= main_sdram_bankmachine0_wrport_dat_w;
	storage_3_dat0 <= storage_3[main_sdram_bankmachine0_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine0_wrport_dat_r = storage_3_dat0;
assign main_sdram_bankmachine0_rdport_dat_r = storage_3[main_sdram_bankmachine0_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 8-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 24 
// Port 1 | Read: Async | Write: ---- | 
reg [23:0] storage_4[0:7];
reg [23:0] storage_4_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine1_wrport_we)
		storage_4[main_sdram_bankmachine1_wrport_adr] <= main_sdram_bankmachine1_wrport_dat_w;
	storage_4_dat0 <= storage_4[main_sdram_bankmachine1_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine1_wrport_dat_r = storage_4_dat0;
assign main_sdram_bankmachine1_rdport_dat_r = storage_4[main_sdram_bankmachine1_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_5: 8-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 24 
// Port 1 | Read: Async | Write: ---- | 
reg [23:0] storage_5[0:7];
reg [23:0] storage_5_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine2_wrport_we)
		storage_5[main_sdram_bankmachine2_wrport_adr] <= main_sdram_bankmachine2_wrport_dat_w;
	storage_5_dat0 <= storage_5[main_sdram_bankmachine2_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine2_wrport_dat_r = storage_5_dat0;
assign main_sdram_bankmachine2_rdport_dat_r = storage_5[main_sdram_bankmachine2_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_6: 8-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 24 
// Port 1 | Read: Async | Write: ---- | 
reg [23:0] storage_6[0:7];
reg [23:0] storage_6_dat0;
always @(posedge sys_clk) begin
	if (main_sdram_bankmachine3_wrport_we)
		storage_6[main_sdram_bankmachine3_wrport_adr] <= main_sdram_bankmachine3_wrport_dat_w;
	storage_6_dat0 <= storage_6[main_sdram_bankmachine3_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_sdram_bankmachine3_wrport_dat_r = storage_6_dat0;
assign main_sdram_bankmachine3_rdport_dat_r = storage_6[main_sdram_bankmachine3_rdport_adr];


//------------------------------------------------------------------------------
// Memory tag_mem: 512-words x 22-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 22 
reg [21:0] tag_mem[0:511];
reg [8:0] tag_mem_adr0;
always @(posedge sys_clk) begin
	if (main_tag_port_we)
		tag_mem[main_tag_port_adr] <= main_tag_port_dat_w;
	tag_mem_adr0 <= main_tag_port_adr;
end
assign main_tag_port_dat_r = tag_mem[tag_mem_adr0];


//------------------------------------------------------------------------------
// Memory storage_7: 16384-words x 3-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 3 
// Port 1 | Read: Async | Write: ---- | 
reg [2:0] storage_7[0:16383];
reg [2:0] storage_7_dat0;
always @(posedge sys_clk) begin
	if (main_vfb_dma_res_fifo_wrport_we)
		storage_7[main_vfb_dma_res_fifo_wrport_adr] <= main_vfb_dma_res_fifo_wrport_dat_w;
	storage_7_dat0 <= storage_7[main_vfb_dma_res_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign main_vfb_dma_res_fifo_wrport_dat_r = storage_7_dat0;
assign main_vfb_dma_res_fifo_rdport_dat_r = storage_7[main_vfb_dma_res_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_8: 16384-words x 34-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 34 
// Port 1 | Read: Sync  | Write: ---- | 
reg [33:0] storage_8[0:16383];
reg [33:0] storage_8_dat0;
reg [33:0] storage_8_dat1;
always @(posedge sys_clk) begin
	if (main_vfb_dma_fifo_wrport_we)
		storage_8[main_vfb_dma_fifo_wrport_adr] <= main_vfb_dma_fifo_wrport_dat_w;
	storage_8_dat0 <= storage_8[main_vfb_dma_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_vfb_dma_fifo_rdport_re)
		storage_8_dat1 <= storage_8[main_vfb_dma_fifo_rdport_adr];
end
assign main_vfb_dma_fifo_wrport_dat_r = storage_8_dat0;
assign main_vfb_dma_fifo_rdport_dat_r = storage_8_dat1;


//------------------------------------------------------------------------------
// Memory storage_9: 4-words x 34-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 34 
// Port 1 | Read: Sync  | Write: ---- | 
reg [33:0] storage_9[0:3];
reg [33:0] storage_9_dat0;
reg [33:0] storage_9_dat1;
always @(posedge sys_clk) begin
	if (main_vfb_cdc_cdc_wrport_we)
		storage_9[main_vfb_cdc_cdc_wrport_adr] <= main_vfb_cdc_cdc_wrport_dat_w;
	storage_9_dat0 <= storage_9[main_vfb_cdc_cdc_wrport_adr];
end
always @(posedge dvi_clk) begin
	storage_9_dat1 <= storage_9[main_vfb_cdc_cdc_rdport_adr];
end
assign main_vfb_cdc_cdc_wrport_dat_r = storage_9_dat0;
assign main_vfb_cdc_cdc_rdport_dat_r = storage_9_dat1;


//------------------------------------------------------------------------------
// Instance PLL of PLL Module.
//------------------------------------------------------------------------------
PLL #(
	// Parameters.
	.CLK0_IN_SEL       (1'd0),
	.CLK0_OUT_SEL      (1'd0),
	.CLK1_IN_SEL       (1'd0),
	.CLK1_OUT_SEL      (1'd0),
	.CLK2_IN_SEL       (1'd0),
	.CLK2_OUT_SEL      (1'd0),
	.CLK3_IN_SEL       (1'd0),
	.CLK3_OUT_SEL      (1'd0),
	.CLK4_IN_SEL       (1'd0),
	.CLK4_OUT_SEL      (1'd0),
	.CLK5_IN_SEL       (1'd0),
	.CLK5_OUT_SEL      (1'd0),
	.CLKFB_SEL         ("INTERNAL"),
	.CLKOUT0_DT_DIR    (1'd1),
	.CLKOUT0_DT_STEP   (1'd0),
	.CLKOUT0_EN        ("TRUE"),
	.CLKOUT0_PE_COARSE (1'd0),
	.CLKOUT0_PE_FINE   (1'd0),
	.CLKOUT1_DT_DIR    (1'd1),
	.CLKOUT1_DT_STEP   (1'd0),
	.CLKOUT1_EN        ("TRUE"),
	.CLKOUT1_PE_COARSE (1'd0),
	.CLKOUT1_PE_FINE   (1'd0),
	.CLKOUT2_DT_DIR    (1'd1),
	.CLKOUT2_DT_STEP   (1'd0),
	.CLKOUT2_EN        ("TRUE"),
	.CLKOUT2_PE_COARSE (1'd0),
	.CLKOUT2_PE_FINE   (1'd0),
	.CLKOUT3_DT_DIR    (1'd1),
	.CLKOUT3_DT_STEP   (1'd0),
	.CLKOUT3_EN        ("TRUE"),
	.CLKOUT3_PE_COARSE (1'd0),
	.CLKOUT3_PE_FINE   (1'd0),
	.CLKOUT4_EN        ("TRUE"),
	.CLKOUT4_PE_COARSE (3'd4),
	.CLKOUT4_PE_FINE   (1'd0),
	.CLKOUT5_EN        ("FALSE"),
	.CLKOUT5_PE_COARSE (1'd0),
	.CLKOUT5_PE_FINE   (1'd0),
	.CLKOUT6_EN        ("FALSE"),
	.CLKOUT6_PE_COARSE (1'd0),
	.CLKOUT6_PE_FINE   (1'd0),
	.DE0_EN            ("FALSE"),
	.DE1_EN            ("FALSE"),
	.DE2_EN            ("FALSE"),
	.DE3_EN            ("FALSE"),
	.DE4_EN            ("FALSE"),
	.DE5_EN            ("FALSE"),
	.DE6_EN            ("FALSE"),
	.DYN_DPA_EN        ("FALSE"),
	.DYN_DT0_SEL       ("FALSE"),
	.DYN_DT1_SEL       ("FALSE"),
	.DYN_DT2_SEL       ("FALSE"),
	.DYN_DT3_SEL       ("FALSE"),
	.DYN_FBDIV_SEL     ("FALSE"),
	.DYN_ICP_SEL       ("FALSE"),
	.DYN_IDIV_SEL      ("FALSE"),
	.DYN_LPF_SEL       ("FALSE"),
	.DYN_ODIV0_SEL     ("FALSE"),
	.DYN_ODIV1_SEL     ("FALSE"),
	.DYN_ODIV2_SEL     ("FALSE"),
	.DYN_ODIV3_SEL     ("FALSE"),
	.DYN_ODIV4_SEL     ("FALSE"),
	.DYN_ODIV5_SEL     ("FALSE"),
	.DYN_ODIV6_SEL     ("FALSE"),
	.DYN_PE0_SEL       ("FALSE"),
	.DYN_PE1_SEL       ("FALSE"),
	.DYN_PE2_SEL       ("FALSE"),
	.DYN_PE3_SEL       ("FALSE"),
	.DYN_PE4_SEL       ("FALSE"),
	.DYN_PE5_SEL       ("FALSE"),
	.DYN_PE6_SEL       ("FALSE"),
	.FBDIV_SEL         (1'd1),
	.FCLKIN            ("50.0"),
	.IDIV_SEL          (1'd1),
	.MDIV_FRAC_SEL     (1'd0),
	.MDIV_SEL          (5'd16),
	.ODIV0_FRAC_SEL    (1'd0),
	.ODIV0_SEL         (5'd16),
	.ODIV1_SEL         (5'd24),
	.ODIV2_SEL         (5'd16),
	.ODIV3_SEL         (4'd8),
	.ODIV4_SEL         (4'd8),
	.ODIV5_SEL         (4'd8),
	.ODIV6_SEL         (4'd8),
	.RESET_I_EN        ("FALSE"),
	.RESET_O_EN        ("FALSE"),
	.SSC_EN            ("FALSE")
) PLL (
	// Inputs.
	.CLKFB         (1'd0),
	.CLKIN         (main_clkin),
	.DT0           (4'd0),
	.DT1           (4'd0),
	.DT2           (4'd0),
	.DT3           (4'd0),
	.ENCLK0        (1'd1),
	.ENCLK1        (1'd1),
	.ENCLK2        (1'd1),
	.ENCLK3        (1'd1),
	.ENCLK4        (1'd1),
	.ENCLK5        (1'd1),
	.ENCLK6        (1'd1),
	.FBDSEL        (6'd0),
	.ICPSEL        (6'd0),
	.IDSEL         (6'd0),
	.LPFCAP        (2'd0),
	.LPFRES        (3'd0),
	.MDSEL         (7'd0),
	.MDSEL_FRAC    (3'd0),
	.ODSEL0        (7'd0),
	.ODSEL0_FRAC   (3'd0),
	.ODSEL1        (7'd0),
	.ODSEL2        (7'd0),
	.ODSEL3        (7'd0),
	.ODSEL4        (7'd0),
	.ODSEL5        (7'd0),
	.ODSEL6        (7'd0),
	.PLLPWD        (1'd0),
	.PSDIR         (1'd0),
	.PSPULSE       (1'd0),
	.PSSEL         (3'd0),
	.RESET         (main_reset),
	.RESET_I       (1'd0),
	.RESET_O       (1'd0),
	.SSCMDSEL      (7'd0),
	.SSCMDSEL_FRAC (3'd0),
	.SSCON         (1'd0),
	.SSCPOL        (1'd0),

	// Outputs.
	.CLKFBOUT      (builder_basesoc_gw5apll2),
	.CLKOUT0       (main_clkout0),
	.CLKOUT1       (main_clkout1),
	.CLKOUT2       (main_clkout2),
	.CLKOUT3       (main_clkout3),
	.CLKOUT4       (main_clkout4),
	.CLKOUT5       (builder_basesoc_gw5apll0),
	.CLKOUT6       (builder_basesoc_gw5apll1),
	.LOCK          (main_locked)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (main_basesoc_dbus_ack),
	.dBusWishbone_DAT_MISO  (main_basesoc_dbus_dat_r),
	.dBusWishbone_ERR       (main_basesoc_dbus_err),
	.externalInterruptArray (main_basesoc_interrupt),
	.externalResetVector    (main_basesoc_vexriscv),
	.iBusWishbone_ACK       (main_basesoc_ibus_ack),
	.iBusWishbone_DAT_MISO  (main_basesoc_ibus_dat_r),
	.iBusWishbone_ERR       (main_basesoc_ibus_err),
	.reset                  ((sys_rst | main_basesoc_reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (main_basesoc_dbus_adr),
	.dBusWishbone_BTE       (main_basesoc_dbus_bte),
	.dBusWishbone_CTI       (main_basesoc_dbus_cti),
	.dBusWishbone_CYC       (main_basesoc_dbus_cyc),
	.dBusWishbone_DAT_MOSI  (main_basesoc_dbus_dat_w),
	.dBusWishbone_SEL       (main_basesoc_dbus_sel),
	.dBusWishbone_STB       (main_basesoc_dbus_stb),
	.dBusWishbone_WE        (main_basesoc_dbus_we),
	.iBusWishbone_ADR       (main_basesoc_ibus_adr),
	.iBusWishbone_BTE       (main_basesoc_ibus_bte),
	.iBusWishbone_CTI       (main_basesoc_ibus_cti),
	.iBusWishbone_CYC       (main_basesoc_ibus_cyc),
	.iBusWishbone_DAT_MOSI  (main_basesoc_ibus_dat_w),
	.iBusWishbone_SEL       (main_basesoc_ibus_sel),
	.iBusWishbone_STB       (main_basesoc_ibus_stb),
	.iBusWishbone_WE        (main_basesoc_ibus_we)
);

//------------------------------------------------------------------------------
// Memory data_mem_grain0: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain0[0:511];
reg [8:0] data_mem_grain0_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[0])
		data_mem_grain0[main_data_port_adr] <= main_data_port_dat_w[7:0];
	data_mem_grain0_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[7:0] = data_mem_grain0[data_mem_grain0_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain1: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain1[0:511];
reg [8:0] data_mem_grain1_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[1])
		data_mem_grain1[main_data_port_adr] <= main_data_port_dat_w[15:8];
	data_mem_grain1_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[15:8] = data_mem_grain1[data_mem_grain1_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain2: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain2[0:511];
reg [8:0] data_mem_grain2_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[2])
		data_mem_grain2[main_data_port_adr] <= main_data_port_dat_w[23:16];
	data_mem_grain2_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[23:16] = data_mem_grain2[data_mem_grain2_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain3: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain3[0:511];
reg [8:0] data_mem_grain3_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[3])
		data_mem_grain3[main_data_port_adr] <= main_data_port_dat_w[31:24];
	data_mem_grain3_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[31:24] = data_mem_grain3[data_mem_grain3_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain4: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain4[0:511];
reg [8:0] data_mem_grain4_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[4])
		data_mem_grain4[main_data_port_adr] <= main_data_port_dat_w[39:32];
	data_mem_grain4_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[39:32] = data_mem_grain4[data_mem_grain4_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain5: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain5[0:511];
reg [8:0] data_mem_grain5_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[5])
		data_mem_grain5[main_data_port_adr] <= main_data_port_dat_w[47:40];
	data_mem_grain5_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[47:40] = data_mem_grain5[data_mem_grain5_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain6: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain6[0:511];
reg [8:0] data_mem_grain6_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[6])
		data_mem_grain6[main_data_port_adr] <= main_data_port_dat_w[55:48];
	data_mem_grain6_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[55:48] = data_mem_grain6[data_mem_grain6_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain7: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain7[0:511];
reg [8:0] data_mem_grain7_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[7])
		data_mem_grain7[main_data_port_adr] <= main_data_port_dat_w[63:56];
	data_mem_grain7_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[63:56] = data_mem_grain7[data_mem_grain7_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain8: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain8[0:511];
reg [8:0] data_mem_grain8_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[8])
		data_mem_grain8[main_data_port_adr] <= main_data_port_dat_w[71:64];
	data_mem_grain8_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[71:64] = data_mem_grain8[data_mem_grain8_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain9: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain9[0:511];
reg [8:0] data_mem_grain9_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[9])
		data_mem_grain9[main_data_port_adr] <= main_data_port_dat_w[79:72];
	data_mem_grain9_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[79:72] = data_mem_grain9[data_mem_grain9_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain10: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain10[0:511];
reg [8:0] data_mem_grain10_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[10])
		data_mem_grain10[main_data_port_adr] <= main_data_port_dat_w[87:80];
	data_mem_grain10_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[87:80] = data_mem_grain10[data_mem_grain10_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain11: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain11[0:511];
reg [8:0] data_mem_grain11_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[11])
		data_mem_grain11[main_data_port_adr] <= main_data_port_dat_w[95:88];
	data_mem_grain11_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[95:88] = data_mem_grain11[data_mem_grain11_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain12: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain12[0:511];
reg [8:0] data_mem_grain12_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[12])
		data_mem_grain12[main_data_port_adr] <= main_data_port_dat_w[103:96];
	data_mem_grain12_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[103:96] = data_mem_grain12[data_mem_grain12_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain13: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain13[0:511];
reg [8:0] data_mem_grain13_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[13])
		data_mem_grain13[main_data_port_adr] <= main_data_port_dat_w[111:104];
	data_mem_grain13_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[111:104] = data_mem_grain13[data_mem_grain13_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain14: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain14[0:511];
reg [8:0] data_mem_grain14_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[14])
		data_mem_grain14[main_data_port_adr] <= main_data_port_dat_w[119:112];
	data_mem_grain14_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[119:112] = data_mem_grain14[data_mem_grain14_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain15: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain15[0:511];
reg [8:0] data_mem_grain15_adr0;
always @(posedge sys_clk) begin
	if (main_data_port_we[15])
		data_mem_grain15[main_data_port_adr] <= main_data_port_dat_w[127:120];
	data_mem_grain15_adr0 <= main_data_port_adr;
end
assign main_data_port_dat_r[127:120] = data_mem_grain15[data_mem_grain15_adr0];


//------------------------------------------------------------------------------
// Instance DFFP of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP(
	// Inputs.
	.CLK    (sys_clk),
	.D      (1'd0),
	.PRESET ((~main_locked)),

	// Outputs.
	.Q      (builder_rst10)
);

//------------------------------------------------------------------------------
// Instance DFFP_1 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_1(
	// Inputs.
	.CLK    (sys_clk),
	.D      (builder_rst10),
	.PRESET ((~main_locked)),

	// Outputs.
	.Q      (sys_rst)
);

//------------------------------------------------------------------------------
// Instance DFFP_2 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_2(
	// Inputs.
	.CLK    (dvi_clk),
	.D      (1'd0),
	.PRESET ((~main_locked)),

	// Outputs.
	.Q      (builder_rst11)
);

//------------------------------------------------------------------------------
// Instance DFFP_3 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_3(
	// Inputs.
	.CLK    (dvi_clk),
	.D      (builder_rst11),
	.PRESET ((~main_locked)),

	// Outputs.
	.Q      (dvi_rst)
);

//------------------------------------------------------------------------------
// Instance DFFP_4 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_4(
	// Inputs.
	.CLK    (cpu_clk),
	.D      (1'd0),
	.PRESET ((~main_locked)),

	// Outputs.
	.Q      (builder_rst12)
);

//------------------------------------------------------------------------------
// Instance DFFP_5 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_5(
	// Inputs.
	.CLK    (cpu_clk),
	.D      (builder_rst12),
	.PRESET ((~main_locked)),

	// Outputs.
	.Q      (cpu_rst)
);

//------------------------------------------------------------------------------
// Instance DFFP_6 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_6(
	// Inputs.
	.CLK    (sys2x_clk),
	.D      (1'd0),
	.PRESET ((~main_locked)),

	// Outputs.
	.Q      (builder_rst13)
);

//------------------------------------------------------------------------------
// Instance DFFP_7 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_7(
	// Inputs.
	.CLK    (sys2x_clk),
	.D      (builder_rst13),
	.PRESET ((~main_locked)),

	// Outputs.
	.Q      (sys2x_rst)
);

//------------------------------------------------------------------------------
// Instance DFFP_8 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_8(
	// Inputs.
	.CLK    (sys2x_ps_clk),
	.D      (1'd0),
	.PRESET ((~main_locked)),

	// Outputs.
	.Q      (builder_rst14)
);

//------------------------------------------------------------------------------
// Instance DFFP_9 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_9(
	// Inputs.
	.CLK    (sys2x_ps_clk),
	.D      (builder_rst14),
	.PRESET ((~main_locked)),

	// Outputs.
	.Q      (sys2x_ps_rst)
);

//------------------------------------------------------------------------------
// Instance ODDR of ODDR Module.
//------------------------------------------------------------------------------
ODDR ODDR(
	// Inputs.
	.CLK (sys2x_ps_clk),
	.D0  (1'd1),
	.D1  (1'd0),
	.TX  (1'd0),

	// Outputs.
	.Q0  (sdram_clock),
	.Q1  (builder_gowinddroutputimpl0)
);

//------------------------------------------------------------------------------
// Instance DFFSE of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_cs_n),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_cs_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_1 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_1(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[0]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[0])
);

//------------------------------------------------------------------------------
// Instance DFFSE_2 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_2(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[1]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[1])
);

//------------------------------------------------------------------------------
// Instance DFFSE_3 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_3(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[2]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[2])
);

//------------------------------------------------------------------------------
// Instance DFFSE_4 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_4(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[3]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[3])
);

//------------------------------------------------------------------------------
// Instance DFFSE_5 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_5(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[4]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[4])
);

//------------------------------------------------------------------------------
// Instance DFFSE_6 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_6(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[5]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[5])
);

//------------------------------------------------------------------------------
// Instance DFFSE_7 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_7(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[6]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[6])
);

//------------------------------------------------------------------------------
// Instance DFFSE_8 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_8(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[7]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[7])
);

//------------------------------------------------------------------------------
// Instance DFFSE_9 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_9(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[8]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[8])
);

//------------------------------------------------------------------------------
// Instance DFFSE_10 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_10(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[9]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[9])
);

//------------------------------------------------------------------------------
// Instance DFFSE_11 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_11(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[10]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[10])
);

//------------------------------------------------------------------------------
// Instance DFFSE_12 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_12(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[11]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[11])
);

//------------------------------------------------------------------------------
// Instance DFFSE_13 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_13(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_address[12]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_a[12])
);

//------------------------------------------------------------------------------
// Instance DFFSE_14 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_14(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_bank[0]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_ba[0])
);

//------------------------------------------------------------------------------
// Instance DFFSE_15 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_15(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_bank[1]),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_ba[1])
);

//------------------------------------------------------------------------------
// Instance DFFSE_16 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_16(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_ras_n),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_ras_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_17 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_17(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_cas_n),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_cas_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_18 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_18(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_we_n),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_we_n)
);

//------------------------------------------------------------------------------
// Instance IOBUF of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl0__o),
	.OEN (builder_gw5asdrtristateimpl0_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl0__i),

	// InOuts.
	.IO  (sdram_dq[0])
);

//------------------------------------------------------------------------------
// Instance IOBUF_1 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_1(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl1__o),
	.OEN (builder_gw5asdrtristateimpl1_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl1__i),

	// InOuts.
	.IO  (sdram_dq[1])
);

//------------------------------------------------------------------------------
// Instance IOBUF_2 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_2(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl2__o),
	.OEN (builder_gw5asdrtristateimpl2_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl2__i),

	// InOuts.
	.IO  (sdram_dq[2])
);

//------------------------------------------------------------------------------
// Instance IOBUF_3 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_3(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl3__o),
	.OEN (builder_gw5asdrtristateimpl3_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl3__i),

	// InOuts.
	.IO  (sdram_dq[3])
);

//------------------------------------------------------------------------------
// Instance IOBUF_4 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_4(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl4__o),
	.OEN (builder_gw5asdrtristateimpl4_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl4__i),

	// InOuts.
	.IO  (sdram_dq[4])
);

//------------------------------------------------------------------------------
// Instance IOBUF_5 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_5(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl5__o),
	.OEN (builder_gw5asdrtristateimpl5_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl5__i),

	// InOuts.
	.IO  (sdram_dq[5])
);

//------------------------------------------------------------------------------
// Instance IOBUF_6 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_6(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl6__o),
	.OEN (builder_gw5asdrtristateimpl6_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl6__i),

	// InOuts.
	.IO  (sdram_dq[6])
);

//------------------------------------------------------------------------------
// Instance IOBUF_7 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_7(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl7__o),
	.OEN (builder_gw5asdrtristateimpl7_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl7__i),

	// InOuts.
	.IO  (sdram_dq[7])
);

//------------------------------------------------------------------------------
// Instance IOBUF_8 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_8(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl8__o),
	.OEN (builder_gw5asdrtristateimpl8_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl8__i),

	// InOuts.
	.IO  (sdram_dq[8])
);

//------------------------------------------------------------------------------
// Instance IOBUF_9 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_9(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl9__o),
	.OEN (builder_gw5asdrtristateimpl9_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl9__i),

	// InOuts.
	.IO  (sdram_dq[9])
);

//------------------------------------------------------------------------------
// Instance IOBUF_10 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_10(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl10__o),
	.OEN (builder_gw5asdrtristateimpl10_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl10__i),

	// InOuts.
	.IO  (sdram_dq[10])
);

//------------------------------------------------------------------------------
// Instance IOBUF_11 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_11(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl11__o),
	.OEN (builder_gw5asdrtristateimpl11_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl11__i),

	// InOuts.
	.IO  (sdram_dq[11])
);

//------------------------------------------------------------------------------
// Instance IOBUF_12 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_12(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl12__o),
	.OEN (builder_gw5asdrtristateimpl12_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl12__i),

	// InOuts.
	.IO  (sdram_dq[12])
);

//------------------------------------------------------------------------------
// Instance IOBUF_13 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_13(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl13__o),
	.OEN (builder_gw5asdrtristateimpl13_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl13__i),

	// InOuts.
	.IO  (sdram_dq[13])
);

//------------------------------------------------------------------------------
// Instance IOBUF_14 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_14(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl14__o),
	.OEN (builder_gw5asdrtristateimpl14_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl14__i),

	// InOuts.
	.IO  (sdram_dq[14])
);

//------------------------------------------------------------------------------
// Instance IOBUF_15 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_15(
	// Inputs.
	.I   (builder_gw5asdrtristateimpl15__o),
	.OEN (builder_gw5asdrtristateimpl15_oe_n),

	// Outputs.
	.O   (builder_gw5asdrtristateimpl15__i),

	// InOuts.
	.IO  (sdram_dq[15])
);

//------------------------------------------------------------------------------
// Instance DFFSE_19 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_19(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((main_full_rate_phy_dfi_p0_wrdata_en & main_full_rate_phy_dfi_p0_wrdata_mask[0])),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_dm[0])
);

//------------------------------------------------------------------------------
// Instance DFFSE_20 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_20(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((main_full_rate_phy_dfi_p0_wrdata_en & main_full_rate_phy_dfi_p0_wrdata_mask[1])),
	.SET (1'd0),

	// Outputs.
	.Q   (sdram_dm[1])
);

//------------------------------------------------------------------------------
// Instance ODDR_1 of ODDR Module.
//------------------------------------------------------------------------------
ODDR ODDR_1(
	// Inputs.
	.CLK (dvi_clk),
	.D0  (1'd1),
	.D1  (1'd0),
	.TX  (1'd0),

	// Outputs.
	.Q0  (lcd_clk),
	.Q1  (builder_gowinddroutputimpl1)
);

//------------------------------------------------------------------------------
// Instance DFFSE_21 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_21(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   (main_sink_payload_de),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_de)
);

//------------------------------------------------------------------------------
// Instance DFFSE_22 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_22(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((~main_sink_payload_hsync)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_hsync_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_23 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_23(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((~main_sink_payload_vsync)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_vsync_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_24 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_24(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_r[2] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_r[0])
);

//------------------------------------------------------------------------------
// Instance DFFSE_25 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_25(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_g[2] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_g[0])
);

//------------------------------------------------------------------------------
// Instance DFFSE_26 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_26(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_b[2] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_b[0])
);

//------------------------------------------------------------------------------
// Instance DFFSE_27 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_27(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_r[3] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_r[1])
);

//------------------------------------------------------------------------------
// Instance DFFSE_28 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_28(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_g[3] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_g[1])
);

//------------------------------------------------------------------------------
// Instance DFFSE_29 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_29(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_b[3] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_b[1])
);

//------------------------------------------------------------------------------
// Instance DFFSE_30 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_30(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_r[4] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_r[2])
);

//------------------------------------------------------------------------------
// Instance DFFSE_31 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_31(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_g[4] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_g[2])
);

//------------------------------------------------------------------------------
// Instance DFFSE_32 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_32(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_b[4] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_b[2])
);

//------------------------------------------------------------------------------
// Instance DFFSE_33 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_33(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_r[5] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_r[3])
);

//------------------------------------------------------------------------------
// Instance DFFSE_34 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_34(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_g[5] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_g[3])
);

//------------------------------------------------------------------------------
// Instance DFFSE_35 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_35(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_b[5] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_b[3])
);

//------------------------------------------------------------------------------
// Instance DFFSE_36 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_36(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_r[6] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_r[4])
);

//------------------------------------------------------------------------------
// Instance DFFSE_37 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_37(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_g[6] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_g[4])
);

//------------------------------------------------------------------------------
// Instance DFFSE_38 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_38(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_b[6] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_b[4])
);

//------------------------------------------------------------------------------
// Instance DFFSE_39 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_39(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_r[7] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_r[5])
);

//------------------------------------------------------------------------------
// Instance DFFSE_40 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_40(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_g[7] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_g[5])
);

//------------------------------------------------------------------------------
// Instance DFFSE_41 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_41(
	// Inputs.
	.CE  (1'd1),
	.CLK (dvi_clk),
	.D   ((main_sink_payload_b[7] & main_sink_payload_de)),
	.SET (1'd0),

	// Outputs.
	.Q   (lcd_b[5])
);

//------------------------------------------------------------------------------
// Instance IOBUF_16 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_16(
	// Inputs.
	.I   (1'd0),
	.OEN ((~(~main_scl))),

	// Outputs.
	.O   (builder_expr),

	// InOuts.
	.IO  (atkms7620_scl)
);

//------------------------------------------------------------------------------
// Instance IOBUF_17 of IOBUF Module.
//------------------------------------------------------------------------------
IOBUF IOBUF_17(
	// Inputs.
	.I   (1'd0),
	.OEN ((~(main_oe & (~main_sda0)))),

	// Outputs.
	.O   (main_sda1),

	// InOuts.
	.IO  (atkms7620_sda)
);

//------------------------------------------------------------------------------
// Instance DFFSE_42 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_42(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[0]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl0__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_43 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_43(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl0_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_44 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_44(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl0__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[0])
);

//------------------------------------------------------------------------------
// Instance DFFSE_45 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_45(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[1]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl1__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_46 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_46(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl1_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_47 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_47(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl1__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[1])
);

//------------------------------------------------------------------------------
// Instance DFFSE_48 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_48(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[2]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl2__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_49 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_49(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl2_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_50 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_50(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl2__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[2])
);

//------------------------------------------------------------------------------
// Instance DFFSE_51 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_51(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[3]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl3__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_52 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_52(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl3_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_53 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_53(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl3__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[3])
);

//------------------------------------------------------------------------------
// Instance DFFSE_54 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_54(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[4]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl4__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_55 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_55(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl4_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_56 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_56(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl4__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[4])
);

//------------------------------------------------------------------------------
// Instance DFFSE_57 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_57(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[5]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl5__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_58 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_58(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl5_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_59 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_59(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl5__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[5])
);

//------------------------------------------------------------------------------
// Instance DFFSE_60 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_60(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[6]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl6__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_61 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_61(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl6_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_62 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_62(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl6__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[6])
);

//------------------------------------------------------------------------------
// Instance DFFSE_63 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_63(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[7]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl7__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_64 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_64(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl7_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_65 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_65(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl7__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[7])
);

//------------------------------------------------------------------------------
// Instance DFFSE_66 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_66(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[8]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl8__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_67 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_67(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl8_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_68 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_68(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl8__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[8])
);

//------------------------------------------------------------------------------
// Instance DFFSE_69 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_69(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[9]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl9__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_70 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_70(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl9_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_71 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_71(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl9__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[9])
);

//------------------------------------------------------------------------------
// Instance DFFSE_72 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_72(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[10]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl10__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_73 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_73(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl10_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_74 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_74(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl10__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[10])
);

//------------------------------------------------------------------------------
// Instance DFFSE_75 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_75(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[11]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl11__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_76 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_76(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl11_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_77 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_77(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl11__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[11])
);

//------------------------------------------------------------------------------
// Instance DFFSE_78 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_78(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[12]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl12__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_79 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_79(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl12_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_80 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_80(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl12__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[12])
);

//------------------------------------------------------------------------------
// Instance DFFSE_81 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_81(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[13]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl13__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_82 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_82(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl13_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_83 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_83(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl13__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[13])
);

//------------------------------------------------------------------------------
// Instance DFFSE_84 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_84(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[14]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl14__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_85 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_85(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl14_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_86 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_86(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl14__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[14])
);

//------------------------------------------------------------------------------
// Instance DFFSE_87 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_87(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (main_full_rate_phy_dfi_p0_wrdata[15]),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl15__o)
);

//------------------------------------------------------------------------------
// Instance DFFSE_88 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_88(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   ((~main_full_rate_phy_dfi_p0_wrdata_en)),
	.SET (1'd0),

	// Outputs.
	.Q   (builder_gw5asdrtristateimpl15_oe_n)
);

//------------------------------------------------------------------------------
// Instance DFFSE_89 of DFFSE Module.
//------------------------------------------------------------------------------
DFFSE DFFSE_89(
	// Inputs.
	.CE  (1'd1),
	.CLK (sys2x_clk),
	.D   (builder_gw5asdrtristateimpl15__i),
	.SET (1'd0),

	// Outputs.
	.Q   (main_full_rate_phy_dfi_p0_rddata[15])
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-11-30 05:56:00.
//------------------------------------------------------------------------------
